{"version":3,"file":"js/editor.js","mappings":";;;;;;;;;;AAAa;;AAEb,sBAAsB,mBAAO,CAAC,kDAAS;;AAEvC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D,iDAAiD,iBAAiB;AAClE;AACA;;AAEA;AACA,kCAAkC;AAClC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,mDAAkD;AAClD;AACA,wBAAwB,mBAAO,CAAC,kDAAO;AACvC,GAAG;AACH;AACA;AACA,CAAC,EAAC;;AAEF;AACA,gCAAgC,mBAAO,CAAC,kDAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gCAAgC,aAAa,kBAAkB,iCAAiC;AAChG;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,2CAA2C;AACnyBAAyB;AACzB;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,kCAAkC;AAClC,oCAAoC;AACpC;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvezCA;AACA;AACA;AACA;AACA;AAEA;;AAKA,MAAMW,WAAW,GAAG,MAAM;AACzB,QAAM;AACLC,IAAAA,WADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,MAIFR,0DAAS,CAAEC,MAAD,IAAYA,MAAM,CAAC,uBAAD,CAAN,CAAgCQ,cAAhC,EAAb,CAJb;AAKA,QAAMC,QAAQ,GAAGV,0DAAS,CAAEC,MAAD,IAAY;AACtC,UAAMU,eAAe,GAAGV,MAAM,CAAC,uBAAD,CAAN,CAAgCW,WAAhC,EAAxB;AAEA,WAAO;AACNC,MAAAA,MAAM,EAAEF,eAAe,CAACG,MAAhB,CAAuB;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAcA,IAAI,KAAK,QAAvB;AAAA,OAAvB,CADF;AAENC,MAAAA,MAAM,EAAEL,eAAe,CAACG,MAAhB,CAAuB;AAAA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ACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACjRa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,4BAA4B,iDAAiD;;AAE7E;AACA,OAAO;AACP,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;AAED;AACA;;AAEA;AACA,MAAM,IAA6B;AACnC;AACA;;AAEA;AACA,OAAO,EAGJ;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;AC/HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,mBAAmB,uCAAuC;AAC1D,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,SAAS,mBAAO,CAAC,iHAAsB;AACvC,UAAU,mBAAO,CAAC,qHAAwB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC7DY;;AAEZ,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;ACnBY;;AAEZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjFY;;AAEZ,cAAc,mBAAO,CAAC,wGAAW;;AAEjC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AClCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACjKY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AClCY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AClCa;;AAEb,QAAQ,gBAAgB,EAAE,mBAAO,CAAC,wDAAQ;;AAE1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACjKa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChEa;;AAEb,kBAAkB,mBAAO,CAAC,kEAAc;AACxC,aAAa,mBAAO,CAAC,wDAAQ;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uDAAuD;AAC9E,uBAAuB,uDAAuD;AAC9E,oBAAoB,oDAAoD;AACxE,oBAAoB,oDAAoD;AACxE,oBAAoB,oDAAoD;AACxE,qBAAqB,qDAAqD;AAC1E,oBAAoB,oDAAoD;AACxE,kBAAkB,gDAAgD;AAClE,kBAAkB,gDAAgD;AAClE,mBAAmB,iDAAiD;AACpE,aAAa,gDAAgD;AAC7D,qBAAqB;AACrB;;AAEA;AACA,sCAAsC,oCAAoC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B;AAC9B,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B,oBAAoB,wBAAwB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B,oBAAoB,wBAAwB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACxQa;;AAEb,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,CAAC;;AAED,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/Qa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;;AAE7B,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;;;;;;;;;;;;AC5Ga;;AAEb,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1Ca;;AAEb,gCAAgC,mBAAO,CAAC,wFAAc;AACtD,qCAAqC,mBAAO,CAAC,kGAAmB;AAChE,mCAAmC,mBAAO,CAAC,+GAAkC;AAC7E,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnDa;;AAEb,gCAAgC,mBAAO,CAAC,wFAAc;AACtD,0CAA0C,mBAAO,CAAC,6HAAyC;AAC3F,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBa;;AAEb,gCAAgC,mBAAO,CAAC,wFAAc;AACtD,wCAAwC,mBAAO,CAAC,wGAAsB;AACtE,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBa;;AAEb,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,4CAA4C,OAAO;AACnD;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClCa;;AAEb,cAAc,mBAAO,CAAC,mEAAmB;AACzC,kBAAkB,mBAAO,CAAC,qEAAiB;AAC3C,mCAAmC,mBAAO,CAAC,gGAAmB;AAC9D,0CAA0C,mBAAO,CAAC,kHAA4B;AAC9E,aAAa,mBAAO,CAAC,mEAAmB;;AAExC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;;AAEA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,QAAQ;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC,cAAc;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,6BAA6B;AACzD,8EAA8E,4BAA4B;AAC1G,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9Na;;AAEb,cAAc,mBAAO,CAAC,mEAAmB;AACzC,kBAAkB,mBAAO,CAAC,qEAAiB;AAC3C,0CAA0C,mBAAO,CAAC,6HAAyC;;AAE3F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;;;;;;;;;;;ACjJa;;AAEb,cAAc,mBAAO,CAAC,mEAAmB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/Da;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0CAA0C,QAAQ;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,6BAA6B;AACnE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,mBAAmB;AAC/C;;AAEA;AACA;;AAEA,4BAA4B,mBAAmB;AAC/C,gCAAgC,aAAa;AAC7C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,0CAA0C;AACtE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,QAAQ;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAsC,QAAQ;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpLa;;AAEb,kBAAkB,mBAAO,CAAC,kEAAc;AACxC,yBAAyB,mBAAO,CAAC,oFAAsB;AACvD,8BAA8B,mBAAO,CAAC,8FAA2B;AACjE,gCAAgC,mBAAO,CAAC,oHAA0C;AAClF,kCAAkC,mBAAO,CAAC,wHAA4C;AACtF,cAAc,mBAAO,CAAC,gEAAgB;AACtC,2BAA2B,mBAAO,CAAC,oFAA0B;AAC7D,qBAAqB,mBAAO,CAAC,gFAAwB;AACrD,gBAAgB,mBAAO,CAAC,sEAAmB;AAC3C,uBAAuB,mBAAO,CAAC,sFAA2B;AAC1D,YAAY,mBAAO,CAAC,8EAAuB;AAC3C,gBAAgB,mBAAO,CAAC,sEAAmB;AAC3C,aAAa,mBAAO,CAAC,gEAAgB;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D,yCAAyC;AACtcAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA,gEAAgE,OAAO;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+DAA+D,QAAQ;AACvE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iDAAiD,QAAQ;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C,QAAQ;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2CAA2C,+BAA+B;AAC1E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,wBAAwB;AAC5C;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,0CAA0C,QAAQ;AAClD;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0CAA0C,OAAO;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,qCAAqC;AACpD;AACA;AACA,MAAM;AACN,eAAe,qCAAqC;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C,OAAO;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC34Fa;;AAEb,aAAa,mBAAO,CAAC,gEAAgB;;AAErC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjea;;AAEb,qBAAqB,mBAAO,CAAC,2EAAgB;AAC7C,gBAAgB,mBAAO,CAAC,sEAAmB;AAC3C,eAAe,mBAAO,CAAC,qFAAqB;AAC5C,YAAY,mBAAO,CAAC,8EAAuB;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;;AAEA;AACA,mCAAmC,mCAAmC;;AAEtE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACnpEa;;AAEb;AACA;AACA;;;;;;;;;;;ACJa;;AAEb,gBAAgB,mBAAO,CAAC,sEAAmB;AAC3C,YAAY,mBAAO,CAAC,8EAAuB;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9Ja;;AAEb,QAAQ,gBAAgB,EAAE,mBAAO,CAAC,gEAAgB;;AAElD;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA,CAAC;;AAED,sBAAsB,oBAAoB;AAC1C;;AAEA;AACA;AACA,CAAC;;AAED,0BAA0B;AAC1B;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA,uBAAuB;AACvB;;AAEA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,uBAAuB;AACvB;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;;AAEA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,mBAAmB;AACnB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA,uBAAuB;AACvB;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA,6BAA6B;AAC7B;AACA;;AAEA,+BAA+B;AAC/B;AACA;;AAEA,mCAAmC;AACnC;AACA;;AAEA,mCAAmC;AACnC;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,0BAA0B;AAC1B;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA,oCAAoC;AACpC;AACA;;;;;;;;;;;;AC5Na;;AAEb;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA,KAAK;AACL;;;;;;;;;;;;ACZa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;ACtCA;;AAEA;AACA;AACA,MAAM,IAA0F;AAChG;AACA;AACA,IAAI,KAAK,EAQN;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc;AACd;AACA;AACA,8BAA8B,IAAI;AAClC;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;ACtfD;AACA;AACA;AACA;AACA;;AAEY;;AAEZ;AACA,aAAa,6CAA6C;AAC1D;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,uCAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,KAAK;;AAEjC;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AC7Ia;;AAEb;AACA,YAAY,mBAAO,CAAC,kFAAO;;AAE3B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA,kDAAkD,OAAO;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC7EA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;AACjB,eAAe;;AAEf;AACA;AACA;;AAEA,cAAc;AACdnB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,iBAAiB,mBAAO,CAAC,oFAAU;;AAEnC,OAAO,YAAY;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;ACtQA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,sCAAI;;AAEpC;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,cAAc,kCAAkC;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACvQY;;AAEZ,cAAc,mBAAO,CAAC,4DAAe;;AAErC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AClCY;;AAEZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA,sBAAsB;AACtB;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,wBAAwB;AACxB,0BAA0B;AAC1B;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,wBAAwB;AACxB,0BAA0B;AAC1B;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,8BAA8B;AAC5D;AACA,kBAAkB,iBAAiB,gBAAgB;;AAEnD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,mCAAmC;AACnE;AACA,0BAA0B,IAAI,mCAAmC;AACjE,0BAA0B;AAC1B,8BAA8B,mCAAmC;AACjE;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI,mCAAmC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iCAAiC;AAC3D,+BAA+B,iCAAiC;AAChE,kCAAkC,8CAA8C;AAChF,gCAAgC,iDAAiD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2DAA2D;AAC5F;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C,iCAAiC,2BAA2B;AAC5D,yBAAyB,iDAAiD;AAC1E,qBAAqB,iDAAiD;AACtE,yBAAyB,iDAAiD;AAC1E;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iDAAiD;AACjD;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA,MAAM;;AAEN;AACA,MAAM;;AAEN;AACA;AACA,yCAAyC;AACzC;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,QAAQ,mCAAmC;AAC3C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,cAAc,oBAAoB,gBAAgB,oBAAoB,YAAY,oBAAoB,eAAe,oBAAoB,qBAAqB,oBAAoB,wBAAwB;;AAErO;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;AAClD,mDAAmD;AACnD,+CAA+C;AAC/C,kDAAkD;AAClD,wDAAwD;AACxD,2DAA2D;;AAE3D;AACA,uEAAuE;;AAEvE;AACA;AACA;;AAEA;AACA,kBAAkB,oBAAoB,OAAO;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;;AAEA;AACA,mCAAmC;AACnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA,MAAM;AACN;AACA,qBAAqB;AACrB;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA,mBAAmB;AACnB;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,MAAM,2DAA2D,iBAAiB;AAClF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,aAAa,iBAAiB;;AAE/C;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC,iBAAiB;;AAEjB,wBAAwB,cAAc,KAAK;AAC3C;AACA;AACA,iEAAiE;AACjE;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH;AAClH;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC;AACA;AACA,kEAAkE;AAClE,mCAAmC;AACnC;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU,OAAO;AACjB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA,wDAAwD;AACxD,SAAS,wCAAwC;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,MAAM;AACN,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA,oBAAoB,wDAAwD;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC,0FAA0F;AAC1F,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,oCAAoC;AACpC,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,IAAI,OAAO,YAAY,YAAY;AACnC;AACA;AACA;AACA,wCAAwC;AACxC;AACA,MAAM;AACN,8CAA8C,iBAAiB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM,uCAAuC,iBAAiB;AAC9D;AACA;;AAEA;AACA;AACA;AACA,MAAM,yCAAyC,qBAAqB;AACpE;;AAEA,mBAAmB;AACnB;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA,kBAAkB;AAClB,gCAAgC,iBAAiB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA,mDAAmD;AACnD,MAAM,OAAO;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,MAAM,OAAO;;AAEb;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mEAAmE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC,8CAA8C,iBAAiB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA,IAAI,mCAAmC;AACvC;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,WAAW;AACX;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA,qEAAqE;AACrE;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,qBAAqB;AACnE;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,sCAAsC;AACtC,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+CAA+C;AACvD;AACA;AACA;AACA;AACA,IAAI;AACJ,kCAAkC;AAClC;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,QAAQ;AACR,WAAW;AACX;AACA,IAAI;AACJ;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,sEAAsE;AACtE,oEAAoE;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;;AAEf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe;;AAEf;AACA;;AAEA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,yCAAyC;AACzC;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF,MAAM,OAAO;;AAEb;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,IAAI;AACJ,qBAAqB;AACrB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV,MAAM;AACN;AACA,UAAU;AACV;AACA,IAAI;AACJ,kCAAkC;AAClC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,UAAU;AACV;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,OAAO;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uCAAuC;AACvC,uCAAuC;AACvC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,iBAAiB;AAClD;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,MAAM,OAAO;;AAEb;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,yDAAyD;AACzD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,IAAI;AACJ,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,uCAAuC;AACvC;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C;AACA,mEAAmE;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA,yDAAyD,kCAAkC;AAC3F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,IAAI;;AAEtC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kDAAkD;;AAElD;AACA,gCAAgC;AAChC,uCAAuC;;AAEvC,6BAA6B;AAC7B,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,sEAAsE;AACtE;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA,0BAA0B,YAAY;AACtC,qBAAqB;AACrB;AACA;;AAEA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,oCAAoC;AACpC;AACA,qBAAqB;AACrB;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,0CAA0C;AAC1C;AACA,qBAAqB;AACrB,qEAAqE;AACrE;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;;AAEvB;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA,uCAAuC,kCAAkC;AACzE;AACA,yCAAyC,iCAAiC;AAC1E,wCAAwC,iCAAiC;AACzE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,8BAA8B;AAC9B;AACA,wBAAwB;AACxB,wCAAwC;AACxC,yCAAyC;AACzC;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,yCAAyC,6CAA6C;AACtF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,OAAO;AAC3D;;AAEA;AACA,yCAAyC;AACzC,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C,2BAA2B,wBAAwB;AACnD,yCAAyC,mBAAmB;AAC5D,WAAW;AACX,wBAAwB;AACxB;AACA;AACA;;AAEA,4CAA4C;AAC5C,uEAAuE;;AAEvE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,IAAI,wDAAwD;AAC5D;AACA;;AAEA;;AAEA;AACA;AACA,sEAAsE;AACtE;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,iEAAiE;AACjE,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,sCAAsC,cAAc;AACpD,qCAAqC;AACrC;AACA,qDAAqD;;AAErD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,KAAK;AACzB,wCAAwC;AACxC;AACA,iDAAiD;AACjD;AACA,2BAA2B;AAC3B,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,wBAAwB;AACxB,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,iFAAiF,WAAW;AAC5F;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,8BAA8B;AACvC;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sBAAsB;AAC5B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAE6T;;;;;;;;;;;;;;;;ACliK7T,WAAW,wBAAwxzGA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;;AAEyD;;AAEzD,WAAW,+CAA+C;AACnD,4BAA4B;AACnC;AACA;AACA;AACA;AACA;;AAEA,SAAS,kEAAoB;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA,aAAa,sBAAsB;AACnC,aAAa,+BAA+B;AAC5C;AACA,aAAa,mBAAmB;AAChC,aAAa,iBAAiB;AAC9B;AACA,cAAc,qDAAqD;AACnE;AACA,cAAc,+DAA+D,iBAAiB;AAC9F,aAAa,iCAAiC;AAC9C,aAAa,kCAAkC;AAC/C;;AAE2B;AACI;AACO;AACJ;AACgB;AAChB;AACI;AACI;AACE;AACM;AACV;AACA;AACT;AACG;;AAElC,YAAY,aAAa;AACzB;AACA,SAAS,gDAAO;AAChB,SAAS,sDAAa;AACtB,SAAS,uDAAc;AACvB,SAAS,0DAAiB;AAC1B;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,yCAAyC;AACpD;AACA;AACA,mBAAmB,wCAAK;AACxB,6BAA6B,8CAAM;;AAEnC;;AAEA,EAAE,iDAAI;;AAEN;AACA;;AAEA,+DAAe,QAAQ;;AAEvB;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,gDAAO;AACX,WAAW,oDAAW;AACtB,WAAW,kDAAS;AACpB,WAAW,0DAAiB;AAC5B,WAAW,sDAAY;AACvB;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,gDAAO;AACX,WAAW,oDAAW;AACtB,WAAW,mDAAS;AACpB,WAAW,sDAAY;AACvB;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,gDAAO,OAAO,qDAAW,MAAM,sDAAY;AAC/C;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB;AACA;AACA,aAAa,oBAAoB;AACjC;AACA,aAAa,oBAAoB;AACjC;AACA,aAAa,mBAAmB;AAChC;AACA,aAAa,gBAAgB;AAC7B;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,UAAU,SAAS,YAAY,SAAS;AACxC;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACXe;AACf;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA,aAAa,yCAAyC;AACtD,aAAa,sCAAsC;AACnD,aAAa,6CAA6C;AAC1D,aAAa,sCAAsC;AACnD,aAAa,gDAAgD;AAC7D,aAAa,sCAAsC;AACnD,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,iCAAiC;AAC9C,aAAa,yBAAyB;AACtC,aAAa,cAAc;AAC3B,aAAa,4BAA4B;AACzC,aAAa,uBAAuB;AACpC,aAAa,4BAA4B;AACzC,aAAa,sBAAsB;AACnC,aAAa,4BAA4B;AACzC,aAAa,0BAA0B;AACvC,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC,aAAa,uBAAuB;AACpC,aAAa,gCAAgC;AAC7C,aAAa,4BAA4B;AACzC,aAAa,sBAAsB;AACnC,aAAa,+BAA+B;AAC5C,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,sBAAsB;AACnC,aAAa,+BAA+B;AAC5C;AACA,aAAa,eAAe,qDAAqD;AACjF;;AAEA;AACA;AACA,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,cAAc,oBAAoB;AAClC,cAAc,mBAAmB;AACjC,cAAc,yEAAyE;AACvF;AACA,aAAa,uDAAuD;AACpE;AACA,aAAa,2BAA2B;AACxC,aAAa,8CAA8C;AAC3D,aAAa,wBAAwB;AACrC;AACA,aAAa,0DAA0D,6FAA6F;AACpK,aAAa,8BAA8B;AAC3C;AACA;AACA,aAAa,6FAA6F;AAC1G,aAAa,mFAAmF;AAChG;AACA;AACA;AACA,cAAc,wBAAwB;AACtC,cAAc,wCAAwC;AACtD,cAAc,wCAAwC;AACtD;AACA,cAAc,8CAA8C;AAC5D;AACA,cAAc,gCAAgC;AAC9C;AACA,cAAc,kCAAkC;AAChD;AACA,cAAc,4FAA4F;AAC1G;AACA,cAAc,qEAAqE;AACnF;AACA,cAAc,mCAAmC;AACjD;AACA,cAAc,qBAAqB;AACnC;AACA;AACA,cAAc,sDAAsD;AACpE,aAAa,oCAAoC;AACjD;;AAEuC;AACM;AACD;AACU;AACE;AACyC;AACxC;AACc;AACnB;AACQ;AACR;AAC0B;AACf;;AAE/D,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,yEAAW;AACnB,UAAU,6DAAK,2BAA2B,uEAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,8BAA8B;AAC9B,aAAa,qBAAqB;AAClaAAa,aAAa;AAC1B;;AAEA;;AAEA;AACA,aAAa,cAAc;AAC3B,eAAe;AACf;AACA;AACA,eAAe,MAAM;AACrB,gBAAgB;AAChB,eAAe,yBAAyB;AACxC;AACA,eAAe,8BAA8B;AAC7C;AACA,eAAe,eAAe;AAC9B;AACA,eAAe,wCAAwC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,6EAAiB;AACnD,kCAAkC,+EAAmB;AACrD;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU,+CAAM;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gDAAgD;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,cAAc;AAC3B,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA,eAAe,kBAAkB;AACjC;AACA,eAAe,kBAAkB;AACjC;AACA,e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AAO;AACpB;AACA,2BAA2B,WAAW,8BAA8B;AACpE,KAAK;AACL;AACA,aAAa,wBAAwB;AACrC;AACA,aAAa,aAAa;AAC1B;AACA,aAAa,SAAS;AACtB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,cAAc,qEAAS;AACvB,UAAU,qEAAS;AACnB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,aAAa,0BAA0B;AACvC;AACA,aAAa,4DAAI;;AAEjB;;AAEA;AACA,sCAAsC,qEAAS;AAC/C;AACA;;AAEA;;AAEA;AACA,qBAAqB,sEAAU;;AAE/B;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,mCAAmC;AAChD;AACA;AACA;;AAEA,aAAa,gCAAgC;AAC7C;AACA;AACA;;AAEA,aAAa,wBAAwB;AACrC;AACA,2BAA2B;AAC3B;;AAEA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA,IAAI,+CAAM;AACV;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA,IAAI,8CAAM;;AAEV;;AAEA,IAAI,+CAAM;AACV;AACA;AACA;AACA,IAAI,+CAAM;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,4EAAkB;AAC1B;AACA;AACA,+BAA+B,wFAA4B;AAC3D;AACA;AACA,MAAM,kBAAkB,8EAAkB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,kBAAkB;AAC/B;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA,IAAI,+CAAM;AACV,IAAI,+CAAM;AACV;;AAEA;;AAEA;;AAEA;AACA;;AAEA,aAAa,iBAAiB;AAC9B;AACA,IAAI,8CAAM;AACV,IAAI,+CAAM;;AAEV;AACA,IAAI,+CAAM;AACV;;AAEA,IAAI,+CAAM;;AAEV,IAAI,+CAAM;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,yBAAyB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,WAAW;AAC5B;AACA,iBAAiB,MAAM;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,mBAAmB;AACnB;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA,UAAU,8CAAM;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B,mBAAmB;AACnB;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA,QAAQ,8CAAM;AACd;AACA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA,QAAQ,8CAAM;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,8DAAM;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,4BAA4B;AACvC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;;AAEA;AACA,IAAI,8CAAM;AACV,IAAI,+CAAM;AACV;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA,MAAM;AACN;AACA,aAAa,gFAAoB;AACjC,kBAAkB,sEAAS;;AAE3B;AACA;;AAEA,aAAa,0EAAc;AAC3B,kBAAkB,sEAAS;;AAE3B;AACA;;AAEA,aAAa,wFAA4B;AACzC,kBAAkB,sEAAS,GAAG,sEAAS;;AAEvC;AACA;;AAEA,aAAa,+EAAmB;AAChC,+BAA+B,yEAAY,GAAG,sEAAS;;AAEvD;AACA;;AAEA,aAAa,8EAAkB;AAC/B;AACA,kBAAkB,yEAAY;;AAE9B;AACA;;AAEA;AACA,UAAU,8CAAM;AAChB;AACA;AACA;AACA;;AAEA,sBAAsB,+EAAmB;AACzC;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7oBA;AACA,aAAa,iDAAiD;AAC9D,aAAa,4CAA4C;AACzD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEuC;AACa;AACO;AACP;AACQ;AACR;;AAEpD,WAAW,kBAAkB;AACtB,iBAAiB;;AAExB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM;AACV,eAAe,qEAAS,IAAI,4EAAkB;AAC9C;AACA;;AAEA,iBAAiB,qEAAS;AAC1B;AACA;AACA;;AAEA,kBAAkB,4EAAgB;AAClC;AACA,iBAAiB,4EAAgB;AACjC,WAAW,qEAAY,wBAAwB,4EAAgB;AAC/D;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM;AACV,eAAe,qEAAS,KAAK,4EAAkB;AAC/C;AACA;AACA,kBAAkB,2EAAe;AACjC;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,gCAAgC,2EAAe;AAC/C,mBAAmB,yFAAyB;AAC5C;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,qEAAS;AAC1B,mBAAmB,2EAAe;AAClC,mBAAmB,2EAAe;AAClC;AACA;AACA;;AAEA,QAAQ,4EAAkB;AAC1B;AACA,mBAAmB,2EAAe;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA,aAAa,iDAAiD;AAC9D,aAAa,4CAA4C;AACzD,aAAa,0CAA0C;AACvD,aAAa,gDAAgD;AAC7D,aAAa,0CAA0C;AACvD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEA;AACA,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC;;AAEuC;AACa;AACO;AACP;AACQ;AACR;AACP;;AAE7C,WAAW,kBAAkB;AACtB,kBAAkB;;AAEzB,WAAW,WAAW;AACtB,4BAA4B;;AAE5B,WAAW,aAAa;AACxB;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA,aAAa,2BAA2B;AACxC;AACA,aAAa,iBAAiB;AAC9B;AACA,aAAa,QAAQ;AACrB;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,2EAAe;AAClE;AACA;AACA;AACA;AACA;;AAEA,MAAM,8CAAM;;AAEZ;;AAEA;AACA;;AAEA;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA,MAAM,8DAAM;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA,IAAI,+CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,qEAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,2EAAe;AACjC,mBAAmB,yFAAyB;AAC5C;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,qEAAS;AAC1B,gCAAgC,2EAAe;AAC/C;AACA;AACA;AACA;;AAEA,QAAQ,4EAAkB;AAC1B;AACA,gCAAgC,2EAAe;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA,iBAAiB,iBAAiB;AAClC;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,2EAAe;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,8CAAM;;AAEZ;;AAEA;AACA;;AAEA;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA,MAAM,8DAAM;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+CAAM;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA,IAAI,+CAAM;AACV,qBAAqB,qEAAS;AAC9B;AACA;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA,SAAS,qEAAY;AACrB;AACA;AACA,IAAI,4EAAgB;AACpB;AACA;AACA,QAAQ,iFAAiB;AACzB;AACA;;;;;;;;;;;;;;;;;;;;;;;ACraA;AACA,aAAa,iDAAiD;AAC9D,aAAa,4CAA4C;AACzD,aAAa,sCAAsC;AACnD;;AAEuC;AACqB;AACR;AACO;AACP;AACA;;AAEpD,WAAW,kBAAkB;AACtB,cAAc;;AAErB,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA,IAAI,gEAAS;AACb;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAY;AAClB;AACA;AACA;AACA;AACA,0BAA0B,8DAAO;AACjC;AACA,QAAQ,4EAAgB;AACxB;AACA;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM;AACV,eAAe,qEAAS,IAAI,4EAAkB;AAC9C;AACA;;AAEA,iBAAiB,qEAAS;AAC1B;AACA;AACA;;AAEA,kBAAkB,iFAAqB;AACvC;AACA,iBAAiB,iFAAqB;AACtC;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM;AACV,eAAe,qEAAS,IAAI,4EAAkB;AAC9C;AACA;;AAEA,iBAAiB,qEAAS;AAC1B;AACA;AACA;;AAEA,kBAAkB,4EAAgB;AAClC;AACA,iBAAiB,4EAAgB;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA,aAAa,yCAAyC;AACtD,aAAa,4CAA4C;AACzD,aAAa,0CAA0C;AACvD,aAAa,iDAAiD;AAC9D,aAAa,sCAAsC;AACnD,aAAa,qCAAqC;AAClD;;AAEoD;AACQ;AACR;;AAE7C,kBAAkB;AAClB;AACA;;AAEP;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,mBAAmB,qEAAS;AAC5B;AACA;AACA;;AAEA,oBAAoB,sEAAU;AAC9B;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA,qBAAqB,sEAAU;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA,mBAAmB,qEAAS;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;;AAEA,aAAa,UAAU;AACvB;AACA;AACA,eAAe,kBAAkB;AACjC;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,sEAAU;AACjE;AACA;AACA;AACA,QAAQ,qDAAqD,sEAAU;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,4EAAgB;AACvD,yCAAyC,sEAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA;;AAEA;AACA;;AAEA,uDAAuD,uEAAW;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,+EAAmB;AAC9C;AACA;AACA,UAAU,mBAAmB,8EAAkB;AAC/C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gGAAgC;AACnD,gBAAgB,4EAAgB;AAChC,gBAAgB,mFAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,+BAA+B;AAC/B;;AAEA,mCAAmC;;AAEnC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChOA;AACA,aAAa,iDAAiD;AAC9D,aAAa,wDA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AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,WAAW,YAAY;AACvB,WAAW,UAAU;AACrB;AACO;AACP,aAAa,SAAS;AACtB;;AAEA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA,eAAe,KAAK;AACpB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5JA;AACA,aAAa,sBAAsB;AACnC,aAAa,iCAAiC;AAC9C,aAAa,4BAA4B;AACzC,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,4BAA4B;AACzC,aAAa,0BAA0B;AACvC,aAAa,qBAAqB;AAClC,aAAa,uBAAuB;AACpC,aAAa,0BAA0B;AACvC,aAAa,8BAA8B;AAC3C;AACA;AACA,cAAc,MAAM;AACpB,cAAc,OAAO;AACrB;;AAEyB;AACO;AACL;AACU;AACR;AACF;;AAE3B;AACO;;AAEP,cAAc;;AAEd;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,8CAAM;AAC7B,aAAa,wBAAwB;AACrC;AACA,aAAa,yBAAyB;AACtC;AACA,aAAa,mBAAmB;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,mCAAM,SAAS;;AAEpC;AACA;;AAEA;AACA,aAAa,gCAAgC;AAC7C,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,0BAA0B;AACvC,aAAa,YAAY;AACzB,eAAe;AACf;AACA;AACA,eAAe,mCAAmC;AAClD;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,iEAAiE;AACjE;;AAEA;;AAEA;AACA,eAAe,mCAAmC;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C;AACA;;AAEA;AACA,eAAe,8BAA8B;AAC7C,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,YAAY;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,wDAAU,cAAc,wDAAU;AAC9C,kBAAkB,mCAAM;AACxB;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,6BAA6B;AAC1C,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,6BAA6B;AAC5C,eAAe,wBAAwB;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B,iBAAiB,MAAM;AACvB,iBAAiB,OAAO;AACxB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,sBAAsB;AACnC;AACA,eAAe,gBAAgB;AAC/B;AACA,eAAe,mBAAmB;AAClC;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,eAAe,YAAY;AAC3B,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA,MAAM,2CAAI;AACV;AACA;AACA;AACA;;AAEA;AACA,aAAa,iBAAiB;AAC9B,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,eAAe,8BAA8B;AAC7C,eAAe,wCAAwC;AACvD,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,qBAAqB,SAAS;AAC9B;;AAEA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,iBAAiB,sBAAsB;AACvC,iBAAiB,iBAAiB;AAClC,mBAAmB;AACnB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,0BAA0B;AACvC;AACA,eAAe,mBAAmB;AAClC;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,eAAe,sBAAsB;AACrC,iBAAiB;AACjB;AACA;AACA;AACA,MAAM,2CAAI;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC,aAAa;AACb;AACA;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA,OAAO,wDAAU;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA,8CAA8C,wCAAK;AACnD;;AAEA;AACA,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA,sCAAsC,sCAAQ;AAC9C;;;;;;;;;;;;;;;;ACtlBA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC,aAAa,kCAAkC;AAC/C,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC;AACA,aAAa,8FAA8F;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B,cAAc,eAAe;AAC7B,cAAc,kBAAkB;AAChC,cAAc,yBAAyB;AACvC,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,cAAc,wBAAwB,oBAAoB;AAC1D;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,wEAAwE;AACrF;;AAE8B;AACY;AACT;AACA;AACW;;AAE5C;AACA,KAAK,0BAA0B;AAC/B;AACA;;AAEO;AACP;AACA;AACA;AACA,0DAA0D,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA,eAAe,cAAc;AAC7B;;AAEA;AACA;AACA,MAAM,sCAAsC,sCAAM;AAClD;AACA,iBAAiB;AACjB,MAAM,SAAS,iDAAK;AACpB,iBAAiB;AACjB,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA,eAAe,iDAAQ;;AAEvB;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA,QAAQ,iDAAK;AACb,aAAa,qDAAS;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,qDAAY;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,sDAAa;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,qDAAY;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,kDAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAa;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,wBAAwB,uDAAY;;AAEpC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,4BAA4B,iDAAQ;AACpC;AACA,4DAA4D,iDAAQ;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,cAAc;;AAErB;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACzYA;AACA;AACA;AACO,cAAc;;AAErB;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;;AAEwC;;AAExC;;AAEA;AACA,WAAW,YAAY;AACvB;AACO;AACP;AACA;AACA,IAAI,UAAU,wDAAK;AACnB,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEwC;;;;;;;;;;;;;;;;ACrExC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB,cAAc,cAAc;AAC5B,cAAc,cAAc;AAC5B;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCA;AACA;AACA;;AAEA;AACA,aAAa,yBAAyB;AACtC,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;;AAEA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,YAAY;AACZ;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB;AACA,YAAY;AACZ;AACA;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClQA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,kBAAkB;AAC7B,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChjvDA;;AAEA;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA,qDAAqD;AACrD;AACA;AACA;AACA,mDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG;;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;;;AAGN;AACA,+CAA+C,4BAA4B;AAC3E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;;AAGA;AACA;AACA;AACA,UAAU;AACV,8BAA8B;;AAE9B;AACA;AACA;;AAEA,oFAAoF;;AAEpF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;;AAEA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS,6BAA6B;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA,MAAM;AACN;AACA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gDAAgD,eAAe;;AAE/D,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mDAAmD;;AAEnD;AACA;AACA,IAAI;;;AAGJ,kBAAkB,6BAA6B;AAC/C;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B,EAAE;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yCAAyC,SAAS;;AAElD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,gBAAgB;AAChC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB,uBAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA,6BAA6B;;AAE7B;AACA;AACA,QAAQ;;;AAGR;;AAEA;AACA;AACA;;AAEA;AACA,MAAM;AACN;;;AAGA;AACA,4BAA4B;;AAE5B;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;;;AAGN;AACA;AACA;;AAEA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;;;AAGJ,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;;AAEA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;;AAGA;AACA,IAAI;;;AAGJ;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;;AAEA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,GAAG;;AAEN;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;;;AAGR;AACA;AACA,OAAO,KAAK;;;AAGZ;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,uBAAuB;AACzC,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oCAAoC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAM;AACN;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;;AAE1C;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,kBAAkB,WAAW;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,oBAAoB;AACtC;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAkB,oBAAoB;AACtC;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B,2BAA2B;AAC3B,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;;AAE6R;;;;;;;;;;;;;;;;;;;AChhDlO;;AAE3D;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACO;AACP,SAAS,iDAAY;AACrB;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACO;AACP;AACA,SAAS,iDAAY,eAAe,gDAAW;AAC/C;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACrCA;AACO;AACA;;;;;;;;;;;;;;;;ACFP;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA,aAAa,2BAA2B;AACxC,aAAa,sBAAsB;AACnC,aAAa,sBAAsB;AACnC;AACA,aAAa,oBAAoB;AACjC,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa,0DAA0D;AACvE;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,cAAc;AACzB,aAAa;AACb;;AAEA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;;AAEgC;;AAEhC,YAAY;;AAEZ;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,kBAAkB;AAC7B;AACO;AACP,aAAa,SAAS;AACtB;AACA,aAAa,SAAS;AACtB;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,aAAa,cAAc;AAC3B;AACA;AACA;AACA,qCAAqC,gDAAK;AAC1C;;AAEA;;AAEA;AACA,iBAAiB,aAAa;AAC9B;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,cAAc;AAC/B;AACA,iBAAiB,aAAa;AAC9B;AACA,iBAAiB,SAAS;AAC1B;AACA,iBAAiB,SAAS;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,8CAA8C;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9KA;AAC8B;;AAEvB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,+BAA+B;AAC7C,WAAW,OAAO;AAClB;AACO;AACP,aAAa,QAAQ;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA,aAAa,YAAY;AACzB;AACA,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB,4BAA4B,mCAAS;AACrC;AACA;AACA;;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,0BAA0B,2FAA2F;AAClI,aAAa,0DAA0D;AACvE;;AAEmD;;AAEnD;AACA;AACA,UAAU;AACV;AACA;AACO,iBAAiB,oEAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA,aAAa,uBAAuB;AACpC,aAAa,uCAAuC;AACpD,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC,aAAa,uBAAuB;AACpC,aAAa,wBAAwB;AACrC,aAAa,qBAAqB;AAClC,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,wBAAwB;AACrC,aAAa,4BAA4B;AACzC,aAAa,6BAA6B;AAC1C,aAAa,YAAY;AACzB,aAAa,2BAA2B;AACxC,aAAa,+BAA+B;AAC5C,aAAa,8BAA8B;AAC3C,aAAa,2BAA2B;AACxC,aAAa,0BAA0B;AACvC,aAAa,kCAAkC;AAC/C,aAAa,2BAA2B;AACxC,aAAa,4BAA4B;AACzC,aAAa,uBAAuB;AACpC;AACA,aAAa,cAAc;AAC3B;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,iBAAiB;AAC/B,cAAc,mBAAmB;AACjC,cAAc,SAAS;AACvB;;AAE+B;AACqB;AACb;AACK;;AAE5C,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,eAAe;AAC1B;AACO,qCAAqC;AAC5C,aAAa,SAAS;AACtB;AACA,aAAa,iBAAiB;AAC9B;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,qDAAG,GAAG,sDAAI;AACnD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,yBAAyB;AACtC;;AAEA;AACA;AACA,sCAAsC,6DAAiB,GAAG,qDAAG,GAAG,sDAAI;AACpE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,gBAAgB;AAC3B,aAAa;AACb;AACA;AACA;AACA,aAAa,eAAe;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW,YAAY;AACvB,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA,gBAAgB,wDAAQ;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV,WAAW,WAAW;AACtB,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA,0CAA0C,yCAAC,GAAG,yCAAC;AAC/C;AACA,aAAa,yBAAyB;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,MAAM;AACrB;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;;AAEA;AACA,iBAAiB,gCAAgC;AACjD;AACA,iBAAiB,QAAQ;AACzB;;AAEA;AACA;AACA,gBAAgB,0DAAI;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,YAAY;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yBAAyB,YAAY;AACrC;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnVA,YAAY;;AAEZ;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACzBA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,aAAa,kFAAkF;AAC/F;;AAEA;AACA,cAAc,SAAS;AACvB,aAAa,oGAAoG;AACjH;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB,2DAA2D,0BAA0B;AACrF;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,sCAAsC;AACjD,aAAa;AACb;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,SAAS;AACtB,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrPA;AACA,aAAa,2BAA2B;AACxC,aAAa,wBAAwB;AACrC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY;AACZ,2IAA2I;AAC3I;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,QAAQ;AACzB;AACA,iBAAiB,kBAAkB;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxEmD;AACD;AACP;AACO;;AAElD,YAAY,oEAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,oEAAc;;AAEzB;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,IAAI,4DAAQ;AACZ,IAAI,sDAAU;AACd,mBAAmB,mEAAW;AAC9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AACA,aAAa,uBAAuB;AACpC;AACA,aAAa,sBAAsB;AACnC,aAAa,2BAA2B;AACxC,aAAa,4BAA4B;AACzC,aAAa,wBAAwB;AACrC,aAAa,yBAAyB;AACtC,aAAa,iCAAiC;AAC9C,aAAa,wBAAwB;AACrC;AACA,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,wBAAwB;AACrC,aAAa,+BAA+B;AAC5C,aAAa,sBAAsB;AACnC,aAAa,2CAA2C;AACxD;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,aAAa,0BAA0B;AACvC;;AAE2C;AACQ;AACR;AACC;AACG;AACU;AACX;AACP;;AAEvC,eAAe,oEAAc;AAC7B,eAAe,oEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAc;;AAE/B,sBAAsB,oEAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,OAAO;AAClB,WAAW,kCAAkC;AAC7C,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,+DAAU,gBAAgB,+DAAU;AAC3C;AACA;;AAEA;AACA,cAAc,wDAAQ;AACtB;AACA,aAAa,gBAAgB;AAC7B;;AAEA;;AAEA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,sBAAsB;AACnC,eAAe;AACf;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,yCAAyC;AACtD;AACA;AACA,eAAe,kCAAkC;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;;AAEA;AACA;;AAEA,mBAAmB,4DAAQ;AAC3B;;AAEA,wBAAwB,4DAAQ,YAAY,gEAAU;AACtD;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,eAAe;AACf;AACA;AACA,eAAe,kCAAkC;AACjD;AACA,eAAe,mBAAmB;AAClC;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR,6CAA6C,6DAAQ;AACrD;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,6CAA6C,+DAAU;AACvD;AACA;;AAEA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,eAAe;AACf;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC,aAAa,GAAG;AAChB,aAAa,sBAAsB;AACnC,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,yDAAa;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,+BAA+B;AAC5C;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB,aAAa;AACb;AACA;AACA;AACA,aAAa,UAAU;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACxEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChBA;AACA,aAAa,qBAAqB;AAClC,aAAa,wBAAwB;AACrC,aAAa,2BAA2B;AACxC,aAAa,0BAA0B;AACvC,aAAa,YAAY;AACzB,aAAa,qCAAqC;AAClD,aAAa,uCAAuC;AACpD;AACA,aAAa,cAAc;AAC3B,aAAa,eAAe;AAC5B,aAAa,8BAA8B;AAC3C,aAAa,sCAAsC;AACnD,aAAa,uBAAuB;AACpC,aAAa,6BAA6B;AAC1C,cAAc,4CAA4C;AAC1D;AACA,aAAa,8BAA8B;AAC3C,aAAa,8BAA8B;AAC3C,aAAa,kCAAkC;AAC/C;;AAEoD;AACE;AACA;AACA;;AAEtD;;AAEA,cAAc;;AAEd;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,gBAAgB;AAC3B;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,oBAAoB;AACrC,iBAAiB,UAAU;AAC3B,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;AACV,iBAAiB,uEAAa;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,oBAAoB;AAC/B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,YAAY;AACvB,WAAW,QAAQ;AACnB,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA,eAAe,0DAAI;AACnB;AACA,aAAa,gBAAgB;AAC7B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAM;AACrB,MAAM;AACN,eAAe,6DAAM;AACrB,MAAM;AACN,eAAe,6DAAM,CAAC,6DAAM;AAC5B,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA;AACA,eAAe,uBAAuB;AACtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,gBAAgB,mCAAmC;AACnD,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,+DAAS,YAAY,+DAAS;AACrD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA,WAAW,gBAAgB;AAC3B,aAAa;AACb;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC9RA;AACA,aAAa,4BAA4B;AACzC,aAAa,iCAAiC;AAC9C;AACA,aAAa,iCAAiC;AAC9C,aAAa,6CAA6C;AAC1D,aAAa,2CAA2C;AACxD,aAAa,kDAAkD;AAC/D;;AAEyC;AACX;;AAEvB,UAAU,8CAAI,CAAC,sDAAI;;;;;;;;;;;;;;;;ACbnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,4BAA4B;AACzC,aAAa,iCAAiC;AAC9C;AACA,aAAa,iCAAiC;AAC9C,aAAa,6CAA6C;AAC1D,aAAa,2CAA2C;AACxD,aAAa,kDAAkD;AAC/D;;AAEwC;AACV;AAC4C;;AAEnE,UAAU,8CAAI,CAAC,qDAAG,OAAO,sFAAwB;;;;;;;;;;;;;;;;ACdjnKA;AACA;AACA;AACA,cAAc,0CAA0C;AACxD;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD;AACA,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACO,0CAA0C;AACjD;AACA;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,sBAAsB;AACnC;AACA,aAAa,sBAAsB;AACnC;AACA,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA,eAAe,eAAe;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,eAAe;AAC5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,eAAe;AAC5B;;AAEA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3XA;AACA,aAAa,uBAAuB;AACpC,aAAa,sBAAsB;AACnC,aAAa,yBAAyB;AACtC,aAAa,sBAAsB;AACnC,aAAa,uDAAuD;AACpE,aAAa,uDAAuD;AACpE,aAAa,cAAc;AAC3B,aAAa,uCAAuC;AACpD;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,uBAAuB;AACrC,cAAc,0DAA0D;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iCAAiC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,aAAa,kBAAkB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA,cAAc,MAAM;AACpB;AACA,aAAa,sBAAsB;AACnC,aAAa,yBAAyB;AACtC,aAAa,iCAAiC;AAC9C,aAAa,sBAAsB;AACnC,aAAa,cAAc;AAC3B,aAAa,uCAAuC;AACpD;AACA,aAAa,yCAAyC;AACtD,aAAa,kDAAkD;AAC/D;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,aAAa,eAAe;AAC5B,aAAa,wBAAwB;AACrC;AACA,aAAa,iBAAiB;AAC9B,aAAa,0BAA0B;AACvC,aAAa,6BAA6B;AAC1C;AACA,aAAa,2BAA2B;AACxC,aAAa,cAAc;AAC3B;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;;AAEyC;AACY;AAChB;;AAErC,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,8CAA8C;AAC7D,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA,iBAAiB,yCAAyC;AAC1D;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,sDAAO;AAC7B;AACA;;AAEA;AACA,QAAQ,sEAAY;AACpB;;AAEA;;AAEA,iBAAiB,kDAAkD;AACnE;AACA;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA,oCAAoC,QAAQ;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,QAAQ;AACzB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA,wCAAwC,qBAAqB;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA,wBAAwB,6CAA6C;AACrE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,WAAW,yCAAyC;AACpD,aAAa;AACb;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA,+CAA+C,gEAAM;AACrD;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpPe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;;;;;;;;;;;;;;;;ACVA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC;AACA,aAAa,wFAAwF;AACrG;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,yCAAyC;AACpD,aAAa;AACb;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1PA;AACA,aAAa,yBAAyB;AACtC,aAAa,8CAA8C;AAC3D,aAAa,2CAA2C;AACxD,aAAa,uDAAuD;AACpE,aAAa,sDAAsD;AACnE,aAAa,+DAA+D;AAC5E;AACA,aAAa,8DAA8D;AAC3E,aAAa,6DAA6D;AAC1E,aAAa,2DAA2D;AACxE;;AAEkE;;AAElE;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP,mBAAmB,mFAAO;AAC1B,aAAa,gCAAgC;AAC7C;AACA,aAAa,+BAA+B;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa,oBAAoB;AACjC;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;;AAEA,WAAW,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AACE;;AAE9D;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA,OAAO,oEAAoE;AAC3E;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA,sBAAsB,wFAAmB;AACzC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA,gBAAgB,qDAAqD;AACrE;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA,sBAAsB,wFAAmB;AACzC;AACA;AACA;;AAEA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA,cAAc,gEAAgE;AAC9E,eAAe;AACf;;AAEA;AACA,YAAY;AACZ,aAAa,mBAAmB;AAChC;AACA;AACA,oBAAoB,+EAAK;AACzB;AACA;AACA;AACA;AACA,MAAM,6EAAI,UAAU,2FAAW;AAC/B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,kBAAkB;AAC/B;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,oBAAoB;AACjC;AACA;AACA,oBAAoB,+EAAK;AACzB;AACA;AACA;AACA;AACA,MAAM,6EAAI,UAAU,2FAAW;AAC/B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4FAAW,CAAC,gGAAa;AAC/B;AACA;;AAEA;;AAEA,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1KA;AACA,aAAa,6BAA6B;AAC1C;;AAEyD;;AAEzD;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA;;AAEA,SAAS,0EAAY;AACrB;;;;;;;;;;;;;;;;;AC3BA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,4BAA4B;AACzC,aAAa,+BAA+B;AAC5C,aAAa,mCAAmC;AAChD;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,kBAAkB,gDAAK;AACvB,aAAa,eAAe;AAC5B;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AChFA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,aAAa;AACb;AACO;AACP,aAAa,eAAe;AAC5B;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,8BAA8B;AAC3C;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACxBA;AACA,aAAa,8BAA8B;AAC3C;;AAEA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,WAAW,uBAAuB;AAClC,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,+BAA+B;AAC5C,aAAa,mCAAmC;AAChD;;AAEmD;AACC;;AAEpD;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,eAAe,yBAAyB;AACnD,aAAa;AACb;AACO;AACP;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,gBAAgB,gCAAgC,GAAG;AAChE;AACA;;AAEA;AACA;;AAEA,SAAS,oEAAc;AACvB;AACA;;AAEA,uBAAuB,mEAAc;AACrC,eAAe,sBAAsB;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,sCAAsC;AACtC,aAAa,eAAe;AAC5B;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;AC7JA;AACA,aAAa,uBAAuB;AACpC,aAAa,mCAAmC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,MAAM,aAAa;AAC/B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,wBAAwB;AACrC,aAAa,8CAA8C;AAC3D,aAAa,2CAA2C;AACxD,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD;;AAEuF;AACzB;;AAE9D,WAAW,uBAAuB;AAC3B;AACP;AACA,UAAU,kCAAkC;AAC5C,SAAS;AACT;;AAEA,WAAW,qBAAqB;AACzB;AACP,YAAY,wCAAwC;AACpD,aAAa;AACb;;AAEA;;AAEA,WAAW,oBAAoB;AAC/B;AACA,cAAc,6BAA6B;AAC3C;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;;AAEA;AACA,UAAU;AACV,WAAW,QAAQ;AACnB;AACA;AACA,kBAAkB,+EAAK;AACvB;AACA;AACA,WAAW,wGAAiB;AAC5B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,WAAW,kBAAkB;AAC7B;AACA;AACA;;;;;;;;;;;;;;;;;ACzDA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,mCAAmC;AAChD,aAAa,+BAA+B;AAC5C;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;;AAErB;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtFA;AACA,aAAa,uBAAuB;AACpC,aAAa,mCAAmC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,MAAM,aAAa;AAC/B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,2BAA2B;AACxC,aAAa,uBAAuB;AACpC,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,4BAA4B;AACzC,aAAa,+CAA+C;AAC5D,aAAa,8CAA8C;AAC3D,aAAa,2CAA2C;AACxD,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,0CAA0C;AACvD,aAAa,8CAA8C;AAC3D;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,sCAAsC;AACpD;;AAEuF;AACZ;AAC/B;;AAE5C,WAAW,uBAAuB;AAC3B;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA,aAAa,uCAAuC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA,cAAc,+BAA+B;AAC7C;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA,cAAc,gCAAgC;AAC9C;;AAEA;AACA;AACA,WAAW,oBAAoB;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,YAAY;AACtC;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,0CAA0C;AACjD,OAAO,0CAA0C;AACjD;AACA;AACA,OAAO,gDAAgD;AACvD;AACA,OAAO,yCAAyC;AAChD;AACA;AACA,OAAO,0CAA0C;AACjD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,kBAAkB,wGAAiB;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,aAAa,sBAAsB;AACnC,aAAa,eAAe;AAC5B;AACA;AACA,WAAW,6DAAa;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,mBAAmB;AAChC,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,aAAa,UAAU;AACvB,aAAa,mBAAmB;AAChC,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,YAAY;AACzB;AACA;AACA,gBAAgB,4FAAU;;AAE1B;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACzQA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C;;AAEyD;;AAEzD;;AAEA;AACA,UAAU;AACV,WAAW,YAAY;AACvB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAc;AACrC,eAAe,sBAAsB;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3EA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,mCAAmC;AAChD,aAAa,+BAA+B;AAC5C;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;;AAErB;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtFA;AACA,aAAa,8BAA8B;AAC3C;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACxBA;AACA,aAAa,uBAAuB;AACpC,aAAa,mCAAmC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,MAAM,aAAa;AAC/B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,+EAA+E;AAC5F,aAAa,0BAA0B;AACvC,aAAa,2BAA2B;AACxC,aAAa,8BAA8B;AAC3C,aAAa,8CAA8C;AAC3D,aAAa,2CAA2C;AACxD,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD;;AAEuE;AACT;;AAE9D,WAAW,uBAAuB;AAC3B;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,qBAAqB;AACzB;AACP,YAAY,8CAA8C;AAC1D,aAAa;AACb;;AAEA,WAAW,oBAAoB;AAC/B;AACA,0BAA0B,UAAU;AACpC;AACA;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA,4BAA4B,QAAQ;AACpC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,aAAa,qBAAqB;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+EAAK;;AAEvB;AACA;AACA;;AAEA,cAAc,wFAAQ;AACtB;AACA;AACA,GAAG;;AAEH;AACA,qDAAqD,IAAI;AACzD;;AAEA;;AAEA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnHA;AACA,aAAa,0BAA0B;AACvC,aAAa,sBAAsB;AACnC,aAAa,uCAAuC;AACpD,aAAa,+BAA+B;AAC5C,aAAa,8BAA8B;AAC3C;;AAEmD;AACkB;AACd;AACJ;AACb;;AAEtC;AACA,UAAU;AACV,WAAW,UAAU;AACrB;AACO;AACP,yBAAyB,oFAAmB;AAC5C,wCAAwC,kEAAW;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,qDAAK;AACvB;AACA;AACA;AACA,gBAAgB,kEAAW;AAC3B,IAAI,sEAAa;AACjB;AACA;AACA;;AAEA;;AAEA,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AChEA;AACA,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACrBA;AACA,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC3BA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,4BAA4B;AACzC,aAAa,+BAA+B;AAC5C,aAAa,mCAAmC;AAChD;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,kBAAkB,gDAAK;AACvB,aAAa,eAAe;AAC5B;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AChFA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,aAAa;AACb;AACO;AACP,aAAa,eAAe;AAC5B;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,uBAAuB;AACpC,aAAa,mCAAmC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,MAAM,aAAa;AAC/B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,8CAA8C;AAC3D,aAAa,0CAA0C;AACvD;AACA,aAAa,wCAAwC;AACrD;;AAKwC;AAIR;AAIK;AACwC;AAIvC;;AAEtC;AACA,aAAa;AACb;AACO;AACP;AACA,IAAI,2FAA8B;AAClC,IAAI,gFAAuB;AAC3B,IAAI,sFAA4B;AAChC,IAAI,sEAAoB;AACxB,IAAI,sFAA2B;AAC/B;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;AACA;AAC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AACA;AACA;;AAEA,WAAW,aAAa;AACxB;AACA,yBAAyB,KAAK;AAC9B,YAAY,uDAAY;AACxB;AACA;AACA;AACA;AACA;AACA,MAAM,gFAAiB;AACvB;AACA;AACA;AACA,MAAM,gFAAiB;AACvB;AACA,KAAK,2BAA2B;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV,WAAW,qCAAqC;AAChD;AACA;AACA;AACA;AACA;AACA,gBAAgB,0FAAU;AAC1B;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,gCAAgC;AACnD,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA,kBAAkB,0EAAsB,mBAAmB,gBAAgB;AAC3E;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gGAAa;AACrC,UAAU,wGAAiB,iBAAiB,wBAAwB;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,SAAS,4FAAW;;AAEpB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACldA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACf8C;AACV;;AAEpC;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;AACO;AACP,SAAS,+DAAc,eAAe,qDAAS;AAC/C;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;AACO;AACP;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChBA;AACA,aAAa,+BAA+B;AAC5C,aAAa,+BAA+B;AAC5C;;AAEA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACrBA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,4BAA4B;AACzC,aAAa,+BAA+B;AAC5C,aAAa,mCAAmC;AAChD;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,kBAAkB,gDAAK;AACvB,aAAa,eAAe;AAC5B;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AChFA;AACA,aAAa,4BAA4B;AACzC,aAAa,8BAA8B;AAC3C,aAAa,mCAAmC;AAChD,aAAa,+BAA+B;AAC5C;;AAEgC;;AAEhC;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACO;AACP;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;;AAErB;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gDAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;ACtFA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa;AACb;;AAEA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,aAAa;AACb;AACO;AACP,aAAa,eAAe;AAC5B;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,uBAAuB;AACpC,aAAa,mCAAmC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,MAAM,aAAa;AAC/B;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,uBAAuB;AACpC,aAAa,0BAA0B;AACvC;;AAEiE;AACI;AACjC;AACQ;AACM;AAC4B;;AAE9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,+BAA+B,WAAW;AACrD;AACO,0CAA0C;AACjD;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA,aAAa,oBAAoB;AACjC;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,kBAAkB;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAgB;AAC5B;AACA,YAAY,iDAAS;AACrB,YAAY,yDAAa;;AAEzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gCAAgC,uFAAgC;AAChE;AACA;AACA,+BAA+B,+FAA6B;AAC5D;AACA;;AAEA,yDAAyD;;AAEzD;AACA;;AAEA;AACA,6BAA6B,+FAA6B;;AAE1D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS,mEAAgB;AACzC;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,0BAA0B,kFAAyB;AAC7D;AACA;AACA;AACA,sBAAsB,kFAAyB;AAC/C,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,iBAAiB;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnZA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1JA;AACA,aAAa,8CAA8C;AAC3D,aAAa,0CAA0C;AACvD,aAAa,uDAAuD;AACpE,aAAa,uDAAuD;AACpE,aAAa,6DAA6D;AAC1E,aAAa,8CAA8C;AAC3D,aAAa,wDAAwD;AACrE,aAAa,gDAAgD;AAC7D,aAAa,gDAAgD;AAC7D,aAAa,yCAAyC;AACtD;;AAKkC;AACqC;AACM;;AAE7E,WAAW,yBAAyB;AAC7B;AACP,EAAE,gFAAyB;AAC3B,EAAE,kEAAkB;AACpB,EAAE,sEAAoB;AACtB;;AAEA,WAAW,qBAAqB;AACzB;AACP,eAAe,8EAAuB,EAAE,gEAAgB,EAAE,oEAAkB;AAC5E;;;;;;;;;;;;;;;;;AC9BA;AACA,aAAa,8CAA8C;AAC3D,aAAa,2CAA2C;AACxD,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,8BAA8B;AAC3C,aAAa,oCAAoC;AACjD;AACA,aAAa,UAAU;AACvB;;AAEA,WAAW,uBAAuB;AAC3B;AACP,UAAU,wBAAwB;AAClC,SAAS;AACT;;AAEA,WAAW,qBAAqB;AACzB,4BAA4B,WAAW;;AAE9C,WAAW,oBAAoB;AAC/B;AACA,cAAc,4BAA4B;AAC1C;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA,0BAA0B,UAAU;AACpC,aAAa,mBAAmB;AAChC;AACA;;AAEA;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV,WAAW,UAAU;AACrB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrDA;AACA,aAAa,uBAAuB;AACpC;AACA,aAAa,sBAAsB;AACnC,aAAa,yBAAyB;AACtC,aAAa,iCAAiC;AAC9C,aAAa,4BAA4B;AACzC,aAAa,wBAAwB;AACrC,aAAa,wBAAwB;AACrC;AACA,aAAa,sBAAsB;AACnC,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,4CAA4C;AACzD;AACA;AACA,aAAa,uBAAuB;AACpC,aAAa,+CAA+C;AAC5D;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,aAAa,0BAA0B;AACvC;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB,cAAc,gBAAgB;AAC9B,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB;;AAEwC;AACgB;AACjB;;AAEvC;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,kCAAkC;AAC7C,WAAW,SAAS;AACpB;AACO,iDAAiD;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa,wDAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,aAAa;AACxB,aAAa;AACb;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,iBAAiB;AAC9B;;AAEA;AACA;AACA,kBAAkB,+DAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,6DAAQ;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,WAAW,SAAS;AACpB,WAAW,GAAG;AACd,WAAW,kBAAkB;AAC7B,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C,yDAAQ;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC9NA;AACA,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD,aAAa,qCAAqC;AAClD,aAAa,sCAAsC;AACnD;;AAEuC;AACY;AACgB;AACd;AACD;AACQ;AACR;;AAEpD,WAAW,WAAW;AACf;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC,sCAAsC;AACtC;AACA;;AAEA;AACA,4B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A;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AC/nBA;AACA,aAAa,8CAA8C;AAC3D,aAAa,+CAA+C;AAC5D;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEuC;AACgC;AAChB;;AAEvD,cAAc;;AAEd;AACA,WAAW,SAAS,WAAW;AAC/B,aAAa;AACb;AACO,qCAAqC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;;AAEA,QAAQ,+CAAM;;AAEd;AACA,kEAAkE;AAClE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,uCAAuC,eAAe;AACtD;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,wFAAmB;AAC9C;AACA;AACA,OAAO;AACP;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA,gCAAgC,kCAAkC;AAClE;AACA;AACA,mBAAmB,wFAAmB;AACtC,mBAAmB,QAAQ;AAC3B;;AAEA;;AAEA;AACA,uEAAuE;;AAEvE;AACA,uBAAuB,wEAAW;;AAElC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,iCAAiC,eAAe;AAChD;AACA;AACA,kCAAkC,wBAAwB;AAC1D;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,wEAAW;AACpC;AACA,qBAAqB,eAAe;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjOA;AACA,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,sCAAsC;AACnD,aAAa,0CAA0C;AACvD,aAAa,uCAAuC;AACpD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEuC;AACY;AACC;AAInB;AACmB;AACQ;AACW;AACnB;;AAEpD,gBAAgB;;AAEhB;AACA,aAAa;AACb;AACO;AACP,aAAa,WAAW;AACxB;AACA;AACA,OAAO,mFAAuB;AAC9B;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA,KAAK;AACL;AACA,OAAO,mFAAuB,IAAI,kCAAkC;AACpE,OAAO,oFAAwB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;;AAEA,uBAAuB,4EAAgB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,2EAAe;AACpC,qBAAqB,uEAAW;AAChC,qBAAqB,uEAAW;AAChC,qBAAqB,sEAAU;AAC/B;AACA;AACA;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM,UAAU,oFAAwB;;AAE5C;AACA;AACA;;AAEA,eAAe,wFAAmB;AAClC,2BAA2B,uCAAuC;AAClE;;AAEA,6BAA6B,uEAAW;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,UAAU;AACrB;AACA;AACA,aAAa,iBAAiB;AAC9B;;AAEA;AACA;AACA;AACA,gCAAgC,4EAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,8CAAM;;AAER;AACA,8BAA8B,sEAAU;AACxC;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB;AACA;AACA,UAAU,6EAAiB;AAC3B;AACA,2BAA2B;AAC3B,yBAAyB;AACzB;;AAEA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA,aAAa,SAAS;AACtB;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM,UAAU,mFAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,uEAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,eAAe,OAAO;AACtB;;AAEA;AACA,eAAe,qEAAS;AACxB,eAAe,mFAAuB;AACtC,eAAe,8FAA8B;AAC7C;AACA;AACA;;AAEA,iBAAiB,oFAAwB;AACzC;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,wFAAmB;AACjD;AACA;AACA;;AAEA;;AAEA,SAAS,mFAAyB;AAClC;AACA;;AAEA,oBAAoB,2EAAe;AACnC;;AAEA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,mFAAuB;AACtC,eAAe,2EAAe;AAC9B,eAAe,oFAAwB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM,UAAU,oFAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM,UAAU,mFAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,uEAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,eAAe,OAAO;AACtB;;AAEA;AACA,eAAe,qEAAS;AACxB,eAAe,mFAAuB;AACtC,aAAa,8FAA8B;AAC3C;AACA;AACA;;AAEA,iBAAiB,oFAAwB;AACzC;AACA;AACA;;AAEA;AACA,mBAAmB,wFAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,4EAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,qEAAS;AACxB,MAAM,4EAAkB;AACxB,eAAe,mFAAuB;AACtC,eAAe,oFAAwB;AACvC,aAAa,8FAA8B;AAC3C;AACA;AACA;AACA;;AAEA,SAAS,mFAAyB;AAClC;AACA;;AAEA;AACA;AACA,oBAAoB,2EAAe;AACnC;;AAEA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,mFAAuB;AACtC,eAAe,2EAAe;AAC9B,eAAe,oFAAwB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,uEAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAY;AACzB;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA,uBAAuB,gEAAS;AAChC;;AAEA,WAAW,QAAQ;AACnB;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;;AAEA,SAAS,qEAAY;AACrB;AACA;AACA;AACA,IAAI,iFAAiB;AACrB;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,uDAAuD,iFAAiB;AACxE;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/bA;AACA,aAAa,8CAA8C;AAC3D;;AAEA,WAAW,eAAe;AACnB;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,0CAA0C;AACvD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEuC;AACM;AACsB;AACd;AACD;AACQ;AACR;;AAEpD;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO,sCAAsC;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,CAAC,uEAAW,aAAa;AACpC,iBAAiB,kBAAkB;AACnC,uBAAuB,OAAO,uEAAW;AACzC;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;;AAEA;AACA;AACA,qCAAqC;AACrC,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,+DAAM;AAClB;AACA;AACA;AACA,cAAc,sEAAU;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,+DAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA,YAAY,+DAAM;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gCAAgC,sEAAU;AAC1C;AACA;;AAEA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,OAAO;AACtB;AACA,MAAM,+CAAM,UAAU,uEAAW;;AAEjC;AACA,qBAAqB,uEAAW;AAChC,8CAA8C,iFAAqB;AACnE;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,qBAAqB,oFAAiB;;AAEtC,mBAAmB,uEAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,oFAAiB;AACrC;AACA,6BAA6B,4FAA4B;AACzD;AACA,+BAA+B,4FAA4B;AAC3D;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzLA;AACA,aAAa,8CAA8C;AAC3D,aAAa,6BAA6B;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,eAAe;AACnB;AACP;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,qCAAqC,QAAQ;AAC7C;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,qCAAqC,QAAQ;AAC7C;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,qCAAqC,QAAQ;;AAE7C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA,KAAK;AACL;AACA,oCAAoC,cAAc;AAClD;AACA;AACA,mCAAmC,QAAQ;;AAE3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA,aAAa,0CAA0C;AACvD,aAAa,yCAAyC;AACtD,aAAa,0CAA0C;AACvD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEA;AACA,aAAa,gCAAgC;AAC7C;;AAEuC;AACa;AAKnB;AACmB;AACQ;AACR;;AAEpD,WAAW,WAAW;AACf;AACP,SAAS,OAAO;AAChB;;AAEA;AACA;AACA;AACA;;AAEA,WAAW,UAAU;AACrB;AACA;AACA,aAAa,mBAAmB;AAChC;AACA,aAAa,mBAAmB;AAChC;AACA,aAAa,mBAAmB;AAChC;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,gBAAgB,2EAAe;AAC/B;AACA;AACA;AACA,uBAAuB,yFAAyB;AAChD;;AAEA,QAAQ,+CAAM;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,4EAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA,aAAa,mBAAmB;AAChC;AACA,aAAa,mBAAmB;AAChC;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,6EAAiB;AA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A;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oFAAoF,2BAA2B;AAC/G;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,iBAAiB,qEAAS,IAAI,qEAAO;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oFAAoF,2BAA2B;AAC/G;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,iBAAiB,sEAAU,cAAc,qEAAS,IAAI,oEAAM;AAC5D;AACA;AACA;;AAEA;AACA;AACA,eAAe,uEAAW;AAC1B,eAAe,0EAAc;AAC7B,eAAe,6EAAiB;AAChC,eAAe,gFAAoB;AACnC,MAAM,mFAAyB;AAC/B,MAAM,2EAAiB;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yEAAyE,2BAA2B,8BAA8B;AAClI;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,iBAAiB,0EAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,uEAAW;AAC1B,eAAe,6EAAiB;AAChC,eAAe,gFAAoB;AACnC,gBAAgB,qEAAS,IAAI,qEAAO;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oFAAoF,2BAA2B;AAC/G;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,iBAAiB,+EAAmB,aAAa,4EAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,gFAAoB;AACrC,MAAM,8CAAM;AACZ,aAAa,uFAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8EAA8E;AAC9E,kBAAkB,0EAAc;AAChC,iFAAiF,YAAY;AAC7F;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM;;AAEV,iBAAiB,qEAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,4EAAkB;AAC1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA,iBAAiB,qEAAS,uBAAuB,4EAAkB;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,iBAAiB,6EAAiB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,0EAAc,aAAa,uEAAW;AACxD;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA,IAAI,8CAAM,UAAU,6EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA,QAAQ,4EAAkB;AAC1B;AACA,sBAAsB,4EAAgB;AACtC;AACA,qBAAqB,4EAAgB;AACrC,eAAe,qEAAY;AAC3B;AACA;AACA,UAAU,4EAAgB;AAC1B,UAAU,iFAAiB;AAC3B;AACA;;AAEA;AACA;AACA,QAAQ,qEAAY;AACpB;AACA;AACA,UAAU,4EAAgB;AAC1B,UAAU,iFAAiB;AAC3B;AACA;AACA;AACA;;AAEA,QAAQ,uEAAa,UAAU,2EAAiB;AAChD;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA,MAAM,4EAAkB;AACxB,QAAQ,uEAAa,UAAU,2EAAiB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,cAAc,uDAAY;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA,cAAc,uDAAY;AAC1B;AACA,kBAAkB,qEAAS;AAC3B;AACA;AACA,sBAAsB,6EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAS;AAC3B;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM,CAAC,4EAAkB;AAC7B,kBAAkB,4EAAgB;AAClC;AACA,iBAAiB,4EAAgB;AACjC;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,gGAAgC;AAChD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC92BA;AACA,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,aAAa,sCAAsC;AACnD,aAAa,kDAAkD;AAC/D,aAAa,yDAAyD;AACtE;;AAEuC;AACa;AACO;AACP;AACA;AACT;;AAE3C;AACA,WAAW,iBAAiB;AAC5B,WAAW,wBAAwB;AACnC,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACO;AACP,UAAU;;AAEV,aAAa,WAAW;AACxB;AACA;;AAEA;;AAEA,eAAe,OAAO;AACtB;AACA,MAAM,+CAAM,UAAU,0EAAc;AACpC,aAAa,4DAAe;AAC5B;AACA;AACA,QAAQ,qEAAY,iBAAiB,4EAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA,sBAAsB,0EAAc;AACpC;AACA,mBAAmB,qEAAS,IAAI,4EAAkB;AAClD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChFA;AACA,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,aAAa,kDAAkD;AAC/D,aAAa,yDAAyD;AACtE;;AAE2C;;AAE3C;AACA,WAAW,iBAAiB;AAC5B,WAAW,wBAAwB;AACnC,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACO;AACP,UAAU;;AAEV,aAAa,WAAW;AACxB;AACA,WAAW,4DAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,0CAA0C;AACvD,aAAa,kDAAkD;AAC/D,aAAa,yDAAyD;AACtE;;AAEA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B;;AAEoD;AACf;AACA;;AAErC;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO,4BAA4B;AACnC;AACA,aAAa,wBAAwB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,wCAAwC;AAC/C;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;;AAEA;AACA,WAAW,CAAC,0EAAc,GAAG,qDAAO,yCAAyC;AAC7E,WAAW,CAAC,0EAAc,GAAG,qDAAO;AACpC;AACA;;;;;;;;;;;;;;;;AC9CA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1JA;AACA,UAAU;AACV;AACO;AACP,YAAY;AACZ;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA,aAAa,0CAA0C;AACvD,aAAa,0CAA0C;AACvD,aAAa,sCAAsC;AACnD;AACA,aAAa,gDAAgD;AAC7D,aAAa,uDAAuD;AACpE;;AAEA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B;;AAEuC;AACY;AAC2B;AAClB;AACR;AACA;AACc;AACxB;;AAE1C,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACO;AACP,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA;AACA,KAAK,wCAAwC;AAC7C;AACA;;AAEA;AACA;AACA,OAAO,4EAAgB;AACvB,OAAO,4EAAgB;AACvB;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA,eAAe,OAAO;AACtB;AACA,MAAM,+CAAM;AACZ,iBAAiB,4EAAgB,aAAa,4EAAgB;AAC9D;AACA;;AAEA;AACA;AACA,wBAAwB,4EAAgB;AACxC;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,UAAU,2EAAiB;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,mBAAmB,qEAAS;AAC5B;AACA;;AAEA,UAAU,4EAAkB;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA,UAAU,4EAAkB;AAC5B,sBAAsB,4EAAgB;AACtC;AACA,qBAAqB,4EAAgB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA,qBAAqB,6EAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,mBAAmB,qEAAS;AAC5B;AACA;;AAEA;AACA,kBAAkB,uDAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,MAAM,8CAAM;;AAEZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,uDAAY;AAChC;AACA;AACA;AACA,YAAY,mFAAkB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,uBAAuB;AACpD;;AAEA;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA,kBAAkB,iFAAqB;AACvC;AACA,iBAAiB,iFAAqB;AACtC,2BAA2B,gEAAS;AACpC;AACA;;;;;;;;;;;;;;;;ACrOA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA,aAAa,0CAA0C;AACvD,aAAa,sDAAsD;AACnE;;AAE4B;AAC5B;AACgC;AACmC;AACH;AACd;AACF;AACM;;AAEtD;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP;AACA;AACA,aAAa,gDAAa,CAAC,sCAAQ;AACnC,qBAAqB,wCAAwC;AAC7D;AACA,KAAK;AACL;AACA;;AAEA,SAAS,oFAAiB;AAC1B,IAAI,uEAAQ;AACZ,IAAI,iFAAa;AACjB,IAAI,mEAAM;AACV,IAAI,6DAAK;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA,sBAAsB;AACtB;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,wBAAwB;AACxB,0BAA0B;AAC1B;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,wBAAwB;AACxB,0BAA0B;AAC1B;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,8BAA8B;AAC5D;AACA,kBAAkB,iBAAiB,gBAAgB;;AAEnD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,mCAAmC;AACnE;AACA,0BAA0B,IAAI,mCAAmC;AACjE,0BAA0B;AAC1B,8BAA8B,mCAAmC;AACjE;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI,mCAAmC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iCAAiC;AAC3D,+BAA+B,iCAAiC;AAChE,kCAAkC,8CAA8C;AAChF,gCAAgC,iDAAiD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2DAA2D;AAC5F;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C,iCAAiC,2BAA2B;AAC5D,yBAAyB,iDAAiD;AAC1E,qBAAqB,iDAAiD;AACtE,yBAAyB,iDAAiD;AAC1E;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,IAAI;;AAEJ,iDAAiD;AACjD;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,yCAAyC;AACzC;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,cAAc,oBAAoB,gBAAgB,oBAAoB,YAAY,oBAAoB,aAAa,oBAAoB,eAAe,oBAAoB,qBAAqB,oBAAoB,wBAAwB,oBAAoB,sBAAsB,oBAAoB,uBAAuB;;AAE3V;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;;AAElD,mDAAmD;;AAEnD,+CAA+C;;AAE/C;AACA,2CAA2C,QAAQ;AACnD;AACA,4EAA4E;AAC5E,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;;AAExD,2DAA2D;;AAE3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,oBAAoB,OAAO;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;;AAEA;;AAEA;AACA,mCAAmC;AACnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA,MAAM;AACN;AACA,qBAAqB;AACrB;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA,mBAAmB;AACnB;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,MAAM,2DAA2D,iBAAiB;AAClF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,aAAa,iBAAiB;;AAE/C;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,cAAc;AAC5F,iBAAiB;;AAEjB,wBAAwB,cAAc,KAAK;AAC3C;AACA;AACA,0EAA0E;AAC1E,+DAA+D;AAC/D;AACA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH;AAClH;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,0DAA0D;AAC1D,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC;AACA;AACA,kEAAkE;AAClE,mCAAmC;AACnC;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU,OAAO;AACjB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,QAAQ,OAAO;AACf;AACA,oCAAoC;AACpC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA,0DAA0D;AAC1D,SAAS,wCAAwC;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,MAAM;AACN,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA,oBAAoB,wDAAwD;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,mBAAmB;AACnB,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,YAAY,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,IAAI,OAAO,YAAY,YAAY;AACnC;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,MAAM;AACN,8CAA8C,iBAAiB;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM,uCAAuC,iBAAiB;AAC9D;AACA;;AAEA;AACA;AACA;AACA,MAAM,yCAAyC,qBAAqB;AACpE;;AAEA,mBAAmB;AACnB;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA,kBAAkB;AAClB,gCAAgC,iBAAiB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA,qDAAqD;AACrD,MAAM,OAAO;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,MAAM,OAAO;;AAEb;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mEAAmE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC,8CAA8C,iBAAiB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA,IAAI,mCAAmC;AACvC;AACA;;AAEA;;AAEA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,WAAW;AACX;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;;AAEA;AACA;AACA;;AAEA;AACA,8CAA8C,qBAAqB;AACnE;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA,yDAAyD,kCAAkC;AAC3F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,sCAAsC;AACtC,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ,+CAA+C;AACvD;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,IAAI;AACJ,kCAAkC;AAClC;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,WAAW;AACX;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA;AACA,qCAAqC;AACrC,IAAI;AACJ;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,sEAAsE;AACtE,oEAAoE;AACpE,gEAAgE;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;;AAEf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe;;AAEf;AACA;;AAEA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,2CAA2C;AAC3C;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF,MAAM,OAAO;;AAEb;AACA,sBAAsB;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,IAAI;AACJ,qBAAqB;AACrB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV,MAAM;AACN;AACA,UAAU;AACV;AACA,IAAI;AACJ,kCAAkC;AAClC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,UAAU;AACV;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI,OAAO;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uCAAuC;AACvC,uCAAuC;AACvC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,iBAAiB;AAClD;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,MAAM,OAAO;;AAEb;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,yDAAyD;AACzD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,IAAI;AACJ,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,uCAAuC;AACvC;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C;AACA,mEAAmE;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4CAA4C,iBAAiB;AAC7D;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,IAAI;;AAEtC;AACA;;AAEA;AACA;AACA,kDAAkD;;AAElD;AACA,gCAAgC;AAChC,uCAAuC;;AAEvC,6BAA6B;AAC7B,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gDAAgD,4DAA4D;AAC5G;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,sEAAsE;AACtE;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA,0BAA0B,YAAY;AACtC,qBAAqB;AACrB;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,kCAAkC;AAClC;AACA,qBAAqB;AACrB;AACA;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,wCAAwC;AACxC;AACA,qBAAqB;AACrB,qEAAqE;AACrE;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,wBAAwB;AACxB,wBAAwB;AACxB,uBAAuB;;AAEvB;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA,uCAAuC,kCAAkC;AACzE;AACA,yCAAyC,iCAAiC;AAC1E,wCAAwC,iCAAiC;AACzE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,8BAA8B;AAC9B;AACA,wBAAwB;AACxB,wCAAwC;AACxC,yCAAyC;AACzC;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,2CAA2C,6CAA6C;AACxF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,OAAO;AAC3D;;AAEA;AACA,yCAAyC;AACzC,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA;;AAEA,sBAAsB,wBAAwB;AAC9C,2BAA2B,wBAAwB;AACnD,yCAAyC,mBAAmB;AAC5D,WAAW;AACX,wBAAwB;AACxB;AACA;AACA;;AAEA,4CAA4C;AAC5C,uEAAuE;;AAEvE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,IAAI,wDAAwD;AAC5D;AACA;;AAEA;;AAEA;AACA;AACA,sEAAsE;AACtE;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,iEAAiE;AACjE,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,sCAAsC,cAAc;AACpD,qCAAqC;AACrC;AACA,qDAAqD;;AAErD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,KAAK;AACzB,wCAAwC;AACxC;AACA,iDAAiD;AACjD;AACA,2BAA2B;AAC3B,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,wBAAwB;AACxB,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,yCAAyC;AACzC;AACA,iFAAiF,WAAW;AAC5F;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,8BAA8B;AACvC;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sBAAsB;AAC5B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAE2T;;;;;;;;;;;;;;;;;;;;ACn9K3T;AACA,aAAa,wCAAwC;AACrD,aAAa,sCAAsC;AACnD;;AAMiC;AACmB;AACQ;AACR;;AAEpD;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,0EAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,qEAAS;AACxB,eAAe,kFAAsB;AACrC,MAAM,sEAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,6EAAiB,GAAG,aAAa,2FAA2B,CAAC;AAC/E;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,6EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,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OAAO;AACpB;AACA,IAAI,+CAAM,UAAU,gFAAoB,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,iBAAiB,qEAAS;AAC1B;AACA;AACA,YAAY,uDAAY;AACxB,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iFAAqB;AACtC;AACA;;AAEA,QAAQ,4EAAkB;AAC1B,oBAAoB,4EAAgB;AACpC;AACA,mBAAmB,4EAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iFAAiB;AACzC;AACA;AACA;AACA,UAAU,qEAAY,mBAAmB,4EAAgB;AACzD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAY;AAC5B,4FAA4F;AAC5F;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,qEAAS;AACxB,eAAe,iFAAqB;AACpC,MAAM,4EAAkB;AACxB;AACA;AACA;AACA;;AAEA,iBAAiB,gFAAoB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,6EAAa;AAChC;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB;AACzB,KAAK;AACL;;AAEA;AACA;AACA,sDAAsD;AACtD,MAAM,8CAAM;AACZ;AACA,MAAM,+CAAM;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA;AACA,qDAAqD,UAAU;AAC/D,UAAU,mFAAkB;AAC5B;AACA;AACA,QAAQ;AACR,kBAAkB,uDAAY;AAC9B;AACA,UAAU,mFAAkB;AAC5B;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA;AACA;AACA,UAAU,mFAAkB;AAC5B;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,uDAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mBAAmB,qEAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;;;;;;;;;;;;;;;;AC7PA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1JA;AACA,aAAa,wCAAwC;AACrD,aAAa,sCAAsC;AACnD;;AAEsD;;AAEtD;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,QAAQ,uEAAa;AACrB;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,QAAQ,uEAAa;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA,aAAa,wCAAwC;AACrD,aAAa,sCAAsC;AACnD,aAAa,qCAAqC;AAClD;;AAEuC;AACa;AACO;AACP;AACQ;AACR;;AAEpD;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACO;AACP,aAAa,mBAAmB;AAChC;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,IAAI,+CAAM;AACV,eAAe,+EAAmB;AAClC,iBAAiB,4EAAgB;AACjC,iBAAiB,iFAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iFAAqB,GAAG,kFAAsB;AACpE;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,qEAAS;AAC1B;AACA;;AAEA;AACA,QAAQ,4EAAkB;AAC1B,oBAAoB,4EAAgB;AACpC;AACA,mBAAmB,4EAAgB;AACnC,aAAa,qEAAY,wBAAwB,4EAAgB;AACjE;;AAEA,kBAAkB,6EAAiB,GAAG,aAAa,2FAA2B,CAAC;AAC/E;AACA;;AAEA,aAAa,OAAO;AACpB;AACA,oCAAoC,qEAAS,IAAI,4EAAkB;AACnE,mBAAmB,6EAAiB;AACpC;AACA;;AAEA;AACA,oBAAoB,2EAAe;AACnC;;AAEA,aAAa,OAAO;AACpB;AACA,oCAAoC,2EAAe;AACnD;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtGA;AACA,aAAa,wCAAwC;AACrD,aAAa,sCAAsC;AACnD;;AAEoD;AACsB;AACtB;;AAEpD;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB;AACO;AACP,aAAa,SAAS;AACtB;;AAEA;;AAEA,aAAa,OAAO;AACpB;AACA,QAAQ,4EAAkB;AAC1B,oBAAoB,4EAAgB;AACpC;AACA,mBAAmB,4EAAgB;AACnC;AACA;AACA;;AAEA,QAAQ,uEAAa;AACrB,aAAa,qEAAY;AACzB;AACA;AACA,eAAe,4EAAgB,GAAG,4EAAgB;AAClD;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA,aAAa,qCAAqC;AAClD;;AAEoD;AACsB;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACO,gDAAgD;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA,6BAA6B,uEAAW,aAAa,qEAAS;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACO;AACP,kCAAkC,qEAAS,aAAa,uEAAW;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACO;AACP,iCAAiC,+EAAmB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACO;AACP;AACA,aAAa,+EAAmB;AAChC,aAAa,8EAAkB;AAC/B,aAAa,uEAAW;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,sCAAsC,sFAAuB;;AAEpE;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,cAAc;;;;;;;;;;;;;;;;;;ACP8C;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,aAAa;AACb;AACO;AACP;AACA;AACA,aAAa,WAAW;AACxB;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA,qBAAqB,4FAA4B;AACjD;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,4FAA4B;AACjD;AACA;AACA;AACA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G;AACA,aAAa,SAAS,qCAAqC,gCAAgC;AAC3F;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;;AAEuC;AACA;AACG;;AAE1C,cAAc;;AAEd;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,cAAc;AACd;AACO;AACP,SAAS,0BAA0B;AACnC,aAAa,iBAAiB;AAC9B;AACA,sCAAsC;AACtC;AACA;AACA,GAAG;AACH,aAAa,gBAAgB;AAC7B;AACA,aAAa,uBAAuB;AACpC;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,iBAAiB;AAC9B;AACA,aAAa,kBAAkB;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,uDAAY;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6BAA6B,YAAY;AACzC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,yDAAK;AACT,+BAA+B,aAAa;AAC5C,iBAAiB,oBAAoB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,8CAAM;AACZ,MAAM,+CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAqD;AACrE,cAAc;AACd;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,UAAU;;AAEV;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,iBAAiB;AAChC;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,IAAI,8CAAM;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1PA,YAAY;;AAEZ;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAEA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;;AAE+D;;AAExD;AACP;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,qBAAqB;AAClC,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,oBAAoB;AACnC;AACA,eAAe,UAAU;AACzB;AACA,cAAc,yBAAyB;AACvC,YAAY;AACZ;AACA,eAAe,QAAQ;AACvB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,gFAAiB;AACjC;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;ACvF+C;;AAEtD;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA,8BAA8B,yEAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBA;AACA,aAAa,gDAAgD;AAC7D,aAAa,sCAAsC;AACnD,aAAa,yCAAyC;AACtD;;AAEA;AACA;AACA;AACA,YAAY,sBAAsB,IAAI;AACtC,WAAW,SAAS;AACpB,WAAW,iBAAiB;AAC5B,aAAa;AACb;AACO;AACP,aAAa,YAAY;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AC7B0D;AACd;AACQ;AACE;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,gBAAgB,6DAAM;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA,eAAe,6EAAiB;AAChC,MAAM,2EAAiB;AACvB,MAAM,2EAAiB;AACvB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wFAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACvHA;AACA,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD,aAAa,sCAAsC;AACnD;;AAEuC;AACM;AACO;AACA;;AAEpD;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACO;AACP,aAAa,wBAAwB;AACrC;AACA;AACA,aAAa,OAAO;AACpB;AACA,aAAa,kBAAkB;AAC/B;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,OAAO;AACpB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,2EAAe;AACvC,oCAAoC,gFAAoB;AACxD;AACA,MAAM,8CAAM;AACZ;AACA;;AAEA;AACA;AACA,0CAA0C,iFAAqB;AAC/D;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,yEAAa;AACvD;AACA;AACA,gDAAgD,yEAAa;AAC7D;AACA;;AAEA,gDAAgD,2EAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAiC,4EAAgB;AACjD,iCAAiC,iFAAqB;AACtD;AACA;AACA;AACA,0CAA0C,iFAAqB;AAC/D;;AAEA,iCAAiC,4EAAgB;AACjD;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA,QAAQ,+DAAM;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,EAAE,+CAAM;AACR;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA,aAAa,wBAAwB;AACrC;AACA,aAAa,SAAS;AACtB;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,8CAAM;AACV;AACA;AACA;AACA,IAAI,+CAAM;;AAEV;;AAEA;AACA;;AAEA;AACA,oBAAoB,qEAAS;AAC7B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAM;AACV,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,+CAAM;AACV;AACA,IAAI,+DAAM;AACV;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AClQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,yDAAyD;AACzD,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wCAAwC,WAAW,gBAAgB;AACnE;AACA;AACA;AACA;;AAEA,uCAAuC;AACvlcA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB;AACrB;AACA;AACA;;;;;;;;;;;;;;;;;AC1GA;AACA,aAAa,wBAAwB;AACrC,aAAa,sBAAsB;AACnC,aAAa,yBAAyB;AACtC,aAAa,cAAc;AAC3B,aAAa,4BAA4B;AACzC;;AAEwC;;AAExC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ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;;;;;;;;;;;;;;;;;;;;ACvCsC;AACA;AACe;AACE;;AAEvD;AACO,2BAA2B,mDAAU;;AAE5C;AACA;AACA,EAAE,sDAAa;AACf;;AAEA;AACA,EAAE,uDAAc;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,4CAAQ;AACxB,YAAY,4CAAQ;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU,4CAAQ;;AAElB;AACA;AACA;;AAEA,yBAAyB,4CAAQ;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAQ;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4CAAQ;;AAE5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,wBAAwB,4CAAQ;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxRA;AACO,2gBAA2gB;AAC3gB;AACA,8CAA8C,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZqE;AACJ;AACA;AACF;AACR;AACZ;AACM;AACkB;AACX;AAC2C;AACtB;AACX;AACF;AACO;AACa;AACJ;AACZ;AACZ;AACtB;AAQhB;;AAEzB;;AAEA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,UAAU,4DAAe;AACzB;AACA,QAAQ,SAAS,6DAAgB;AACjC;AACA,QAAQ,SAAS,sDAAS;AAC1B;AACA,QAAQ;AACR;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,4DAAe;AACzB;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,yDAAa,EAAE,4CAA4C;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,yDAAa;AACf;AACA,eAAe,2DAAc;AAC7B;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE,yDAAa;AACf;AACA,eAAe,oDAAO;AACtB;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA,EAAE,wFAAsB;AACxB,EAAE,oFAAoB;AACtB,EAAE,oFAAoB;AACtB,EAAE,kFAAmB;AACrB,EAAE,0EAAgB;AAClB,EAAE,8DAAU;AACZ,EAAE,oEAAa;AACf;;AAEA;AACA,EAAE,sFAAqB;AACvB,EAAE,4EAAgB;AAClB,EAAE,uHAAoC;AACtC,EAAE,iGAA0B;AAC5B,EAAE,sFAAqB;AACvB,EAAE,oFAAoB;AACtB,EAAE,2FAAuB;AACzB,EAAE,wGAA6B;AAC/B,EAAE,oGAA2B;AAC7B,EAAE,wFAAsB;AACxB,EAAE,4EAAgB;AAClB,EAAE,oEAAa;AACf;;AAEA;AACA,EAAE,wGAA6B;AAC/B,EAAE,oGAA2B;AAC7B,EAAE,4EAAgB;AAClB,EAAE,oEAAa;AACf;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,2BAA2B;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7a+C;;AAE/C;AACO;AACP;AACA;AACA;AACA,8BAA8B,+DAAgB;;AAE9C;;AAEA;AACA;;AAEA,YAAY;AACZ;AACA;;;;;;;;;;;;;;;;;;;AChBsC;AACiB;;AAEvD;AAC8C;;AAE9C;AACO,6BAA6B,uDAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,2CAA2C,8DAAiB,CAAC,4CAAQ;AACrE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,4BAA4B;AAC5B;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC1DsD;;AAEvD;AACA;AACO,kCAAkC,uDAAc;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC3BoD;;AAErD;AACA;AACO,oCAAoC,sDAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;ACxBqC;AACiB;;AAEvD;AACA;AACO,2BAA2B,uDAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,4CAAQ;;AAEtB,uCAAuC;AACvC;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;ACnDqC;AACiB;;AAEvD;AACA;AACA;AAC6C;;AAE7C;AACA;AACO,uBAAuB,uDAAc;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,6DAAgB,CAAC,4CAAQ;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;ACxCqC;AACiB;;AAEvD;AACO,2BAA2B,uDAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,4CAAQ;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;AC3CqC;AACiB;AACX;;AAE5C;AACA;AACO,iCAAiC,uDAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,4DAAe,CAAC,4CAAQ;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;ACjCqC;AACiB;;AAEvD;AAC8C;;AAE9C;AACA;AACO,2CAA2C,uDAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,8DAAiB,CAAC,4CAAQ;AACvC;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;ACpDqC;AACiB;;AAEvD;AACO,6BAA6B,uDAAc;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,4CAAQ;AACZ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;AC7CqC;AACiB;AACZ;;AAE3C;AACO,uBAAuB,uDAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,4CAAQ;AAC3B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB,4CAAQ;;AAExB;AACA;AACA;AACA;AACA;;AAEA,eAAe,2DAAc;AAC7B;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;ACrEqC;AACiB;;AAEvD;;AAEA;AACO,0BAA0B,uDAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,4CAAQ;AACZ;AACA,oBAAoB,4CAAQ;AAC5B;AACA;AACA;;AAEA;AACA,kBAAkB,4CAAQ;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;ACxDqC;AACiB;;AAEvD;AACiD;;AAEjD;AACO,2BAA2B,uDAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU,iEAAoB,CAAC,4CAAQ;AACvC;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AChFsD;;AAEvD;AACA;AACO,4BAA4B,uDAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;ACnDqC;AACiB;;AAEvD;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO,4BAA4B,uDAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,4CAAQ;AAC1B;;AAEA;AACA;AACA;AACA,gCAAgC,4CAAQ;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;AC1EqC;AACe;;AAErD;AACA;AACgD;;AAEhD;AACA;AACO,8BAA8B,sDAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS,gEAAmB,CAAC,4CAAQ;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,4CAAQ;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,GAAG;AAC7B;AACA;AACA;AACA;AACA,QAAQ,4CAAQ;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC7FsD;;AAEvD;AACA;AACA;AACO,iBAAiB,uDAAc;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC5BoD;;AAErD;AACO,oBAAoB,sDAAa;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9BuD;;AAEvD;AACO,uBAAuB,uDAAc;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACXqC;;AAEtC;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,4CAAQ;AAClC;AACA;AACA;;AAEA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC5CO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7OA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,gBAAgB;AAC9B,cAAc,gBAAgB;AAC9B;AACA,aAAa,yBAAyB;AACtC;;AAEkC;AACF;;AAEzB;;AAEP,YAAY;;AAEZ,OAAO,+CAAQ;AACf,OAAO,4CAAK;;AAEZ;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA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AACA;AACA;AACA,aAAa,mDAAO;AACpB,WAAW,mDAAO;AAClB;AACA;AACA,cAAc,mDAAO;AACrB,cAAc,6DAAiB;AAC/B,eAAe,sDAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAO;AAC3B;AACA,aAAa,0DAAc;AAC3B,YAAY,kDAAM;AAClB,YAAY,mDAAO;AACnB,UAAU,kDAAM;AAChB;AACA;AACA,aAAa,0DAAc;AAC3B,eAAe,0DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mDAAO;AAClB;AACA,cAAc,0DAAc;AAC5B,aAAa,0DAAc;AAC3B,eAAe,mDAAO;AACtB,cAAc,0DAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mDAAO;AACjB,SAAS,kDAAM;AACf;AACA;AACA,eAAe,kDAAM;AACrB;AACA;AACA;AACA,eAAe,kDAAM;AACrB,cAAc,mDAAO;AACrB,WAAW,mDAAO;AAClB;AACA;AACA,cAAc,mDAAO;AACrB,gBAAgB,mDAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mDAAO;AACjB,aAAa,kDAAM;AACnB;AACA,UAAU,0DAAc;AACxB;AACA,iBAAiB,mDAAO;AACxB;AACA;AACA,cAAc,mDAAO;AACrB;AACA,SAAS,0DAAc;AACvB,cAAc,mDAAO;AACrB,cAAc,mDAAO;AACrB,UAAU,kDAAM;AAChB,aAAa,kDAAM;AACnB,aAAa,0DAAc;AAC3B;AACA,YAAY,mDAAO;AACnB,cAAc,mDAAO;AACrB,cAAc,mDAAO;AACrB;AACA,UAAU,kDAAM;AAChB;AACA;AACA,UAAU,kDAAM;AAChB,gBAAgB,sDAAU;AAC1B;AACA;AACA;AACA;AACA,WAAW,kDAAM;AACjB;AACA;AACA,cAAc,kDAAM;AACpB;AACA;AACA;AACA;AACA,mBAAmB,mDAAO;AAC1B;AACA,WAAW,sDAAU;AACrB,WAAW,kDAAM;AACjB;;AAEA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD,aAAa,0DAAc;AAC3B;AACA;AACA;AACA,YAAY,kDAAM;AAClB;AACA,kBAAkB,kDAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mDAAO;AACpB,aAAa,mDAAO;AACpB;AACA;AACA;AACA;AACA,YAAY,kDAAM;AAClB,gBAAgB,kDAAM;AACtB,8CAA8C,SAAS;AACvD;AACA;AACA,kBAAkB,kDAAM;AACxB,iBAAiB,kDAAM;AACvB,cAAc,mDAAO;AACrB,YAAY,mDAAO;AACnB,aAAa,mDAAO;AACpB,YAAY,mDAAO;AACnB;AACA;AACA;AACA;AACA,iBAAiB,kDAAM;AACvB;AACA;AACA,eAAe,sDAAU;AACzB;AACA;AACA;AACA,eAAe,kDAAM;AACrB;AACA;AACA;AACA,kDAAkD,MAAM;AACxD,YAAY,kDAAM;;AAElB;AACA;AACA;AACA;AACA,6BAA6B,mDAAO;AACpC,2BAA2B,mDAAO;AAClC;AACA;AACA,aAAa,kDAAM;AACnB;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;ACpTD;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;ACAwB;AACe;AACkC;;AAElE,YAAY,uDAAM;AACzaAAa,qFAAsB;AACnC;AACA,WAAW,iEAAqB;AAChC,kBAAkB,kDAAM;AACxB;AACA;AACA;AACA,gBAAgB,kDAAM;AACtB,eAAe,kDAAM;AACrB;AACA,YAAY,kDAAM;AAClB;AACA;AACA,aAAa,kDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,kDAAM;AAChB;AACA;AACA,eAAe,kDAAM;AACrB,eAAe,0DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAM;AACnB,qBAAqB,kDAAM;AAC3B;AACA;AACA;AACA,aAAa,kDAAM;AACnB;AACA,cAAc,mDAAO;AACrB;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrB;AACA;AACA;AACA,cAAc,kDAAM;AACpB;AACA;AACA,iBAAiB,kDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAc;AACtB,QAAQ,0DAAc;AACtB,eAAe,0DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAM;AACnB;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrB,kBAAkB,kDAAM;AACxB,kBAAkB,kDAAM;AACxB;AACA,iBAAiB,kDAAM;AACvB;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrB,OAAO,kDAAM;AACb,QAAQ,kDAAM;AACd,QAAQ,kDAAM;AACd,QAAQ,kDAAM;AACd,QAAQ,kDAAM;AACd,kBAAkB,iEAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrsBAAsB,kDAAM;AAC5B,uBAAuB,kDAAM;AAC7B;AACA;AACA;AACA,gBAAgB,kDAAM;AACtB;AACA;AACA;AACA;AACA,UAAU,0DAAc;AACxB;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrB,eAAe,kDAAM;AACrB,eAAe,kDAAM;AACrB;AACA;AACA;AACA;AACA,cAAc,iEAAqB;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B;AACA;AACA;AACA,wBAAwB,iEAAqB;AAC7C,sBAAsB,iEAAqB;AAC3C,mBAAmB,iEAAqB;AACxC,qBAAqB,iEAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAM;AAC5B,sBAAsB,kDAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAM;AACjC,4BAA4B,kDAAM;AAClC;AACA;AACA,qBAAqB,iEAAqB;AAC1C;AACA;AACA;AACA,sBAAsB,kDAAM;AAC5B,mBAAmB,kDAAM;AACzB;AACA;AACA,kBAAkB,kDAAM;AACxB;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAqB;AACzC,cAAc,kDAAM;AACpB;AACA;AACA,aAAa,kDAAM;AACnB,aAAa,kDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAqB;AACjC;AACA;AACA;AACA;AACA,uBAAuB,kDAAM;AAC7B,wBAAwB,kDAAM;AAC9B;AACA;AACA;AACA,gBAAgB,kDAAM;AACtB;AACA,iBAAiB,kDAAM;AACvB,mBAAmB,kDAAM;AACzB;AACA,cAAc,kDAAM;AACpB,kBAAkB,kDAAM;AACxB;AACA,cAAc,kDAAM;AACpB,iBAAiB,kDAAM;AACvB,iBAAiB,kDAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACpjBmE;;AAEpE;AACA,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,SAAS,oFAAsB;AAC/B;;;;;;;;;;;;;;;;ACTA;AACA,WAAW,wBAAwB;AACnC,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;ACPA;AACA,aAAa,kCAAkC;AAC/C,aAAa,8BAA8B;AAC3C;AACA,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,cAAc,6BAA6B;AAC3C,cAAc,sDAAsD;AACpE,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,eAAe;AAC7B;;AAEyC;AACP;AACW;;AAE7C,cAAc;;AAEd;AACA,WAAW,YAAY;AACvB,aAAa;AACb;AACO;AACP,aAAa,YAAY;AACzB;AACA,aAAa,QAAQ;AACrB;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA,uBAAuB,yDAAW;AAClC;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,aAAa,wDAAS;AACtB,aAAa,wDAAS;AACtB;AACA;;AAEA,aAAa,8CAAM;AACnB;;;;;;;;;;;;;;;;;;ACzD8B;AACK;;AAEnC,WAAW,oBAAoB;AAC/B;AACA,2BAA2B,sCAAK;;AAEzB,0BAA0B,0CAAI;AACrC;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,aAAa;AAC1B,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,sCAAK,aAAa,sCAAK;AACjE;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3CO;AACP;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxBA;AACA,aAAa,kCAAkC;AAC/C,aAAa,8BAA8B;AAC3C;;AAEkC;;AAElC;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,aAAa,YAAY;AACzB;AACA,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,8CAAM;AACnB;;;;;;;;;;;;;;;;ACzBA;AACA,aAAa,0BAA0B;AACvC,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC;;AAEO;AACP;AACA;AACA,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,YAAY;AACvB;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,aAAa;AACxB;;;;;;;;;;;;;;;;;;;;;;AC3BA;;AAEO;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP;AACA;AACA;;;;;;;;;;;;;;;;;ACZuC;;AAEhC,cAAc,uDAAM;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AChBsC;;AAEhC,YAAY,uDAAM;AACzB;AACA;AACA;AACA,GAAG;AACH,eAAe;AACf,CAAC;;;;;;;;;;;;;;;;;;ACRsC;AACsC;;AAEtE,cAAc,uDAAM;AAC3B;AACA,eAAe,0BAA0B;AACzC,aAAa,yFAAwB;AACrC,eAAe;AACf,CAAC;;;;;;;;;;;;;;;;ACRD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC7CO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,8CAA8C;AAC9C,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrRA;AACA,aAAa,qBAAqB;AAClC,aAAa,oEAAoE;AACjF;AACA,aAAa,cAAc;AAC3B,aAAa,8BAA8B;AAC3C,aAAa,2CAA2C;AACxD;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+CAA+C;AAC5D;;AAEA;AACgD;AACA;AACd;;AAElC;;AAEA,oBAAoB;;AAEpB,WAAW,kEAAkE;AAC9D;AACf,uCAAuC,SAAS;AAChD,mCAAmC;;AAEnC,uBAAuB,eAAe;;AAEtC,aAAa,wCAAwC;AACrD;AACA;AACA;AACA,uBAAuB,uDAAO;AAC9B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,WAAW,iEAAU;AACrB;AACA;AACA;AACA,KAAK;;AAEL;AACA,gBAAgB,6HAA6H;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8CAAM,WAAW;AACtC,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB,mBAAmB;AACnB;AACA;AACA;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1HA;AA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;;;;;;;;;;;;;;;ACH5B;AACA,aAAa,sBAAsB;AACnC;;AAE+B;AAC/B;AAC0C;;AAE1C,WAAW,qCAAqC;AACzC,eAAe,uDAAY;;AAElC,WAAW,gDAAgD;AAC5C;AACf,uBAAuB,QAAQ,gDAAO,CAAC,uDAAY,EAAE;AACrD;;;;;;;;;;;;;;;ACdwC;AACJ;;AAEpC,uBAAuB,wDAAO,CAAC,gDAAQ;;AAEvC,+DAAe,cAAc;;;;;;;;;;;;;;ACL7B;AACA,aAAa,oCAAoC;AACjD;;AAEoC;;AAEpC,+DAAe,8CAAc;;;;;;;;;;;;;;;;ACN7B;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,cAAc;AAC5B,cAAc,UAAU;AACxB,cAAc,wBAAwB;AACtC,cAAc,wBAAwB;AACtC,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;;AAEA,WAAW,WAAW;AACfiDAAiD;AACjD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,iDAAiD;AACjD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,0CAA0C;AAC1C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,0CAA0C;AAC1C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACplLA;AACA,aAAa,sBAAsB;AACnC,aAAa,0BAA0B;AACvC,aAAa,iCAAiC;AAC9C,aAAa,yBAAyB;AACtC,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,gCAAgC;AAC7C,aAAa,2BAA2B;AACxC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA,cAAc,UAAU;AACxB,cAAc,SAAS;AACvB;;AAEyC;AACN;AACK;AACL;AACS;AACP;;AAErC,cAAc;;AAEd,aAAa,sDAAO;AACpB,mBAAmB,sDAAO;AAC1B,oBAAoB,sDAAO;;AAE3B;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA,aAAa,yBAAyB;AACtC;AACA,aAAa,WAAW;AACxB;AACA,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB;;AAEA;;AAEA,aAAa,4CAA4C;AACzD,sBAAsB;AACtB;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA,eAAe,UAAU;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,MAAM,uDAAK;AACX,mBAAmB,yBAAyB;AAC5C;;AAEA,QAAQ,qDAAM;AACd,QAAQ,qDAAM;;AAEd,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,kDAAI;;AAEnB;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA,iDAAiD,yDAAQ;AACzD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8CAA8C,0DAAS;AACvD,qCAAqC,0DAAS;AAC9C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA,mBAAmB,yDAAQ;AAC3B,eAAe,oBAAoB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,oDAAS;AACjB;AACA;AACA;AACA;AACA,uBAAuB,oDAAS;AAChC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;ACrQA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC;AACA,aAAa,wFAAwF;AACrG;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,yCAAyC;AACpD,aAAa;AACb;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1PA;AACA,aAAa,gCAAgC;AAC7C;;AAEyB;AACQ;AACG;;AAEpC,4BAA4B,oDAAO;AACnC;AACA,MAAM;AACN,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,+DAAe,mBAAmB;;;;;;;;;;;;;;;;;;;;ACzBlC;AACA,aAAa,sBAAsB;AACnC;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,wBAAwB;AACtC,eAAe,uEAAuE;AACtF,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA,cAAc,OAAO;AACrB;AACA;;AAEmC;AACK;AACL;AACqB;;AAExD,cAAc;;AAEd;AACA,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,qDAAM;AACZ,MAAM,qDAAM;;AAEZ,iBAAiB,gCAAgC;AACjD;AACA;AACA,uBAAuB,yDAAQ;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAU;AAC/B,mBAAmB,6DAAQ;AAC3B,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA,eAAe,wBAAwB;AACvC;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;ACxHA;AACA,aAAa,gCAAgC;AAC7C;;AAEuC;;AAEvC,+DAAe,8CAAiB;;;;;;;;;;;;;;;;;ACNhC;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,gBAAgB;AAC7B;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa,QAAQ;AACrB;AACO;AACP;AACA;;;;;;;;;;;;;;;;ACnBA;AACA,gDAAgD;AAChD;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AACA,aAAa,QAAQ;AACrB,cAAc,UAAU;AACxB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,wEAAwE;AACtF;AACA;AACA,aAAa,mFAAmF;AAChG;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,uBAAuB;AAClC,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACA;AACA,aAAa,UAAU;AACvB;AACA;;AAEA;AACA,6CAA6C;AAC7C;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;ACzFA;AACA,aAAa,uFAAuF;AACpG,aAAa,iCAAiC;AAC9C;;AAE8B;AACoB;AACA;;AAElD;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,SAAS;AACpB;AACA,aAAa;AACb;AACA;AACO;AACP,SAAS,8CAAI,uBAAuB,QAAQ,8DAAW,CAAC;AACxD;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,cAAc;AACzB;AACA,aAAa;AACb;AACA;AACO;AACP,SAAS,8CAAI,uBAAuB,QAAQ,8DAAW,CAAC;AACxD;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,qDAAqD;AACrD;;;;;;;;;;;;;;;;;;;ACRA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB,8CAA8C;AAC9C,cAAc,SAAS;AACvB;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEiD;AACR;AACJ;;AAErC;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,oBAAoB;AAC/B,aAAa;AACb;AACO;AACP,gBAAgB,iEAAa;AAC7B,aAAa,kBAAkB;AAC/B;;AAEA;AACA,YAAY,qDAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAS;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACO;AACP;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACO;AACP;AACA;AACA;AACA,gBAAgB;AAChB;;;;;;;;;;;;;;;;;;;ACbiE;AACF;AACb;;AAElD,cAAc;;AAEd;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA,WAAW,QAAQ;AACnB;;AAEA,YAAY,4EAAsB;AAClC,eAAe,4EAAsB;AACrC,eAAe,4EAAsB;AACrC;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,mBAAmB;AAC9B,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,uFAAgC;AACtC,OAAO,sEAAkB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;;AAEA;AACA;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AACA,eAAe,+CAA+C;AAC9D,WAAW,OAAO;AAClB,YAAY;AACZ;AACO;AACP;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;;AAEA;AACA;AACA,wEAAwE;AACxE;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC7BA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,uBAAuB;AACpC,aAAa,8BAA8B;AAC3C,aAAa,uBAAuB;AACpC,aAAa,sCAAsC;AACnD;AACA,aAAa,sCAAsC;AACnD,aAAa,+CAA+C;AAC5D,aAAa,4CAA4C;AACzD;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,uCAAuC;AACrD;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,cAAc,SAAS;AACvB;;AAEuC;AACD;;AAEtC,cAAc;;AAEd;AACA,UAAU;AACV,aAAa;AACb;AACe;AACf;AACA;AACA,4DAA4D;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB;AACA;AACA,qBAAqB,wDAAQ;AAC7B;AACA;AACA,eAAe,wBAAwB;AACvC;AACA,eAAe,QAAQ;AACvB;;AAEA,IAAI,wDAAK;;AAET;;AAEA;AACA,eAAe,MAAM;AACrB,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B;AACA;AACA,iBAAiB,aAAa;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,aAAa;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,kBAAkB;AACjC,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA,aAAa,mBAAmB;AAChC;;AAEA;AACA,EAAE,wDAAK;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B,eAAe;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxZA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,8BAA8B;AAC3C,aAAa,kDAAkD;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,GAAG;AACd,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa;AACb;;AAE2E;;AAE9C;;AAEtB;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,sEAAY;;AAElB;AACA,iBAAiB,MAAM;AACvB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrEA;AACA,aAAa,0BAA0B;AACvC;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA,cAAc,uBAAuB;AACrC,cAAc,uBAAuB;AACrC;AACA;AACA,cAAc,0BAA0B;AACxC,cAAc,0BAA0B;AACxC;AACA;AACA,cAAc,wBAAwB;AACtC,cAAc,0BAA0B;AACxC,cAAc,uBAAuB;AACrC,cAAc,uBAAuB;AACrC;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACO;AACP,aAAa,UAAU;AACvB;AACA,aAAa,SAAS;AACtB;AACA,aAAa,WAAW;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrEA;AACA,aAAa,0BAA0B;AACvC,aAAa,uBAAuB;AACpC;AACA,aAAa,gBAAgB;AAC7B;AACA,aAAa,QAAQ;AACrB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB;AACA,aAAa,QAAQ;AACrB,cAAc,cAAc;AAC5B;;AAEO;AACA;;AAEP;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa;AACb;AACO;AACP,UAAU;AACV;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB,eAAe;AACf;AACA;AACA,eAAe,OAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpDA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,8BAA8B;AAC3C;;AAEA;AACA,aAAa,oBAAoB;AACjC,aAAa,QAAQ;AACrB,aAAa,0DAA0D;AACvE,aAAa,8CAA8C;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,GAAG;AACd,WAAW,gBAAgB;AAC3B,aAAa;AACb;;AAEqC;AACL;;AAEhC;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;AAEA;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,sDAAO;AACtB;;AAEA;;AAEA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,SAAS;AAC1B,iBAAiB,gBAAgB;AACjC;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gDAAK;AACnB;AACA,WAAW;AACX;;AAEA;;AAEA;AACA,qBAAqB,aAAa;AAClC;AACA,qBAAqB,aAAa;AAClC;AACA,qBAAqB,QAAQ;AAC7B;AACA,qBAAqB,gBAAgB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACnKA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC;AACA,aAAa,wFAAwF;AACrG;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,yCAAyC;AACpD,aAAa;AACb;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1PA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,8BAA8B;AAC3C,aAAa,kDAAkD;AAC/D,aAAa,mCAAmC;AAChD;;AAE2E;;AAE9C;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,mCAAmC;AAClD,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,sEAAY;;AAElB;AACA,iBAAiB,MAAM;AACvB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxDA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC;AACA,aAAa,QAAQ;AACrB,aAAa,yBAAyB;AACtC;AACA,aAAa,wFAAwF;AACrG;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,MAAM;AACjB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC,WAAW,uBAAuB;AAClC,aAAa;AACb;;AAEO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,yCAAyC;AACpD,aAAa;AACb;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,aAAa,WAAW;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA,YAAY;AACZ,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1PA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA,aAAa,sBAAsB;AACnC,aAAa,wBAAwB;AACrC,aAAa,8BAA8B;AAC3C,aAAa,kCAAkC;AAC/C,aAAa,iCAAiC;AAC9C,aAAa,uCAAuC;AACpD,aAAa,yCAAyC;AACtD,aAAa,mCAAmC;AAChD;;AAEqC;AACL;;AAEhC;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,eAAe,MAAM;AACrB,eAAe,yCAAyC;AACxD,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,sDAAO;AACxB;;AAEA;;AAEA;AACA,iBAAiB,MAAM;AACvB,iBAAiB,SAAS;AAC1B,iBAAiB,gBAAgB;AACjC;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gDAAK;AACnB;AACA,WAAW;AACX;;AAEA;;AAEA;AACA,qBAAqB,aAAa;AAClC;AACA,qBAAqB,aAAa;AAClC;AACA,qBAAqB,QAAQ;AAC7B;AACA,qBAAqB,gBAAgB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJgC;AACU;;AAE1C;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB,sDAAsD,EAAE,KAAK;AAC7D;;AAEO;AACP,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAA8D;AACrF;;AAEO;AACP;AACA;;AAEO;AACP,qCAAqC,6CAAO;AAC5C;;AAEO;AACP,QAAQ,8CAAM,+BAA+B,6CAAO;AACpD;;AAEO;AACP;AACA;;AAEO;AACP;AACA,2DAA2D,IAAI,WAAW,IAAI;AAC9E;;AAEO;AACP;AACA,gGAAgG,KAAK;AACrG;;AAEO;AACP;AACA,oFAAoF,IAAI;AACxF,GAAG;AACH,+EAA+E,YAAY;AAC3F;AACA;;AAEO;AACP,kBAAkB;AAClB,2CAA2C,2CAAK;AAChD;;AAEA,2BAA2B,+CAAK;AACzB;AACP,kBAAkB;AAClB;AACA;;AAEO;AACP;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,IAAI;AACJ,kHAAkH,YAAY;AAC9H;AACA;AACA;;AAEA;;AAEO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS,8CAAM;AACf;;AAEA;AACA;AACA,+DAA+D,IAAI,eAAe,IAAI;AACtF;;AAEA;AACA;AACA,2GAA2G,KAAK;AAChH;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,6FAA6F,IAAI;AACjG,GAAG;AACH,wFAAwF,YAAY;AACpG;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,2HAA2H,YAAY;AACvI,IAAI;AACJ;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/J0B;AACG;;AAE7B;AACA,OAAO,iDAAS;AAChB,OAAO,kDAAU;AACjB,OAAO,mDAAW;AAClB;;AAEA,cAAc,iDAAS;AACvB,UAAU,iDAAS,aAAa,iDAAS,UAAU,iDAAS;AAC5D;AACA,yBAAyB,iDAAS;AAClC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACO;AACP,WAAW,4CAAe;AAC1B;AACA;;AAEA,QAAQ,gBAAgB;AACxB;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,YAAY,sBAAsB;AAClC;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA,WAAW,2CAAc;AACzB;;AAEA,QAAQ,gBAAgB;AACxB;AACA;AACA;;AAEA;AACA;;AAEO;AACP,WAAW,2CAAc;AACzB;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,GAAG;AACH,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,iDAAS;AAC1B;;AAEO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8BAA8B,iDAAS,KAAK,MAAM;AAClD,+BAA+B,iDAAS,KAAK,MAAM;;AAEnD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA,uCAAuC;AACvC;AACA,GAAG;AACH;AACA;;AAEA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACzNa;;AAEb;AACA;AACA,IAAI,mDAAmD;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,KAAK;AACrB,iBAAiB,MAAM;AACvB,6BAA6B,MAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAAe,CAAC,EAAC;;;;;;;;;;;;;;;;AC7GjB;AACA,aAAa,uBAAuB;AACpC,aAAa,uBAAuB;AACpC;AACA,aAAa,8BAA8B;AAC3C,aAAa,iBAAiB;AAC9B,aAAa,8BAA8B;AAC3C;;AAEA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;AACO;AACP;AACA,aAAa,gBAAgB;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC/EA;AACA,aAAa,uBAAuB;AACpC,aAAa,sCAAsC;AACnD;;AAEA,kBAAkB;;AAElB;AACA,cAAc,OAAO;AACrB,WAAW,GAAG;AACd,aAAa;AACb;AACO;AACP;AACA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACprHA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCZA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA","sources":["webpack://syntax/./node_modules/acorn-jsx/index.js","webpack://syntax/./node_modules/acorn-jsx/xhtml.js","webpack://syntax/./node_modules/alex/node_modules/is-buffer/index.js","webpack://syntax/./node_modules/array-iterate/index.js","webpack://syntax/./src/js/components/sidebar.js","webpack://syntax/./src/js/constants.js","webpack://syntax/./src/js/data/adverbs.js","webpack://syntax/./src/js/data/cliches.js","webpack://syntax/./src/js/data/fillers.js","webpack://syntax/./src/js/data/hedges.js","webpack://syntax/./src/js/data/passive.js","webpack://syntax/./src/js/data/simpler.js","webpack://syntax/./src/js/data/weasel.js","webpack://syntax/./src/js/parsers/adverbs.js","webpack://syntax/./src/js/parsers/cliches.js","webpack://syntax/./src/js/parsers/fillers.js","webpack://syntax/./src/js/parsers/hedges.js","webpack://syntax/./src/js/parsers/index.js","webpack://syntax/./src/js/parsers/passive.js","webpack://syntax/./src/js/parsers/readability.js","webpack://syntax/./src/js/parsers/sensitivity.js","webpack://syntax/./src/js/parsers/simpler.js","webpack://syntax/./src/js/parsers/weasel.js","webpack://syntax/./src/js/reading-score.js","webpack://syntax/./src/js/store/actions.js","webpack://syntax/./src/js/store/index.js","webpack://syntax/./src/js/store/reducer.js","webpack://syntax/./src/js/store/selectors.js","webpack://syntax/./src/js/subscribers/content.js","webpack://syntax/./src/js/subscribers/index.js","webpack://syntax/./src/js/tokenizer.js","webpack://syntax/./src/js/utils/strip-astrals.js","webpack://syntax/./src/js/utils/strip-html-comments.js","webpack://syntax/./src/js/utils/strip-html-entities.js","webpack://syntax/./src/js/utils/strip-spaces.js","webpack://syntax/./src/js/utils/strip-tags.js","webpack://syntax/./node_modules/debug/src/browser.js","webpack://syntax/./node_modules/debug/src/common.js","webpack://syntax/./node_modules/extend/index.js","webpack://syntax/./node_modules/format/format.js","webpack://syntax/./node_modules/hast-util-is-body-ok-link/index.js","webpack://syntax/./node_modules/hast-util-is-body-ok-link/node_modules/hast-util-has-property/index.js","webpack://syntax/./node_modules/hast-util-is-body-ok-link/node_modules/hast-util-is-element/convert.js","webpack://syntax/./node_modules/hast-util-is-body-ok-link/node_modules/hast-util-is-element/index.js","webpack://syntax/./node_modules/ms/index.js","webpack://syntax/./node_modules/parse-english/node_modules/nlcst-to-string/index.js","webpack://syntax/./node_modules/parse-latin/node_modules/nlcst-to-string/index.js","webpack://syntax/./node_modules/parse5/lib/common/doctype.js","webpack://syntax/./node_modules/parse5/lib/common/error-codes.js","webpack://syntax/./node_modules/parse5/lib/common/foreign-content.js","webpack://syntax/./node_modules/parse5/lib/common/html.js","webpack://syntax/./node_modules/parse5/lib/common/unicode.js","webpack://syntax/./node_modules/parse5/lib/extensions/error-reporting/mixin-base.js","webpack://syntax/./node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/location-info/parser-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js","webpack://syntax/./node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js","webpack://syntax/./node_modules/parse5/lib/parser/formatting-element-list.js","webpack://syntax/./node_modules/parse5/lib/parser/index.js","webpack://syntax/./node_modules/parse5/lib/parser/open-element-stack.js","webpack://syntax/./node_modules/parse5/lib/tokenizer/index.js","webpack://syntax/./node_modules/parse5/lib/tokenizer/named-entity-data.js","webpack://syntax/./node_modules/parse5/lib/tokenizer/preprocessor.js","webpack://syntax/./node_modules/parse5/lib/tree-adapters/default.js","webpack://syntax/./node_modules/parse5/lib/utils/merge-options.js","webpack://syntax/./node_modules/parse5/lib/utils/mixin.js","webpack://syntax/./node_modules/pluralize/pluralize.js","webpack://syntax/./node_modules/reading-time/lib/reading-time.js","webpack://syntax/./node_modules/sentence-tokenizer/lib/tokenizer.js","webpack://syntax/./node_modules/sentence-tokenizer/node_modules/debug/src/browser.js","webpack://syntax/./node_modules/sentence-tokenizer/node_modules/debug/src/common.js","webpack://syntax/./node_modules/unist-util-modify-children/index.js","webpack://syntax/./node_modules/unist-util-visit-children/index.js","webpack://syntax/external window \"lodash\"","webpack://syntax/external window [\"wp\",\"components\"]","webpack://syntax/external window [\"wp\",\"data\"]","webpack://syntax/external window [\"wp\",\"editPost\"]","webpack://syntax/external window [\"wp\",\"element\"]","webpack://syntax/external window [\"wp\",\"i18n\"]","webpack://syntax/external window [\"wp\",\"plugins\"]","webpack://syntax/external window [\"wp\",\"wordcount\"]","webpack://syntax/./node_modules/acorn/dist/acorn.mjs","webpack://syntax/./node_modules/afinn-165/index.js","webpack://syntax/./node_modules/alex/filter.js","webpack://syntax/./node_modules/alex/index.js","webpack://syntax/./node_modules/alex/node_modules/bail/index.js","webpack://syntax/./node_modules/alex/node_modules/is-plain-obj/index.js","webpack://syntax/./node_modules/alex/node_modules/mdast-util-from-markdown/dev/lib/index.js","webpack://syntax/./node_modules/alex/node_modules/mdast-util-to-string/index.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/constructs.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/create-tokenizer.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/initialize/content.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/initialize/document.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/initialize/flow.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/initialize/text.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/parse.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/postprocess.js","webpack://syntax/./node_modules/alex/node_modules/micromark/dev/lib/preprocess.js","webpack://syntax/./node_modules/alex/node_modules/remark-parse/index.js","webpack://syntax/./node_modules/alex/node_modules/remark-parse/lib/index.js","webpack://syntax/./node_modules/alex/node_modules/trough/index.js","webpack://syntax/./node_modules/alex/node_modules/unified/lib/index.js","webpack://syntax/./node_modules/alex/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/alex/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/alex/node_modules/vfile/lib/index.js","webpack://syntax/./node_modules/alex/node_modules/vfile/lib/minpath.browser.js","webpack://syntax/./node_modules/alex/node_modules/vfile/lib/minproc.browser.js","webpack://syntax/./node_modules/alex/node_modules/vfile/lib/minurl.browser.js","webpack://syntax/./node_modules/alex/node_modules/vfile/lib/minurl.shared.js","webpack://syntax/./node_modules/automated-readability/index.js","webpack://syntax/./node_modules/ccount/index.js","webpack://syntax/./node_modules/character-entities-html4/index.js","webpack://syntax/./node_modules/comma-separated-tokens/index.js","webpack://syntax/./node_modules/cuss/index.js","webpack://syntax/./node_modules/decode-named-character-reference/index.dom.js","webpack://syntax/./node_modules/dequal/dist/index.mjs","webpack://syntax/./node_modules/diff/lib/index.mjs","webpack://syntax/./node_modules/estree-util-is-identifier-name/index.js","webpack://syntax/./node_modules/estree-util-is-identifier-name/regex.js","webpack://syntax/./node_modules/estree-util-visit/color.browser.js","webpack://syntax/./node_modules/estree-util-visit/index.js","webpack://syntax/./node_modules/fault/index.js","webpack://syntax/./node_modules/hast-util-embedded/index.js","webpack://syntax/./node_modules/hast-util-from-parse5/lib/index.js","webpack://syntax/./node_modules/hast-util-has-property/index.js","webpack://syntax/./node_modules/hast-util-is-element/index.js","webpack://syntax/./node_modules/hast-util-parse-selector/index.js","webpack://syntax/./node_modules/hast-util-phrasing/index.js","webpack://syntax/./node_modules/hast-util-to-nlcst/lib/index.js","webpack://syntax/./node_modules/hast-util-to-string/index.js","webpack://syntax/./node_modules/hast-util-whitespace/index.js","webpack://syntax/./node_modules/hastscript/lib/core.js","webpack://syntax/./node_modules/hastscript/lib/html.js","webpack://syntax/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://syntax/./node_modules/hastscript/lib/svg.js","webpack://syntax/./node_modules/hedges/index.js","webpack://syntax/./node_modules/markdown-table/index.js","webpack://syntax/./node_modules/mdast-comment-marker/index.js","webpack://syntax/./node_modules/mdast-util-find-and-replace/index.js","webpack://syntax/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://syntax/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/index.js","webpack://syntax/./node_modules/mdast-util-frontmatter/index.js","webpack://syntax/./node_modules/mdast-util-gfm-autolink-literal/index.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/index.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://syntax/./node_modules/mdast-util-gfm-footnote/node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://syntax/./node_modules/mdast-util-gfm-strikethrough/index.js","webpack://syntax/./node_modules/mdast-util-gfm-strikethrough/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://syntax/./node_modules/mdast-util-gfm-strikethrough/node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://syntax/./node_modules/mdast-util-gfm-table/index.js","webpack://syntax/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://syntax/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://syntax/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://syntax/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/index.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://syntax/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://syntax/./node_modules/mdast-util-gfm/index.js","webpack://syntax/./node_modules/mdast-util-mdx-expression/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/character-entities-legacy/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/character-reference-invalid/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/is-alphabetical/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/is-alphanumerical/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/is-decimal/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/is-hexadecimal/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/parse-entities/lib/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/mdast-util-mdx-jsx/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/mdast-util-mdx/index.js","webpack://syntax/./node_modules/mdast-util-mdxjs-esm/index.js","webpack://syntax/./node_modules/mdast-util-to-nlcst/index.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/attention.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/autolink.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/blank-line.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/block-quote.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/character-escape.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/character-reference.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/code-fenced.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/code-indented.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/code-text.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/content.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/definition.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/heading-atx.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/html-flow.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/html-text.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/label-end.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/label-start-image.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/label-start-link.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/line-ending.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/list.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/setext-underline.js","webpack://syntax/./node_modules/micromark-core-commonmark/dev/lib/thematic-break.js","webpack://syntax/./node_modules/micromark-extension-frontmatter/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-frontmatter/dev/matters.js","webpack://syntax/./node_modules/micromark-extension-gfm-autolink-literal/dev/lib/html.js","webpack://syntax/./node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-gfm-footnote/dev/lib/html.js","webpack://syntax/./node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-gfm-strikethrough/dev/lib/html.js","webpack://syntax/./node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-gfm-table/dev/lib/html.js","webpack://syntax/./node_modules/micromark-extension-gfm-table/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-gfm-tagfilter/index.js","webpack://syntax/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/html.js","webpack://syntax/./node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-gfm/index.js","webpack://syntax/./node_modules/micromark-extension-mdx-expression/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/micromark-extension-mdx-jsx/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/micromark-extension-mdx-md/index.js","webpack://syntax/./node_modules/micromark-extension-mdxjs-esm/dev/lib/syntax.js","webpack://syntax/./node_modules/micromark-extension-mdxjs-esm/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/micromark-extension-mdxjs-esm/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/micromark-extension-mdxjs/index.js","webpack://syntax/./node_modules/micromark-extension-mdxjs/node_modules/acorn/dist/acorn.mjs","webpack://syntax/./node_modules/micromark-factory-destination/dev/index.js","webpack://syntax/./node_modules/micromark-factory-label/dev/index.js","webpack://syntax/./node_modules/micromark-factory-mdx-expression/dev/index.js","webpack://syntax/./node_modules/micromark-factory-mdx-expression/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/micromark-factory-mdx-expression/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/micromark-factory-space/dev/index.js","webpack://syntax/./node_modules/micromark-factory-title/dev/index.js","webpack://syntax/./node_modules/micromark-factory-whitespace/dev/index.js","webpack://syntax/./node_modules/micromark-util-character/dev/index.js","webpack://syntax/./node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js","webpack://syntax/./node_modules/micromark-util-chunked/dev/index.js","webpack://syntax/./node_modules/micromark-util-classify-character/dev/index.js","webpack://syntax/./node_modules/micromark-util-combine-extensions/index.js","webpack://syntax/./node_modules/micromark-util-decode-numeric-character-reference/dev/index.js","webpack://syntax/./node_modules/micromark-util-decode-string/dev/index.js","webpack://syntax/./node_modules/micromark-util-encode/index.js","webpack://syntax/./node_modules/micromark-util-events-to-acorn/dev/index.js","webpack://syntax/./node_modules/micromark-util-events-to-acorn/node_modules/unist-util-stringify-position/index.js","webpack://syntax/./node_modules/micromark-util-events-to-acorn/node_modules/vfile-message/index.js","webpack://syntax/./node_modules/micromark-util-html-tag-name/index.js","webpack://syntax/./node_modules/micromark-util-normalize-identifier/dev/index.js","webpack://syntax/./node_modules/micromark-util-resolve-all/index.js","webpack://syntax/./node_modules/micromark-util-sanitize-uri/dev/index.js","webpack://syntax/./node_modules/micromark-util-subtokenize/dev/index.js","webpack://syntax/./node_modules/micromark-util-symbol/codes.js","webpack://syntax/./node_modules/micromark-util-symbol/constants.js","webpack://syntax/./node_modules/micromark-util-symbol/types.js","webpack://syntax/./node_modules/micromark-util-symbol/values.js","webpack://syntax/./node_modules/nlcst-is-literal/index.js","webpack://syntax/./node_modules/nlcst-normalize/index.js","webpack://syntax/./node_modules/nlcst-search/index.js","webpack://syntax/./node_modules/nlcst-to-string/index.js","webpack://syntax/./node_modules/parse-english/index.js","webpack://syntax/./node_modules/parse-latin/lib/expressions.js","webpack://syntax/./node_modules/parse-latin/lib/index.js","webpack://syntax/./node_modules/parse-latin/lib/parser.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/break-implicit-sentences.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-affix-symbol.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-initialisms.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/merge-words.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/patch-position.js","webpack://syntax/./node_modules/parse-latin/lib/plugin/remove-empty-nodes.js","webpack://syntax/./node_modules/parse-latin/lib/tokenizer.js","webpack://syntax/./node_modules/polarity/emoji.js","webpack://syntax/./node_modules/polarity/index.js","webpack://syntax/./node_modules/property-information/index.js","webpack://syntax/./node_modules/property-information/lib/aria.js","webpack://syntax/./node_modules/property-information/lib/find.js","webpack://syntax/./node_modules/property-information/lib/hast-to-react.js","webpack://syntax/./node_modules/property-information/lib/html.js","webpack://syntax/./node_modules/property-information/lib/normalize.js","webpack://syntax/./node_modules/property-information/lib/svg.js","webpack://syntax/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://syntax/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://syntax/./node_modules/property-information/lib/util/create.js","webpack://syntax/./node_modules/property-information/lib/util/defined-info.js","webpack://syntax/./node_modules/property-information/lib/util/info.js","webpack://syntax/./node_modules/property-information/lib/util/merge.js","webpack://syntax/./node_modules/property-information/lib/util/schema.js","webpack://syntax/./node_modules/property-information/lib/util/types.js","webpack://syntax/./node_modules/property-information/lib/xlink.js","webpack://syntax/./node_modules/property-information/lib/xml.js","webpack://syntax/./node_modules/property-information/lib/xmlns.js","webpack://syntax/./node_modules/quotation/index.js","webpack://syntax/./node_modules/rehype-parse/lib/errors.js","webpack://syntax/./node_modules/rehype-parse/lib/index.js","webpack://syntax/./node_modules/rehype-retext/lib/index.js","webpack://syntax/./node_modules/remark-frontmatter/index.js","webpack://syntax/./node_modules/remark-gfm/index.js","webpack://syntax/./node_modules/remark-mdx/index.js","webpack://syntax/./node_modules/remark-message-control/index.js","webpack://syntax/./node_modules/remark-retext/index.js","webpack://syntax/./node_modules/remark-retext/lib/index.js","webpack://syntax/./node_modules/retext-english/index.js","webpack://syntax/./node_modules/retext-english/lib/index.js","webpack://syntax/./node_modules/retext-equality/en.js","webpack://syntax/./node_modules/retext-equality/index.js","webpack://syntax/./node_modules/retext-equality/lib/en.js","webpack://syntax/./node_modules/retext-equality/lib/factory.js","webpack://syntax/./node_modules/retext-equality/node_modules/unist-util-is/index.js","webpack://syntax/./node_modules/retext-profanities/en.js","webpack://syntax/./node_modules/retext-profanities/factory.js","webpack://syntax/./node_modules/retext-profanities/index.js","webpack://syntax/./node_modules/space-separated-tokens/index.js","webpack://syntax/./node_modules/stringify-entities/lib/constant/dangerous.js","webpack://syntax/./node_modules/stringify-entities/lib/core.js","webpack://syntax/./node_modules/stringify-entities/lib/index.js","webpack://syntax/./node_modules/stringify-entities/lib/util/format-basic.js","webpack://syntax/./node_modules/stringify-entities/lib/util/format-smart.js","webpack://syntax/./node_modules/stringify-entities/lib/util/to-decimal.js","webpack://syntax/./node_modules/stringify-entities/lib/util/to-hexadecimal.js","webpack://syntax/./node_modules/stringify-entities/lib/util/to-named.js","webpack://syntax/./node_modules/stringify-entities/node_modules/character-entities-legacy/index.js","webpack://syntax/./node_modules/unherit/index.js","webpack://syntax/./node_modules/unified-message-control/index.js","webpack://syntax/./node_modules/unified-message-control/node_modules/unist-util-visit/index.js","webpack://syntax/./node_modules/unist-util-position-from-estree/index.js","webpack://syntax/./node_modules/unist-util-position/index.js","webpack://syntax/./node_modules/unist-util-visit-parents/color.browser.js","webpack://syntax/./node_modules/unist-util-visit-parents/index.js","webpack://syntax/./node_modules/unist-util-visit-parents/node_modules/unist-util-is/index.js","webpack://syntax/./node_modules/unist-util-visit/index.js","webpack://syntax/./node_modules/unist-util-visit/node_modules/unist-util-is/index.js","webpack://syntax/./node_modules/unist-util-visit/node_modules/unist-util-visit-parents/color.browser.js","webpack://syntax/./node_modules/unist-util-visit/node_modules/unist-util-visit-parents/index.js","webpack://syntax/./node_modules/uvu/assert/index.mjs","webpack://syntax/./node_modules/uvu/diff/index.mjs","webpack://syntax/./node_modules/uvu/node_modules/kleur/index.mjs","webpack://syntax/./node_modules/vfile-location/index.js","webpack://syntax/./node_modules/vfile-sort/index.js","webpack://syntax/./node_modules/weasels/index.js","webpack://syntax/./node_modules/web-namespaces/index.js","webpack://syntax/webpack/bootstrap","webpack://syntax/webpack/runtime/compat get default export","webpack://syntax/webpack/runtime/define property getters","webpack://syntax/webpack/runtime/hasOwnProperty shorthand","webpack://syntax/webpack/runtime/make namespace object","webpack://syntax/./src/js/editor.js"],"sourcesContent":["'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","'use strict'\n\nmodule.exports = iterate\n\nvar own = {}.hasOwnProperty\n\nfunction iterate(values, callback, context) {\n  var index = -1\n  var result\n\n  if (!values) {\n    throw new Error('Iterate requires that |this| not be ' + values)\n  }\n\n  if (!own.call(values, 'length')) {\n    throw new Error('Iterate requires that |this| has a `length`')\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('`callback` must be a function')\n  }\n\n  // The length might change, so we do not cache it.\n  while (++index < values.length) {\n    // Skip missing values.\n    if (!(index in values)) {\n      continue\n    }\n\n    result = callback.call(context, values[index], index, values)\n\n    // If `callback` returns a `number`, move `index` over to `number`.\n    if (typeof result === 'number') {\n      // Make sure that negative numbers do not break the loop.\n      if (result < 0) {\n        index = 0\n      }\n\n      index = result - 1\n    }\n  }\n}\n","import { __ } from '@wordpress/i18n';\nimport { PluginSidebar } from '@wordpress/edit-post';\nimport { PanelBody, PanelRow, ToggleControl } from '@wordpress/components';\nimport { registerPlugin } from '@wordpress/plugins';\nimport { useSelect, select, dispatch } from '@wordpress/data';\n\nimport {\n\tPROBLEM_TYPES_TO_LABEL,\n\tBLOCK_TYPE_CONTENT_ATTRIBUTE,\n} from '../constants';\n\nconst AccessPanel = () => {\n\tconst {\n\t\treadingTime,\n\t\tscore,\n\t\tpolarity,\n\t} = useSelect((select) => select('writers-blocks/editor').getReadability());\n\tconst problems = useSelect((select) => {\n\t\tconst currentProblems = select('writers-blocks/editor').getProblems();\n\n\t\treturn {\n\t\t\tadverb: currentProblems.filter(({ type }) => type === 'adverb'),\n\t\t\tweasel: currentProblems.filter(({ type }) => type === 'weasel'),\n\t\t\thedge: currentProblems.filter(({ type }) => type === 'hedge'),\n\t\t\tfiller: currentProblems.filter(({ type }) => type === 'filler'),\n\t\t\tprofanity: currentProblems.filter(({ type }) => type === 'profanity'),\n\t\t\tequality: currentProblems.filter(({ type }) => type === 'equality'),\n\t\t\tcliche: currentProblems.filter(({ type }) => type === 'cliche'),\n\t\t\tpassive: currentProblems.filter(({ type }) => type === 'passive'),\n\t\t\treadability: currentProblems.filter(({ type }) => type.includes('readability')),\n\t\t\tsimpler: currentProblems.filter(({ type }) => type === 'simpler'),\n\t\t};\n\t});\n\tconst { typesToShow: SHOWN_ANNOTATION_TYPES } = useSelect((select) => select('writers-blocks/editor').getUserSettings());\n\n\treturn (\n\t\t<>\n\t\t\t<PluginSidebar\n\t\t\t\tname=\"writers-blocks\"\n\t\t\t\ticon=\"text\"\n\t\t\t\ttitle={__('Writer\\'s Blocks', 'writers-blocks')}\n\t\t\t>\n\t\t\t\t<PanelBody title={__('Readability', 'writers-blocks')}>\n\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t<span>Reading time</span>\n\t\t\t\t\t\t<h2 style={{margin: 0}}>{(readingTime || 0) >= 1 ? `${\n\t\t\t\t\t\t\tMath.round(readingTime)} minute${Math.round((readingTime || 0)) > 1 ? 's' : ''\n\t\t\t\t\t\t}` : 'Less than a minute'}</h2>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t<span>Grade</span>\n\t\t\t\t\t\t<h2 style={{margin: 0}}>{score || 0}</h2>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t\t<PanelRow>\n\t\t\t\t\t\t<span>Polarity</span>\n\t\t\t\t\t\t<h2 style={{margin: 0}}>{polarity || 0}</h2>\n\t\t\t\t\t</PanelRow>\n\t\t\t\t</PanelBody>\n\t\t\t\t<PanelBody title={__('Suggestions', 'writers-blocks')}>\n\t\t\t\t\t{\n\t\t\t\t\t\tObject.keys(PROBLEM_TYPES_TO_LABEL).map((type) => (\n\t\t\t\t\t\t\t<PanelRow key={type}>\n\t\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\t\tlabel={PROBLEM_TYPES_TO_LABEL[type].label}\n\t\t\t\t\t\t\t\t\thelp={PROBLEM_TYPES_TO_LABEL[type].help(problems[type].length)}\n\t\t\t\t\t\t\t\t\tchecked={SHOWN_ANNOTATION_TYPES[type]}\n\t\t\t\t\t\t\t\t\tonChange={(checked) => {\n\t\t\t\t\t\t\t\t\t\tdispatch('writers-blocks/editor').updateUserSettings({\n\t\t\t\t\t\t\t\t\t\t\ttypesToShow: {\n\t\t\t\t\t\t\t\t\t\t\t\t...SHOWN_ANNOTATION_TYPES,\n\t\t\t\t\t\t\t\t\t\t\t\t[type]: checked,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t(PROBLEM_TYPES_TO_LABEL[type].source || [type]).forEach((source) => {\n\t\t\t\t\t\t\t\t\t\t\tif (checked) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst problems = select('writers-blocks/editor').getProblemsByType(source);\n\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tproblems.forEach(({ blockId, blockName, type, index, offset }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdispatch('core/annotations').__experimentalAddAnnotation({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsource: `writers-blocks--${type}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tblockClientId: blockId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trichTextIdentifier: BLOCK_TYPE_CONTENT_ATTRIBUTE[blockName],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstart: index,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend: offset,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch( \"core/annotations\" ).__experimentalRemoveAnnotationsBySource( `writers-blocks--${source}` );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</PanelRow>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</PanelBody>\n\t\t\t</PluginSidebar>\n\t\t</>\n\t);\n};\n\n/**\n * Register Access Panel Plugin\n */\nregisterPlugin('writers-blocks', {\n\trender: AccessPanel,\n});\n","import { __ } from '@wordpress/i18n';\n\nexport const ALLOWED_BLOCKS = [\n\t'core/paragraph',\n\t'core/heading',\n\t'core/list',\n\t'core/quote',\n\t'core/pullquote',\n\t'core/verse',\n\t'core/media-text',\n\t'core/preformatted',\n];\n\nexport const BLOCK_TYPE_CONTENT_ATTRIBUTE = {\n\t'core/paragraph': 'content',\n\t'core/list': 'values',\n};\n\nexport const PROBLEM_TYPES = [\n\t'simpler',\n\t'adverb',\n\t'hedge',\n\t'weasel',\n\t'passive',\n\t'readability-hard',\n\t'readability-very-hard',\n\t'so',\n\t'filler',\n\t'cliche',\n\t'equality',\n\t'profanity',\n];\n\nexport const PROBLEM_TYPES_TO_LABEL = {\n\tsimpler: {\n\t\tlabel: __('Simpler Words', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} simpler words`,\n\t},\n\tadverb: {\n\t\tlabel: __('Adverbs', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} adverbs`,\n\t},\n\thedge: {\n\t\tlabel: __('Hedge Words', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} hedge words`,\n\t},\n\tweasel: {\n\t\tlabel: __('Weasel Words', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} weasel words`,\n\t},\n\tpassive: {\n\t\tlabel: __('Passive Voice', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} uses of passive voice`,\n\t},\n\treadability: {\n\t\tlabel: __('Readability', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} difficult to read sentences`,\n\t\tsource: [\n\t\t\t'readability-hard',\n\t\t\t'readability-very-hard',\n\t\t],\n\t},\n\tfiller: {\n\t\tlabel: __('Filler Words', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} filler words`,\n\t},\n\tcliche: {\n\t\tlabel: __('Cliché Phrases', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} cliché phrases`,\n\t},\n\tequality: {\n\t\tlabel: __('Inclusive Language', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} uses of non-inclusive language`,\n\t},\n\tprofanity: {\n\t\tlabel: __('Profanity', 'writers-blocks'),\n\t\thelp: (number) => `Found ${number} uses of profanity`,\n\t},\n};\n","export default [\n\t'absolutel',\n\t'accidentall',\n\t'additionall',\n\t'allegedl',\n\t'alternativel',\n\t'angril',\n\t'anxiousl',\n\t'approximatel',\n\t'awkwardl',\n\t'badl',\n\t'barel',\n\t'beautifull',\n\t'blindl',\n\t'boldl',\n\t'bravel',\n\t'brightl',\n\t'briskl',\n\t'bristl',\n\t'bubbl',\n\t'busil',\n\t'calml',\n\t'carefull',\n\t'carelessl',\n\t'cautiousl',\n\t'cheerfull',\n\t'clearl',\n\t'closel',\n\t'coldl',\n\t'completel',\n\t'consequentl',\n\t'correctl',\n\t'courageousl',\n\t'crinkl',\n\t'cruell',\n\t'crumbl',\n\t'cuddl',\n\t'currentl',\n\t'daringl',\n\t'deadl',\n\t'definitel',\n\t'deliberatel',\n\t'doubtfull',\n\t'dumbl',\n\t'eagerl',\n\t'earl',\n\t'easil',\n\t'elegantl',\n\t'enormousl',\n\t'enthusiasticall',\n\t'equall',\n\t'especiall',\n\t'eventuall',\n\t'exactl',\n\t'exceedingl',\n\t'exclusivel',\n\t'extremel',\n\t'fairl',\n\t'faithfull',\n\t'fatall',\n\t'fiercel',\n\t'finall',\n\t'fondl',\n\t'foolishl',\n\t'fortunatel',\n\t'frankl',\n\t'franticall',\n\t'generousl',\n\t'gentl',\n\t'giggl',\n\t'gladl',\n\t'gracefull',\n\t'greedil',\n\t'happil',\n\t'hardl',\n\t'hastil',\n\t'healthil',\n\t'heartil',\n\t'helpfull',\n\t'honestl',\n\t'hourl',\n\t'hungril',\n\t'hurriedl',\n\t'immediatel',\n\t'impatientl',\n\t'inadequatel',\n\t'ingeniousl',\n\t'innocentl',\n\t'inquisitivel',\n\t'interestingl',\n\t'irritabl',\n\t'jiggl',\n\t'joyousl',\n\t'justl',\n\t'kindl',\n\t'largel',\n\t'latel',\n\t'lazil',\n\t'likel',\n\t'literall',\n\t'lonel',\n\t'loosel',\n\t'loudl',\n\t'loudl',\n\t'luckil',\n\t'madl',\n\t'man',\n\t'mentall',\n\t'mildl',\n\t'mortall',\n\t'mostl',\n\t'mysteriousl',\n\t'neatl',\n\t'nervousl',\n\t'noisil',\n\t'normall',\n\t'obedientl',\n\t'occasionall',\n\t'onl',\n\t'openl',\n\t'painfull',\n\t'particularl',\n\t'patientl',\n\t'perfectl',\n\t'politel',\n\t'poorl',\n\t'powerfull',\n\t'presumabl',\n\t'previousl',\n\t'promptl',\n\t'punctuall',\n\t'quarterl',\n\t'quickl',\n\t'quietl',\n\t'rapidl',\n\t'rarel',\n\t'reall',\n\t'recentl',\n\t'recklessl',\n\t'regularl',\n\t'relativel',\n\t'reluctantl',\n\t'remarkabl',\n\t'repeatedl',\n\t'rightfull',\n\t'roughl',\n\t'rudel',\n\t'sadl',\n\t'safel',\n\t'selfishl',\n\t'sensibl',\n\t'seriousl',\n\t'sharpl',\n\t'shortl',\n\t'shyl',\n\t'significantl',\n\t'silentl',\n\t'simpl',\n\t'sleepil',\n\t'slowl',\n\t'smartl',\n\t'smell',\n\t'smoothl',\n\t'softl',\n\t'solemnl',\n\t'sparkl',\n\t'speedil',\n\t'stealthil',\n\t'sternl',\n\t'stupidl',\n\t'substantiall',\n\t'successfull',\n\t'suddenl',\n\t'surprisingl',\n\t'suspiciousl',\n\t'swiftl',\n\t'tenderl',\n\t'tensel',\n\t'thoughtfull',\n\t'tightl',\n\t'timel',\n\t'truthfull',\n\t'unexpectedl',\n\t'unfortunatel',\n\t'usuall',\n\t'ver',\n\t'victoriousl',\n\t'violentl',\n\t'vivaciousl',\n\t'warml',\n\t'waverl',\n\t'weakl',\n\t'wearil',\n\t'wildl',\n\t'wisel',\n\t'worldl',\n\t'wrinkl'\n];\n","export default [\n\t'ace in the hole',\n\t'ace up (his|her) sleeve',\n\t'afraid of (his|her) own shadow',\n\t'against all odds',\n\t'air (your|my) dirty laundry',\n\t'all fun and games',\n\t'all in a days work',\n\t'all intents and purposes',\n\t'all talk, no action',\n\t'all thumbs',\n\t'all (\\\\w+) eggs in one basket',\n\t'alls fair in love and war',\n\t'alls well that ends well',\n\t'almighty dollar',\n\t'arm and a leg',\n\t'axe to grind',\n\t'another day, another dollar',\n\t'are what you eat',\n\t'armed to the teeth',\n\t'avoid like the plague',\n\t'babe in the woods',\n\t'back against the wall',\n\t'back in the saddle',\n\t'back to square one',\n\t'back to the drawing board',\n\t'bad to the bone',\n\t'badge of honor',\n\t'bald-faced liar',\n\t'ballpark figure',\n\t'banging (your|my) head against a brick wall',\n\t'baptism by fire',\n\t'bark is worse than (his|her) bite',\n\t'barking up the wrong tree',\n\t'bat out of hell',\n\t'be all and end all',\n\t'beat a dead horse',\n\t'beat around the bush',\n\t'bee in her bonnet',\n\t'been there, done that',\n\t'beg to differ',\n\t'beggars cant be choosers',\n\t'behind the eight ball',\n\t'belly up',\n\t'bend over backwards',\n\t'benefit of the doubt',\n\t'bent out of shape',\n\t'best foot forward',\n\t'best of my knowledge',\n\t'best thing since sliced bread',\n\t'bet (your|my) bottom dollar',\n\t'better half',\n\t'better late than never',\n\t'better mousetrap',\n\t'better safe than sorry',\n\t'between a rock and a hard place',\n\t'beyond the pale',\n\t'bide (your|my) time',\n\t'big as life',\n\t'big cheese',\n\t'big fish in a small pond',\n\t'big man on campus',\n\t'the harder they fall',\n\t'bird in the hand',\n\t'birds and the bees',\n\t'birds eye view',\n\t'birds of a feather flock together',\n\t'bite the hand that feeds',\n\t'bite the bullet',\n\t'bite the dust',\n\t'bitten off more than he can chew',\n\t'black as coal',\n\t'black as pitch',\n\t'black as the ace of spades',\n\t'blast from the past',\n\t'bleeding heart',\n\t'blessing in disguise',\n\t'blind ambition',\n\t'blind as a bat',\n\t'blind leading the blind',\n\t'blood boil',\n\t'blood is thicker than water',\n\t'blood sweat and tears',\n\t'blow off steam',\n\t'blow (your|my) own horn',\n\t'blushing bride',\n\t'boils down to',\n\t'bone to pick',\n\t'bored stiff',\n\t'bored to tears',\n\t'born every minute',\n\t'bottomless pit',\n\t'boys will be boys',\n\t'brick short',\n\t'bright and early',\n\t'bring to the table',\n\t'brings home the bacon',\n\t'broad across the beam',\n\t'broken record',\n\t'bull by the horns',\n\t'bull by the horns',\n\t'bull in a china shop',\n\t'burn the midnight oil',\n\t'burn (your|my) bridges',\n\t'burning question',\n\t'burning the candle at both ends',\n\t'burst (your|my) bubble',\n\t'bury the hatchet',\n\t'busy as a bee',\n\t'by hook or by crook',\n\t'call a spade a spade',\n\t'called onto the carpet',\n\t'calm before the storm',\n\t'can of worms',\n\t'can run, but you cant hide',\n\t'cant cut the mustard',\n\t'cant hold a candle to',\n\t'case of mistaken identity',\n\t'cat got (your|my) tongue',\n\t'cat out of the bag',\n\t'cart before the horse',\n\t'caught in the crossfire',\n\t'caught red handed',\n\t'caught red-handed',\n\t'caught with (his|her) pants down',\n\t'champing at the bit',\n\t'checkered past',\n\t'chip off the old block',\n\t'chip on (his|her) shoulder',\n\t'chomping at the bit',\n\t'chomping at the bit',\n\t'clean slate',\n\t'cleanliness is next to godliness',\n\t'clear as a bell',\n\t'clear as mud',\n\t'close to the vest',\n\t'cloud nine',\n\t'cock and bull story',\n\t'cold shoulder',\n\t'come hell or high water',\n\t'cost a kings ransom',\n\t'count (your|my) blessings',\n\t'count (your|my) chickens before theyre hatched',\n\t'cows come home',\n\t'crack of dawn',\n\t'crash course',\n\t'creature comforts',\n\t'cross that bridge when we come to it',\n\t'crow flies',\n\t'cry (his|her) eyes out',\n\t'cry like a baby',\n\t'cry me a river',\n\t'crying over (\\\\w+) milk',\n\t'crystal clear',\n\t'curiosity killed the cat',\n\t'cut and dried',\n\t'cut through the red tape',\n\t'cut to the chase',\n\t'cute as a bugs ear',\n\t'cute as a button',\n\t'cute as a puppy',\n\t'cuts to the quick',\n\t'dark and stormy night',\n\t'dark before the dawn',\n\t'day in, day out',\n\t'dead as a doornail',\n\t'devil in the details',\n\t'devil is in the details',\n\t'devils in the detail',\n\t'dime a dozen',\n\t'divide and conquer',\n\t'dog and pony show',\n\t'dog days',\n\t'dog eat dog',\n\t'dog tired',\n\t'down and out',\n\t'down at the heels',\n\t'down in the dumps',\n\t'down on (his|her) luck',\n\t'down the hatch',\n\t'down to earth',\n\t'draw the line',\n\t'dreams are made of',\n\t'dressed to kill',\n\t'dressed to the nines',\n\t'drives me up the wall',\n\t'dull as dishwater',\n\t'dyed in the wool',\n\t'each (his|her) own',\n\t'eagle eye',\n\t'ear to the ground',\n\t'early bird catches the worm',\n\t'earn (his|her) keep',\n\t'easier said than done',\n\t'easy as 1-2-3',\n\t'easy as pie',\n\t'eat (your|my) heart out',\n\t'eat (your|my) words',\n\t'eleventh hour',\n\t'end of the day',\n\t'enough to piss off the Pope',\n\t'even the playing field',\n\t'every dog has its day',\n\t'every fiber of my being',\n\t'everything but the kitchen sink',\n\t'eye for an eye',\n\t'eye to eye',\n\t'eyes in the back of (his|her) head',\n\t'facts of life',\n\t'fair weather friend',\n\t'fall by the wayside',\n\t'fan the flames',\n\t'far cry',\n\t'feast or famine',\n\t'feather in (his|her) cap',\n\t'feather (your|my) nest',\n\t'few and far between',\n\t'fifteen minutes of fame',\n\t'filthy vermin',\n\t'fine kettle of fish',\n\t'fish out of water',\n\t'fishing for a compliment',\n\t'fit as a fiddle',\n\t'fit the bill',\n\t'fit to be tied',\n\t'flat as a pancake',\n\t'flip (your|my) lid',\n\t'flog a dead horse',\n\t'fly by night',\n\t'fly the coop',\n\t'follow (your|my) heart',\n\t'foot in the grave',\n\t'for all intents and purposes',\n\t'for the birds',\n\t'for what its worth',\n\t'force of nature',\n\t'force to be reckoned with',\n\t'forgive and forget',\n\t'fox in the henhouse',\n\t'free and easy',\n\t'free as a bird',\n\t'fresh as a daisy',\n\t'full steam ahead',\n\t'fun in the sun',\n\t'garbage in, garbage out',\n\t'get (his|her) back up',\n\t'get a kick out of',\n\t'get a leg up',\n\t'get down and dirty',\n\t'get the lead out',\n\t'get to the bottom of',\n\t'get (your|my) feet wet',\n\t'gets my goat',\n\t'gilding the lily',\n\t'give and take',\n\t'go against the grain',\n\t'go for broke',\n\t'go him one better',\n\t'go the extra mile',\n\t'go with the flow',\n\t'goes around comes around',\n\t'goes without saying',\n\t'good as gold',\n\t'good deed for the day',\n\t'good soul',\n\t'good things come to those who wait',\n\t'good time was had by all',\n\t'grass is always greener',\n\t'greek to me',\n\t'green thumb',\n\t'green-eyed monster',\n\t'grist for the mill',\n\t'growing like a weed',\n\t'hair of the dog',\n\t'hand over fist',\n\t'hand to mouth',\n\t'happy as a clam',\n\t'hasnt a clue',\n\t'have a nice day',\n\t'have high hopes',\n\t'have the last laugh',\n\t'havent got a row to hoe',\n\t'head honcho',\n\t'hear a pin drop',\n\t'heard it through the grapevine',\n\t'hearts content',\n\t'hell or high water',\n\t'hem and haw',\n\t'high and dry',\n\t'high and mighty',\n\t'high as a kite',\n\t'high horse',\n\t'hit paydirt',\n\t'hold (your|my) head up high',\n\t'hold (your|my) horses',\n\t'hold (your|my) own',\n\t'hold (your|my) tongue',\n\t'honest as the day is long',\n\t'hope in hell',\n\t'horse of a different color',\n\t'hot under the collar',\n\t'hurts me worse than it hurts you',\n\t'icing on the cake',\n\t'if the shoe fits',\n\t'if the shoe were on the other foot',\n\t'ignorance is bliss',\n\t'in a jam',\n\t'in a jiffy',\n\t'in a nutshell',\n\t'in a pigs eye',\n\t'in a pinch',\n\t'in a word',\n\t'in hot water',\n\t'in over their head',\n\t'in the gutter',\n\t'in the nick of time',\n\t'in the thick of it',\n\t'in their element',\n\t'in this day and age',\n\t'in (your|my) dreams',\n\t'insult to injury',\n\t'it rains, it pours',\n\t'ivory tower',\n\t'jack of all trades',\n\t'jockey for position',\n\t'jog (your|my) memory',\n\t'joined at the hip',\n\t'judge a book by its cover',\n\t'judge a book by its cover',\n\t'jump down (your|my) throat',\n\t'jump in with both feet',\n\t'jump on the bandwagon',\n\t'jump the gun',\n\t'jump to conclusions',\n\t'just a hop, skip, and a jump',\n\t'just the ticket',\n\t'justice is blind',\n\t'keep a stiff upper lip',\n\t'keep an eye on',\n\t'keep it simple, stupid',\n\t'keep the home fires burning',\n\t'keep up with the Joneses',\n\t'keep (your|my) chin up',\n\t'keep (your|my) fingers crossed',\n\t'kick (his|her) lights out',\n\t'kick the bucket',\n\t'kick up (your|my) heels',\n\t'kick (your|my) feet up',\n\t'kid in a candy store',\n\t'kill two birds with one stone',\n\t'kind soul',\n\t'kiss of death',\n\t'kitchen sink',\n\t'knock (his|her) block off',\n\t'knock it out of the park',\n\t'knock on wood',\n\t'knock (your|my) socks off',\n\t'know him from Adam',\n\t'know the ropes',\n\t'know the score',\n\t'knuckle down',\n\t'knuckle sandwich',\n\t'knuckle under',\n\t'labor of love',\n\t'land on (your|my) feet',\n\t'lap of luxury',\n\t'last but not least',\n\t'last hurrah',\n\t'last-ditch effort',\n\t'law of the jungle',\n\t'law of the land',\n\t'lay down the law',\n\t'leaps and bounds',\n\t'let off some steam',\n\t'let the good times roll',\n\t'let (your|my) hair down',\n\t'letter perfect',\n\t'level the playing field',\n\t'lick (your|my) wounds',\n\t'lies like a rug',\n\t'lifes a bitch',\n\t'lifes a grind',\n\t'light at the end of the tunnel',\n\t'lighter than a feather',\n\t'lighter than air',\n\t'like clockwork',\n\t'like death warmed over',\n\t'like father like son',\n\t'like the plague',\n\t'like theres no tomorrow',\n\t'lions share',\n\t'live and learn',\n\t'live and let live',\n\t'long and short of it',\n\t'long lost love',\n\t'look a gift horse in the mouth',\n\t'look before you leap',\n\t'look down (your|my) nose',\n\t'loose cannon',\n\t'lose (your|my) head',\n\t'lose (your|my) temper',\n\t'loud as a horn',\n\t'lounge lizard',\n\t'love lost',\n\t'loved and lost',\n\t'low man on the totem pole',\n\t'low-hanging fruit',\n\t'luck of the draw',\n\t'luck of the irish',\n\t'luck would have it',\n\t'make hay while the sun shines',\n\t'make my day',\n\t'make the best of a bad situation',\n\t'make the best of it',\n\t'man of few words',\n\t'mans best friend',\n\t'mark my words',\n\t'missed the boat',\n\t'moment in the sun',\n\t'moment of glory',\n\t'moment of truth',\n\t'money to burn',\n\t'more power to you',\n\t'more the merrier',\n\t'movers and shakers',\n\t'my wits end',\n\t'naked as a jaybird',\n\t'naked truth',\n\t'neat as a pin',\n\t'needless to say',\n\t'neither here nor there',\n\t'never look back',\n\t'never say never',\n\t'nick of time',\n\t'nip and tuck',\n\t'nip it in the bud',\n\t'no accounting for taste',\n\t'no guts, no glory',\n\t'no pain, no gain',\n\t'nose to the grindstone',\n\t'not a minutes peace',\n\t'not in my backyard',\n\t'nothing to sneeze at',\n\t'nothing ventured nothing gained',\n\t'now were cooking',\n\t'off the top of my head',\n\t'off the wagon',\n\t'off the wall',\n\t'old as time',\n\t'old hat',\n\t'older and wiser',\n\t'older than dirt',\n\t'on a roll',\n\t'on pins and needles',\n\t'on the bandwagon',\n\t'on the money',\n\t'on the nose',\n\t'on the rocks',\n\t'on the spot',\n\t'on the tip of my tongue',\n\t'on the wagon',\n\t'once bitten, twice shy',\n\t'one bad apple doesnt spoil the bushel',\n\t'one in a million',\n\t'one red cent',\n\t'only a matter of time',\n\t'only game in town',\n\t'open the flood gates',\n\t'opportunity doesnt knock twice',\n\t'out of pocket',\n\t'out of sight, out of mind',\n\t'out of the frying pan into the fire',\n\t'out of the woods',\n\t'out on a limb',\n\t'over a barrel',\n\t'over the hump',\n\t'pain and suffering',\n\t'pain in the butt',\n\t'pain in the neck',\n\t'panic button',\n\t'par for the course',\n\t'part and parcel',\n\t'party pooper',\n\t'pass the buck',\n\t'patience is a virtue',\n\t'paved with good intentions',\n\t'pay through the nose',\n\t'peas in a pod',\n\t'pedal to the metal',\n\t'penny pincher',\n\t'penny saved is a penny earned',\n\t'perfect storm',\n\t'phone it in',\n\t'pig in a poke',\n\t'pile it on',\n\t'pillar of the community',\n\t'pin (your|my) hopes on',\n\t'pitter patter of little feet',\n\t'plain as day',\n\t'plain as the nose on (your|my) face',\n\t'play by the rules',\n\t'play (your|my) cards right',\n\t'playing the field',\n\t'playing with a full deck',\n\t'playing with fire',\n\t'pleased as punch',\n\t'plenty of fish in the (sea|pond)',\n\t'point in time',\n\t'poor as a church mouse',\n\t'pot calling the kettle black',\n\t'pull a fast one',\n\t'pull (your|my) punches',\n\t'pulled the wool over',\n\t'pulling (your|my) leg',\n\t'pure as the driven snow',\n\t'push comes to shove',\n\t'put one over',\n\t'put (your|my) foot down',\n\t'quick as a bunny',\n\t'quick as a lick',\n\t'quick as a wink',\n\t'quick as lightning',\n\t'quiet as a dormouse',\n\t'quiet as a mouse',\n\t'rags to riches',\n\t'raining buckets',\n\t'raining cats and dogs',\n\t'rank and file',\n\t'read between the lines',\n\t'real McCoy',\n\t'real deal',\n\t'reap what you sow',\n\t'red as a beet',\n\t'red carpet treatment',\n\t'red herring',\n\t'reinvent the wheel',\n\t'rich and famous',\n\t'rings a bell',\n\t'ripped me off',\n\t'rise and shine',\n\t'road to hell is paved',\n\t'rob Peter to pay Paul',\n\t'rock the boat',\n\t'rock the boat',\n\t'roll over in the grave',\n\t'rub the wrong way',\n\t'running in circles',\n\t'salt of the earth',\n\t'same old story',\n\t'scared of (his|her) own shadow',\n\t'scared out of (his|her) wits',\n\t'scared stiff',\n\t'scared to death',\n\t'sealed with a kiss',\n\t'second to none',\n\t'seen the light',\n\t'seize the day',\n\t'set the record straight',\n\t'set (your|my) teeth on edge',\n\t'sharp as a tack',\n\t'shoot for the moon',\n\t'shoot the breeze',\n\t'shot in the dark',\n\t'shoulder to the wheel',\n\t'sick as a dog',\n\t'sigh of relief',\n\t'signed, sealed, and delivered',\n\t'sink or swim',\n\t'six of one, half a dozen of another',\n\t'skating on thin ice',\n\t'skin off my back',\n\t'sleeping dogs lie',\n\t'slept like a log',\n\t'slinging mud',\n\t'slippery as an eel',\n\t'slow as molasses in January',\n\t'small world',\n\t'smooth as a babys bottom',\n\t'snug as a bug in a rug',\n\t'sow wild oats',\n\t'spare the rod, spoil the child',\n\t'speak of the devil',\n\t'spilled the beans',\n\t'spinning (your|my) wheels',\n\t'spitting image of',\n\t'spoke with relish',\n\t'spring to life',\n\t'squeaky wheel gets the grease',\n\t'stands out like a sore thumb',\n\t'start from scratch',\n\t'step on anyones toes',\n\t'stick in the mud',\n\t'still waters run deep',\n\t'stitch in time',\n\t'stone unturned',\n\t'stop and smell the roses',\n\t'straw that broke the camels back',\n\t'strong as an ox',\n\t'stubborn as a mule',\n\t'stuffed shirt',\n\t'sweating blood',\n\t'sweating bullets',\n\t'take a load off',\n\t'take any wooden nickels',\n\t'take one for the team',\n\t'take the bait',\n\t'take the plunge',\n\t'takes all kinds',\n\t'takes one to know one',\n\t'taking candy from a baby',\n\t'talk turkey',\n\t'the end of the world',\n\t'thick as a brick',\n\t'thick as thieves',\n\t'thin ice',\n\t'think outside of the box',\n\t'third times the charm',\n\t'this day and age',\n\t'three sheets to the wind',\n\t'three strikes against (him|her)',\n\t'throw in the towel',\n\t'tighter than a drum',\n\t'till the fat lady sings',\n\t'time and time again',\n\t'time is of the essence',\n\t'time like the present',\n\t'tip of the iceberg',\n\t'toe the line',\n\t'tongue.in.cheek',\n\t'too good to be true',\n\t'too hot to handle',\n\t'too numerous to mention',\n\t'touch with a ten foot pole',\n\t'tough as nails',\n\t'tough row to hoe',\n\t'trial by fire',\n\t'trials and tribulations',\n\t'tried and true',\n\t'trip down memory lane',\n\t'twist of fate',\n\t'two cents worth',\n\t'two to tango',\n\t'ugly as sin',\n\t'under (his|her) thumb',\n\t'under the counter',\n\t'under the gun',\n\t'under the same roof',\n\t'until the cows come home',\n\t'unvarnished truth',\n\t'up the creek',\n\t'up the wall',\n\t'up to (his|her) ears in (\\\\w+)',\n\t'uphill battle',\n\t'upper crust',\n\t'upset the applecart',\n\t'v for victory',\n\t'vain attempt',\n\t'vain effort',\n\t'vanquish the enemy',\n\t'vested interest',\n\t'waiting for the other shoe to drop',\n\t'wakeup call',\n\t'warm welcome',\n\t'watch (your|my) ps and qs',\n\t'watch (your|my) tongue',\n\t'watching the clock',\n\t'water under the bridge',\n\t'way to skin a cat',\n\t'weather the storm',\n\t'weed them out',\n\t'week of Sundays',\n\t'wet behind the ears',\n\t'what the cat dragged in',\n\t'what you see is what you get',\n\t'when the cats away',\n\t'when the going gets tough, the tough get going',\n\t'white as a sheet',\n\t'whole ball of wax',\n\t'whole hog',\n\t'whole nine yards',\n\t'wild goose chase',\n\t'will wonders never cease',\n\t'wisdom of the ages',\n\t'wolf at the door',\n\t'word to the wise',\n\t'words fail me',\n\t'work like a dog',\n\t'world weary',\n\t'worst nightmare',\n\t'written in stone',\n\t'wrong side of the bed',\n\t'yanking (your|my) chain',\n\t'yappy as a dog',\n\t'years young',\n\t'you only live once',\n\t'young and foolish',\n\t'young and vibrant',\n\t'youre the boss',\n];\n","export default [\n\t'absolutely',\n\t'actual',\n\t'actually',\n\t'amazing',\n\t'anyway',\n\t'apparently',\n\t'approximately',\n\t'badly',\n\t'basically',\n\t'begin',\n\t'certainly',\n\t'clearly',\n\t'completely',\n\t'definitely',\n\t'easily',\n\t'effectively',\n\t'entirely',\n\t'especially',\n\t'essentially',\n\t'exactly',\n\t'extremely',\n\t'fairly',\n\t'frankly',\n\t'frequently',\n\t'fully',\n\t'generally',\n\t'hardly',\n\t'heavily',\n\t'highly',\n\t'hopefully',\n\t'just',\n\t'largely',\n\t'like',\n\t'literally',\n\t'maybe',\n\t'might',\n\t'most',\n\t'mostly',\n\t'much',\n\t'necessarily',\n\t'nicely',\n\t'obviously',\n\t'ok',\n\t'okay',\n\t'particularly',\n\t'perhaps',\n\t'possibly',\n\t'practically',\n\t'precisely',\n\t'primarily',\n\t'probably',\n\t'quite',\n\t'rather',\n\t'real',\n\t'really',\n\t'relatively',\n\t'right',\n\t'seriously',\n\t'significantly',\n\t'simply',\n\t'slightly',\n\t'so',\n\t'specifically',\n\t'start',\n\t'strongly',\n\t'stuff',\n\t'surely',\n\t'things',\n\t'too',\n\t'totally',\n\t'truly',\n\t'try',\n\t'typically',\n\t'ultimately',\n\t'usually',\n\t'very',\n\t'virtually',\n\t'well',\n\t'whatever',\n\t'whenever',\n\t'wherever',\n\t'whoever',\n\t'widely',\n];\n","import { hedges } from 'hedges';\n\nexport default {\n\texceptions: [],\n\tlist: hedges,\n};\n","export default [\n\t{\n\t\tvalue: \"awoken\",\n\t\treplace: \"awoke\"\n\t}, {\n\t\tvalue: \"beaten\",\n\t\treplace: \"beat\"\n\t}, {\n\t\tvalue: \"begun\",\n\t\treplace: \"began\"\n\t}, {\n\t\tvalue: \"bent\",\n\t\treplace: \"bent\"\n\t}, {\n\t\tvalue: \"bitten\",\n\t\treplace: \"bit\"\n\t}, {\n\t\tvalue: \"bled\",\n\t\treplace: \"bled\"\n\t}, {\n\t\tvalue: \"blown\",\n\t\treplace: \"blew\"\n\t}, {\n\t\tvalue: \"broken\",\n\t\treplace: \"broke\"\n\t}, {\n\t\tvalue: \"brought\",\n\t\treplace: \"brought\"\n\t}, {\n\t\tvalue: \"built\",\n\t\treplace: \"built\"\n\t}, {\n\t\tvalue: \"bought\",\n\t\treplace: \"bought\"\n\t}, {\n\t\tvalue: \"caught\",\n\t\treplace: \"caught\"\n\t}, {\n\t\tvalue: \"chosen\",\n\t\treplace: \"chose\"\n\t}, {\n\t\tvalue: \"cut\",\n\t\treplace: \"cut\"\n\t}, {\n\t\tvalue: \"dealt\",\n\t\treplace: \"dealt\"\n\t}, {\n\t\tvalue: \"done\",\n\t\treplace: \"did\"\n\t}, {\n\t\tvalue: \"drawn\",\n\t\treplace: \"drew\"\n\t}, {\n\t\tvalue: \"driven\",\n\t\treplace: \"drove\"\n\t}, {\n\t\tvalue: \"eaten\",\n\t\treplace: \"ate\"\n\t}, {\n\t\tvalue: \"fed\",\n\t\treplace: \"fed\"\n\t}, {\n\t\tvalue: \"felt\",\n\t\treplace: \"felt\"\n\t}, {\n\t\tvalue: \"fought\",\n\t\treplace: \"fought\"\n\t}, {\n\t\tvalue: \"found\",\n\t\treplace: \"found\"\n\t}, {\n\t\tvalue: \"forbidden\",\n\t\treplace: \"forbade\"\n\t}, {\n\t\tvalue: \"forgotten\",\n\t\treplace: \"forgot\"\n\t}, {\n\t\tvalue: \"forgiven\",\n\t\treplace: \"forgave\"\n\t}, {\n\t\tvalue: \"frozen\",\n\t\treplace: \"froze\"\n\t}, {\n\t\tvalue: \"gotten\",\n\t\treplace: \"got\"\n\t}, {\n\t\tvalue: \"given\",\n\t\treplace: \"gave\"\n\t}, {\n\t\tvalue: \"ground\",\n\t\treplace: \"ground\"\n\t}, {\n\t\tvalue: \"ground\",\n\t\treplace: \"ground, grinded\"\n\t}, {\n\t\tvalue: \"hung\",\n\t\treplace: \"hung\"\n\t}, {\n\t\tvalue: \"heard\",\n\t\treplace: \"heard\"\n\t}, {\n\t\tvalue: \"hidden\",\n\t\treplace: \"hid\"\n\t}, {\n\t\tvalue: \"hit\",\n\t\treplace: \"hit\"\n\t}, {\n\t\tvalue: \"held\",\n\t\treplace: \"held\"\n\t}, {\n\t\tvalue: \"hurt\",\n\t\treplace: \"hurt\"\n\t}, {\n\t\tvalue: \"kept\",\n\t\treplace: \"kept\"\n\t}, {\n\t\tvalue: \"known\",\n\t\treplace: \"knew\"\n\t}, {\n\t\tvalue: \"laid\",\n\t\treplace: \"laid\"\n\t}, {\n\t\tvalue: \"led\",\n\t\treplace: \"led\"\n\t}, {\n\t\tvalue: \"left\",\n\t\treplace: \"left\"\n\t}, {\n\t\tvalue: \"let\",\n\t\treplace: \"let\"\n\t}, {\n\t\tvalue: \"lost\",\n\t\treplace: \"lost\"\n\t}, {\n\t\tvalue: \"made\",\n\t\treplace: \"made\"\n\t}, {\n\t\tvalue: \"meant\",\n\t\treplace: \"meant\"\n\t}, {\n\t\tvalue: \"met\",\n\t\treplace: \"met\"\n\t}, {\n\t\tvalue: \"paid\",\n\t\treplace: \"paid\"\n\t}, {\n\t\tvalue: \"proven\",\n\t\treplace: \"proved\"\n\t}, {\n\t\tvalue: \"put\",\n\t\treplace: \"put\"\n\t}, {\n\t\tvalue: \"read\",\n\t\treplace: \"read\"\n\t}, {\n\t\tvalue: \"ridden\",\n\t\treplace: \"rode\"\n\t}, {\n\t\tvalue: \"rung\",\n\t\treplace: \"rang\"\n\t}, {\n\t\tvalue: \"run\",\n\t\treplace: \"ran\"\n\t}, {\n\t\tvalue: \"said\",\n\t\treplace: \"said\"\n\t}, {\n\t\tvalue: \"seen\",\n\t\treplace: \"saw\"\n\t}, {\n\t\tvalue: \"sold\",\n\t\treplace: \"sold\"\n\t}, {\n\t\tvalue: \"sent\",\n\t\treplace: \"sent\"\n\t}, {\n\t\tvalue: \"shaken\",\n\t\treplace: \"shook\"\n\t}, {\n\t\tvalue: \"shaved\",\n\t\treplace: \"shaved\"\n\t}, {\n\t\tvalue: \"shot\",\n\t\treplace: \"shot\"\n\t}, {\n\t\tvalue: \"shown\",\n\t\treplace: \"showed\"\n\t}, {\n\t\tvalue: \"shut\",\n\t\treplace: \"shut\"\n\t}, {\n\t\tvalue: \"sung\",\n\t\treplace: \"sung\"\n\t}, {\n\t\tvalue: \"sunk\",\n\t\treplace: \"sunk\"\n\t}, {\n\t\tvalue: \"slain\",\n\t\treplace: \"slew\"\n\t}, {\n\t\tvalue: \"slid\",\n\t\treplace: \"slid\"\n\t}, {\n\t\tvalue: \"spoken\",\n\t\treplace: \"spoke\"\n\t}, {\n\t\tvalue: \"spent\",\n\t\treplace: \"spent\"\n\t}, {\n\t\tvalue: \"spun\",\n\t\treplace: \"spun\"\n\t}, {\n\t\tvalue: \"split\",\n\t\treplace: \"split\"\n\t}, {\n\t\tvalue: \"spread\",\n\t\treplace: \"spread\"\n\t}, {\n\t\tvalue: \"stolen\",\n\t\treplace: \"stole\"\n\t}, {\n\t\tvalue: \"struck\",\n\t\treplace: \"struck\"\n\t}, {\n\t\tvalue: \"swept\",\n\t\treplace: \"swept\"\n\t}, {\n\t\tvalue: \"swung\",\n\t\treplace: \"swung\"\n\t}, {\n\t\tvalue: \"taken\",\n\t\treplace: \"took\"\n\t}, {\n\t\tvalue: \"taught\",\n\t\treplace: \"taught\"\n\t}, {\n\t\tvalue: \"torn\",\n\t\treplace: \"tore\"\n\t}, {\n\t\tvalue: \"told\",\n\t\treplace: \"told\"\n\t}, {\n\t\tvalue: \"thought\",\n\t\treplace: \"thought\"\n\t}, {\n\t\tvalue: \"thrown\",\n\t\treplace: \"threw\"\n\t}, {\n\t\tvalue: \"undergone\",\n\t\treplace: \"underwent\"\n\t}, {\n\t\tvalue: \"understood\",\n\t\treplace: \"understood\"\n\t}, {\n\t\tvalue: \"upset\",\n\t\treplace: \"upset\"\n\t}, {\n\t\tvalue: \"woken\",\n\t\treplace: \"woke\"\n\t}, {\n\t\tvalue: \"worn\",\n\t\treplace: \"wore\"\n\t}, {\n\t\tvalue: \"won\",\n\t\treplace: \"won\"\n\t}, {\n\t\tvalue: \"withdrawn\",\n\t\treplace: \"withdrew\"\n\t}, {\n\t\tvalue: \"written\",\n\t\treplace: \"wrote\"\n\t}\n];\n","export default [\n\t{\n\t\tvalue: \"a number of\",\n\t\treplace: \"Many, some\"\n\t}, {\n\t\tvalue: \"abundance\",\n\t\treplace: \"Enough, plenty\"\n\t}, {\n\t\tvalue: \"accede to\",\n\t\treplace: \"Allow, agree to\"\n\t}, {\n\t\tvalue: \"accelerate\",\n\t\treplace: \"Speed up\"\n\t}, {\n\t\tvalue: \"accentuate\",\n\t\treplace: \"Stress\"\n\t}, {\n\t\tvalue: \"accompany\",\n\t\treplace: \"Go with, with\"\n\t}, {\n\t\tvalue: \"accomplish\",\n\t\treplace: \"Do\"\n\t}, {\n\t\tvalue: \"accorded\",\n\t\treplace: \"Given\"\n\t}, {\n\t\tvalue: \"accrue\",\n\t\treplace: \"Add, gain\"\n\t}, {\n\t\tvalue: \"acquiesce\",\n\t\treplace: \"Agree\"\n\t}, {\n\t\tvalue: \"acquire\",\n\t\treplace: \"Get\"\n\t}, {\n\t\tvalue: \"additional\",\n\t\treplace: \"More, extra\"\n\t}, {\n\t\tvalue: \"adjacent to\",\n\t\treplace: \"Next to\"\n\t}, {\n\t\tvalue: \"adjustment\",\n\t\treplace: \"Change\"\n\t}, {\n\t\tvalue: \"admissible\",\n\t\treplace: \"Allowed, accepted\"\n\t}, {\n\t\tvalue: \"advantageous\",\n\t\treplace: \"Helpful\"\n\t}, {\n\t\tvalue: \"adversely impact\",\n\t\treplace: \"Hurt\"\n\t}, {\n\t\tvalue: \"advise\",\n\t\treplace: \"Tell\"\n\t}, {\n\t\tvalue: \"aforementioned\",\n\t\treplace: \"Remove\"\n\t}, {\n\t\tvalue: \"aggregate\",\n\t\treplace: \"Total, add\"\n\t}, {\n\t\tvalue: \"aircraft\",\n\t\treplace: \"Plane\"\n\t}, {\n\t\tvalue: \"all of\",\n\t\treplace: \"All\"\n\t}, {\n\t\tvalue: \"alleviate\",\n\t\treplace: \"Ease, reduce\"\n\t}, {\n\t\tvalue: \"allocate\",\n\t\treplace: \"Divide\"\n\t}, {\n\t\tvalue: \"along the lines of\",\n\t\treplace: \"Like, as in\"\n\t}, {\n\t\tvalue: \"already existing\",\n\t\treplace: \"Existing\"\n\t}, {\n\t\tvalue: \"alternatively\",\n\t\treplace: \"Or\"\n\t}, {\n\t\tvalue: \"ameliorate\",\n\t\treplace: \"Improve, help\"\n\t}, {\n\t\tvalue: \"anticipate\",\n\t\treplace: \"Expect\"\n\t}, {\n\t\tvalue: \"apparent\",\n\t\treplace: \"Clear, plain\"\n\t}, {\n\t\tvalue: \"appreciable\",\n\t\treplace: \"Many\"\n\t}, {\n\t\tvalue: \"as a means of\",\n\t\treplace: \"To\"\n\t}, {\n\t\tvalue: \"as of yet\",\n\t\treplace: \"Yet\"\n\t}, {\n\t\tvalue: \"as to\",\n\t\treplace: \"on, about\"\n\t}, {\n\t\tvalue: \"as yet\",\n\t\treplace: \"Yet\"\n\t}, {\n\t\tvalue: \"ascertain\",\n\t\treplace: \"Find out, learn\"\n\t}, {\n\t\tvalue: \"assistance\",\n\t\treplace: \"Help\"\n\t}, {\n\t\tvalue: \"at this time\",\n\t\treplace: \"Now\"\n\t}, {\n\t\tvalue: \"attain\",\n\t\treplace: \"Meet\"\n\t}, {\n\t\tvalue: \"attributable to\",\n\t\treplace: \"Because\"\n\t}, {\n\t\tvalue: \"authorize\",\n\t\treplace: \"Allow, let\"\n\t}, {\n\t\tvalue: \"because of the fact that\",\n\t\treplace: \"because\"\n\t}, {\n\t\tvalue: \"belated\",\n\t\treplace: \"late\"\n\t}, {\n\t\tvalue: \"benefit from\",\n\t\treplace: \"enjoy\"\n\t}, {\n\t\tvalue: \"bestow\",\n\t\treplace: \"give, award\"\n\t}, {\n\t\tvalue: \"by virtue of\",\n\t\treplace: \"by, under\"\n\t}, {\n\t\tvalue: \"cease\",\n\t\treplace: \"stop\"\n\t}, {\n\t\tvalue: \"close proximity\",\n\t\treplace: \"near\"\n\t}, {\n\t\tvalue: \"commence\",\n\t\treplace: \"Begin or start\"\n\t}, {\n\t\tvalue: \"comply with\",\n\t\treplace: \"follow\"\n\t}, {\n\t\tvalue: \"concerning\",\n\t\treplace: \"about, on\"\n\t}, {\n\t\tvalue: \"consequently\",\n\t\treplace: \"so\"\n\t}, {\n\t\tvalue: \"consolidate\",\n\t\treplace: \"join, merge\"\n\t}, {\n\t\tvalue: \"constitutes\",\n\t\treplace: \"is, forms, makes up\"\n\t}, {\n\t\tvalue: \"demonstrate\",\n\t\treplace: \"prove, show\"\n\t}, {\n\t\tvalue: \"depart\",\n\t\treplace: \"leave, go\"\n\t}, {\n\t\tvalue: \"designate\",\n\t\treplace: \"choose, name\"\n\t}, {\n\t\tvalue: \"discontinue\",\n\t\treplace: \"drop, stop\"\n\t}, {\n\t\tvalue: \"due to the fact that\",\n\t\treplace: \"because, since\"\n\t}, {\n\t\tvalue: \"each and every\",\n\t\treplace: \"Each\"\n\t}, {\n\t\tvalue: \"economical\",\n\t\treplace: \"cheap\"\n\t}, {\n\t\tvalue: \"eliminate\",\n\t\treplace: \"cut, drop, end\"\n\t}, {\n\t\tvalue: \"elucidate\",\n\t\treplace: \"explain\"\n\t}, {\n\t\tvalue: \"employ\",\n\t\treplace: \"use\"\n\t}, {\n\t\tvalue: \"endeavor\",\n\t\treplace: \"try\"\n\t}, {\n\t\tvalue: \"enumerate\",\n\t\treplace: \"count\"\n\t}, {\n\t\tvalue: \"equitable\",\n\t\treplace: \"fair\"\n\t}, {\n\t\tvalue: \"equivalent\",\n\t\treplace: \"equal\"\n\t}, {\n\t\tvalue: \"evaluate\",\n\t\treplace: \"test, check\"\n\t}, {\n\t\tvalue: \"evidenced\",\n\t\treplace: \"showed\"\n\t}, {\n\t\tvalue: \"exclusively\",\n\t\treplace: \"only\"\n\t}, {\n\t\tvalue: \"expedite\",\n\t\treplace: \"hurry\"\n\t}, {\n\t\tvalue: \"expend\",\n\t\treplace: \"spend\"\n\t}, {\n\t\tvalue: \"expiration\",\n\t\treplace: \"end\"\n\t}, {\n\t\tvalue: \"facilitate\",\n\t\treplace: \"ease, help\"\n\t}, {\n\t\tvalue: \"factual evidence\",\n\t\treplace: \"facts, evidence\"\n\t}, {\n\t\tvalue: \"feasible\",\n\t\treplace: \"workable\"\n\t}, {\n\t\tvalue: \"finalize\",\n\t\treplace: \"complete, finish\"\n\t}, {\n\t\tvalue: \"first and foremost\",\n\t\treplace: \"first\"\n\t}, {\n\t\tvalue: \"for the purpose of,\",\n\t\treplace: \"to\"\n\t}, {\n\t\tvalue: \"forfeit\",\n\t\treplace: \"lose, give up\"\n\t}, {\n\t\tvalue: \"formulate\",\n\t\treplace: \"plan\"\n\t}, {\n\t\tvalue: \"honest truth\",\n\t\treplace: \"truth\"\n\t}, {\n\t\tvalue: \"however\",\n\t\treplace: \"but, yet\"\n\t}, {\n\t\tvalue: \"if and when\",\n\t\treplace: \"use either word; not both\"\n\t}, {\n\t\tvalue: \"impacted\",\n\t\treplace: \"affected, harmed, changed\"\n\t}, {\n\t\tvalue: \"implement\",\n\t\treplace: \"install, put in place; tool\"\n\t}, {\n\t\tvalue: \"in a timely manner\",\n\t\treplace: \"on time\"\n\t}, {\n\t\tvalue: \"in accordance with\",\n\t\treplace: \"by, under\"\n\t}, {\n\t\tvalue: \"in addition\",\n\t\treplace: \"also, besides, too\"\n\t}, {\n\t\tvalue: \"in all likelihood\",\n\t\treplace: \"probably\"\n\t}, {\n\t\tvalue: \"in an effort to\",\n\t\treplace: \"to\"\n\t}, {\n\t\tvalue: \"in between\",\n\t\treplace: \"between\"\n\t}, {\n\t\tvalue: \"in excess of\",\n\t\treplace: \"more than\"\n\t}, {\n\t\tvalue: \"in lieu of\",\n\t\treplace: \"instead\"\n\t}, {\n\t\tvalue: \"in light of the fact that\",\n\t\treplace: \"because\"\n\t}, {\n\t\tvalue: \"in many cases\",\n\t\treplace: \"often\"\n\t}, {\n\t\tvalue: \"in order to\",\n\t\treplace: \"to\"\n\t}, {\n\t\tvalue: \"in regard to\",\n\t\treplace: \"about, concerning, on\"\n\t}, {\n\t\tvalue: \"in some instances \",\n\t\treplace: \"sometimes\"\n\t}, {\n\t\tvalue: \"in terms of\",\n\t\treplace: \"omit; for, as, with\"\n\t}, {\n\t\tvalue: \"in the near future\",\n\t\treplace: \"soon\"\n\t}, {\n\t\tvalue: \"in the process of\",\n\t\treplace: \"omit\"\n\t}, {\n\t\tvalue: \"inception\",\n\t\treplace: \"start\"\n\t}, {\n\t\tvalue: \"incumbent upon\",\n\t\treplace: \"must\"\n\t}, {\n\t\tvalue: \"indicate\",\n\t\treplace: \"say, state, or show\"\n\t}, {\n\t\tvalue: \"indication\",\n\t\treplace: \"sign\"\n\t}, {\n\t\tvalue: \"initiate\",\n\t\treplace: \"start\"\n\t}, {\n\t\tvalue: \"is applicable to\",\n\t\treplace: \"applies to\"\n\t}, {\n\t\tvalue: \"is authorized to\",\n\t\treplace: \"may\"\n\t}, {\n\t\tvalue: \"is responsible for\",\n\t\treplace: \"handles\"\n\t}, {\n\t\tvalue: \"it is essential\",\n\t\treplace: \"must, need to\"\n\t}, {\n\t\tvalue: \"magnitude\",\n\t\treplace: \"size\"\n\t}, {\n\t\tvalue: \"maximum\",\n\t\treplace: \"greatest, largest, most\"\n\t}, {\n\t\tvalue: \"methodology\",\n\t\treplace: \"method\"\n\t}, {\n\t\tvalue: \"minimize\",\n\t\treplace: \"cut\"\n\t}, {\n\t\tvalue: \"minimum\",\n\t\treplace: \"least, smallest, small\"\n\t}, {\n\t\tvalue: \"modify\",\n\t\treplace: \"change\"\n\t}, {\n\t\tvalue: \"monitor\",\n\t\treplace: \"check, watch, track\"\n\t}, {\n\t\tvalue: \"multiple\",\n\t\treplace: \"many\"\n\t}, {\n\t\tvalue: \"necessitate\",\n\t\treplace: \"cause, need\"\n\t}, {\n\t\tvalue: \"nevertheless\",\n\t\treplace: \"still, besides, even so\"\n\t}, {\n\t\tvalue: \"not certain\",\n\t\treplace: \"uncertain\"\n\t}, {\n\t\tvalue: \"not many\",\n\t\treplace: \"few\"\n\t}, {\n\t\tvalue: \"not often\",\n\t\treplace: \"rarely\"\n\t}, {\n\t\tvalue: \"not unless\",\n\t\treplace: \"only if\"\n\t}, {\n\t\tvalue: \"not unlike\",\n\t\treplace: \"similar, alike\"\n\t}, {\n\t\tvalue: \"notwithstanding\",\n\t\treplace: \"in spite of, still\"\n\t}, {\n\t\tvalue: \"null and void\",\n\t\treplace: \"use either null or void\"\n\t}, {\n\t\tvalue: \"numerous\",\n\t\treplace: \"many\"\n\t}, {\n\t\tvalue: \"objective\",\n\t\treplace: \"aim, goal\"\n\t}, {\n\t\tvalue: \"obligate\",\n\t\treplace: \"bind, compel\"\n\t}, {\n\t\tvalue: \"obtain\",\n\t\treplace: \"get\"\n\t}, {\n\t\tvalue: \"on the contrary\",\n\t\treplace: \"but, so\"\n\t}, {\n\t\tvalue: \"on the other hand\",\n\t\treplace: \"omit; but, so\"\n\t}, {\n\t\tvalue: \"one particular\",\n\t\treplace: \"one\"\n\t}, {\n\t\tvalue: \"optimum\",\n\t\treplace: \"best, greatest, most\"\n\t}, {\n\t\tvalue: \"overall\",\n\t\treplace: \"omit\"\n\t}, {\n\t\tvalue: \"owing to the fact that\",\n\t\treplace: \"because, since\"\n\t}, {\n\t\tvalue: \"participate\",\n\t\treplace: \"take part\"\n\t}, {\n\t\tvalue: \"particulars\",\n\t\treplace: \"details\"\n\t}, {\n\t\tvalue: \"pass away\",\n\t\treplace: \"die\"\n\t}, {\n\t\tvalue: \"pertaining to\",\n\t\treplace: \"about, of, on\"\n\t}, {\n\t\tvalue: \"point in time\",\n\t\treplace: \"time, point, moment, now\"\n\t}, {\n\t\tvalue: \"portion\",\n\t\treplace: \"part\"\n\t}, {\n\t\tvalue: \"possess\",\n\t\treplace: \"have, own\"\n\t}, {\n\t\tvalue: \"preclude\",\n\t\treplace: \"prevent\"\n\t}, {\n\t\tvalue: \"previously\",\n\t\treplace: \"before\"\n\t}, {\n\t\tvalue: \"prior to\",\n\t\treplace: \"before\"\n\t}, {\n\t\tvalue: \"prioritize\",\n\t\treplace: \"rank, focus on\"\n\t}, {\n\t\tvalue: \"procure\",\n\t\treplace: \"buy, get\"\n\t}, {\n\t\tvalue: \"proficiency\",\n\t\treplace: \"skill\"\n\t}, {\n\t\tvalue: \"provided that\",\n\t\treplace: \"if\"\n\t}, {\n\t\tvalue: \"purchase\",\n\t\treplace: \"buy, sale\"\n\t}, {\n\t\tvalue: \"put simply\",\n\t\treplace: \"omit\"\n\t}, {\n\t\tvalue: \"readily apparent\",\n\t\treplace: \"clear\"\n\t}, {\n\t\tvalue: \"refer back\",\n\t\treplace: \"refer\"\n\t}, {\n\t\tvalue: \"regarding\",\n\t\treplace: \"about, of, on\"\n\t}, {\n\t\tvalue: \"relocate\",\n\t\treplace: \"move\"\n\t}, {\n\t\tvalue: \"remainder\",\n\t\treplace: \"rest\"\n\t}, {\n\t\tvalue: \"remuneration\",\n\t\treplace: \"payment\"\n\t}, {\n\t\tvalue: \"require\",\n\t\treplace: \"must, need\"\n\t}, {\n\t\tvalue: \"requirement\",\n\t\treplace: \"need, rule\"\n\t}, {\n\t\tvalue: \"reside\",\n\t\treplace: \"live\"\n\t}, {\n\t\tvalue: \"residence\",\n\t\treplace: \"house\"\n\t}, {\n\t\tvalue: \"retain\",\n\t\treplace: \"keep\"\n\t}, {\n\t\tvalue: \"satisfy\",\n\t\treplace: \"meet, please\"\n\t}, {\n\t\tvalue: \"shall\",\n\t\treplace: \"must, will\"\n\t}, {\n\t\tvalue: \"should you wish\",\n\t\treplace: \"if you want\"\n\t}, {\n\t\tvalue: \"similar to\",\n\t\treplace: \"like\"\n\t}, {\n\t\tvalue: \"solicit\",\n\t\treplace: \"ask for, request\"\n\t}, {\n\t\tvalue: \"span across\",\n\t\treplace: \"span, cross\"\n\t}, {\n\t\tvalue: \"strategize\",\n\t\treplace: \"plan\"\n\t}, {\n\t\tvalue: \"subsequent\",\n\t\treplace: \"later, next, after, then\"\n\t}, {\n\t\tvalue: \"substantial\",\n\t\treplace: \"large, much\"\n\t}, {\n\t\tvalue: \"successfully complete\",\n\t\treplace: \"complete, pass\"\n\t}, {\n\t\tvalue: \"sufficient\",\n\t\treplace: \"enough\"\n\t}, {\n\t\tvalue: \"terminate\",\n\t\treplace: \"end, stop\"\n\t}, {\n\t\tvalue: \"the month of\",\n\t\treplace: \"omit\"\n\t}, {\n\t\tvalue: \"therefore\",\n\t\treplace: \"thus, so\"\n\t}, {\n\t\tvalue: \"time period\",\n\t\treplace: \"time, period\"\n\t}, {\n\t\tvalue: \"took advantage of\",\n\t\treplace: \"preyed on\"\n\t}, {\n\t\tvalue: \"transmit\",\n\t\treplace: \"send\"\n\t}, {\n\t\tvalue: \"transpire\",\n\t\treplace: \"happen\"\n\t}, {\n\t\tvalue: \"until such time as\",\n\t\treplace: \"until\"\n\t}, {\n\t\tvalue: \"utilization\",\n\t\treplace: \"use\"\n\t}, {\n\t\tvalue: \"utilize\",\n\t\treplace: \"use\"\n\t}, {\n\t\tvalue: \"validate\",\n\t\treplace: \"confirm\"\n\t}, {\n\t\tvalue: \"various different\",\n\t\treplace: \"various, different\"\n\t}, {\n\t\tvalue: \"very\",\n\t\treplace: \"omit\"\n\t}, {\n\t\tvalue: \"whether or not\",\n\t\treplace: \"whether\"\n\t}, {\n\t\tvalue: \"with respect to\",\n\t\treplace: \"on, about\"\n\t}, {\n\t\tvalue: \"with the exception of\",\n\t\treplace: \"except for\"\n\t}, {\n\t\tvalue: \"witnessed\",\n\t\treplace: \"saw, seen\"\n\t}\n];\n","import { weasels } from 'weasels';\n\nexport default {\n\texceptions: [\n\t\t'many',\n\t\t'few',\n\t],\n\tlist: weasels,\n};\n","import words from '../data/adverbs';\n\nexport default function adverbs(text) {\n    const expression = new RegExp('\\\\b(' + words.join('|') + ')(y)\\\\b', 'gi');\n    const matches = [...text.matchAll(expression)];\n    \n    if (!matches) {\n        return [];\n    }\n    \n    return matches.map((match) => {\n        const [ value ] = [...match].filter(Boolean);\n\n        return {\n            value,\n            type: 'adverb',\n            level: 'warning',\n            message: 'adverbs can weaken meaning',\n            index: match.index,\n            offset: value.length + match.index,\n        };\n    });\n}\n","import phrases from '../data/cliches';\n\nfunction normalizeText(string = '') {\n    // replace conjunctives, trim whitespace\n    // and augment common multiple word groups\n\n    let text = `${string}`.trim();\n    const ignore = /(^#|^$)/.test(text);\n    if (ignore) return null;\n\n    text = text.replace(/\\s+/g, \" \");\n    text = text.replace(/ (&|n|and) /i, ' (&|n|and) ');\n    text = text.replace(/ (his|her) /i, ' (his|her) ');\n    text = text.replace(/([\\s^])?(your|my) /i, '$1(your|my) ');\n    text = text.replace(/([\\s^])?(you|we) /gi, '$1(you|we) ');\n\n    return text;\n}\n\nconst expression = new RegExp('\\\\b(' + phrases.map(normalizeText).filter(Boolean).join('|') + ')\\\\b', 'gi');\n\nexport default function cliches(text) {\n\tconst matches = [...text.matchAll(expression)];\n\t\n\tif (!matches) {\n\t\treturn [];\n\t}\n\t\n\treturn matches.map((match) => {\n\t\tconst [ value ] = [...match].filter(Boolean);\n\n\t\treturn {\n\t\t\tvalue,\n\t\t\ttype: 'cliche',\n\t\t\tlevel: 'warning',\n\t\t\tmessage: `\"${value}\" is a cliche`,\n\t\t\tindex: match.index,\n\t\t\toffset: value.length + match.index,\n\t\t\treplacements: [],\n\t\t};\n\t});\n};\n","import words from '../data/fillers';\n\nconst expression = new RegExp('\\\\b(' + words.join('|') + ')\\\\b', 'gi');\n\nexport default function fillers(text) {\n\tconst matches = [...text.matchAll(expression)];\n\t\n\tif (!matches) {\n\t\treturn [];\n\t}\n\t\n\treturn matches.map((match) => {\n\t\tconst [ value ] = [...match].filter(Boolean);\n\n\t\treturn {\n\t\t\tvalue,\n\t\t\ttype: 'filler',\n\t\t\tlevel: 'warning',\n\t\t\tmessage: `\"${value}\" is a filler word`,\n\t\t\tindex: match.index,\n\t\t\toffset: value.length + match.index,\n\t\t\treplacements: [{\n\t\t\t\taction: 'delete',\n\t\t\t\tvalue: '',\n\t\t\t}],\n\t\t};\n\t});\n};\n","import words from '../data/hedges';\n\nconst expression = new RegExp('\\\\b(' + words.list.join('|') + ')\\\\b', 'gi');\n\nexport default function hedges(text) {\n\tconst matches = [...text.matchAll(expression)];\n\t\n\tif (!matches) {\n\t\treturn [];\n\t}\n\t\n\treturn matches.map((match) => {\n\t\tconst [ value ] = [...match].filter(Boolean);\n\n\t\treturn {\n\t\t\tvalue,\n\t\t\ttype: 'hedge',\n\t\t\tlevel: 'warning',\n\t\t\tmessage: `\"${value}\" is a hedge word`,\n\t\t\tindex: match.index,\n\t\t\toffset: value.length + match.index,\n\t\t\treplacements: [{\n\t\t\t\taction: 'delete',\n\t\t\t\tvalue: '',\n\t\t\t}],\n\t\t};\n\t});\n};\n","import { flow } from 'lodash';\nimport adverbs from \"./adverbs\";\nimport hedges from \"./hedges\";\nimport passive from \"./passive\";\nimport readability from \"./readability\";\nimport simpler from \"./simpler\";\nimport weasel from \"./weasel\";\nimport sensitivity from \"./sensitivity\";\nimport fillers from \"./fillers\";\nimport cliches from './cliches';\n\nimport stripTags from \"../utils/strip-tags\";\nimport stripAstrals from '../utils/strip-astrals';\nimport stripHTMComments from '../utils/strip-html-comments';\nimport stripSpaces from '../utils/strip-spaces';\nimport stripHTMLEntities from '../utils/strip-html-entities';\n\nexport default (text, { preserveWhiteSpace = true } = {}) => {\n    const content = `${\n        flow(\n\t\t\tstripHTMComments,\n            stripAstrals,\n            stripSpaces,\n            stripHTMLEntities,\n            stripTags,\n        )(text, preserveWhiteSpace)\n    }\\n`;\n\n\treturn [\n\t\t...passive(content),\n\t\t...adverbs(content),\n\t\t...readability(content),\n\t\t...simpler(content),\n\t\t...hedges(content),\n\t\t...weasel(content),\n\t\t...sensitivity(content),\n\t\t...fillers(content),\n\t\t...cliches(content),\n\t].filter(Boolean);\n};\n","import words from '../data/passive';\n\nconst expression = new RegExp('\\\\b(am|are|were|being|is|been|was|be)\\\\b\\\\s*([\\\\w]+ed|' + words.map((word) => word.value).join('|') + ')\\\\b', 'gi');\n\nexport default function passive(text) {\n    const matches = [...text.matchAll(expression)];\n\n    if (!matches) {\n        return [];\n    }\n\n    return matches.map((match) => {\n        const [ value ] = [...match].filter(Boolean);\n        const replacement = words.find(({ value: word }) => word === value);\n\n        return {\n            value,\n            type: 'passive',\n            level: 'warning',\n            message: `\"${value}\" may be passive voice`,\n            index: match.index,\n            offset: value.length + match.index,\n            replacements: replacement?.replace ? replacement.replace.split(', ').map((value) => ({ value: value.toLocaleLowerCase(), action: 'replace' })) : [],\n        };\n    });\n}\n","import { readingScore } from \"../reading-score\";\nimport { tokenize } from '../tokenizer';\n\nexport default (text) => {\n    const paragraphs = text.replace(/\\n$/gm, '').split(/\\n/g).filter((line) => line.length);\n    const { sentences } = tokenize(paragraphs.join(' '));\n\n    return !sentences ? [] : sentences.map((sentence, index) => {\n        const { score, words } = readingScore(sentence);\n        const level = score > 9 && score <= 16 ? 'suggestion' : score > 16 ? 'warning' : null;\n        const start = index === 0 ? 0 : sentences.reduce((accumulator, currentValue, currentIndex) => {\n            return currentIndex < index ? accumulator + currentValue.length + 1 : accumulator;\n        }, 0);\n        let end = sentences.reduce(\n            (accumulator, currentValue, currentIndex) =>\n                currentIndex <= index ? accumulator + currentValue.length : accumulator,\n                0\n            );\n        \n        if (index - 1 > 0) {\n            end += index - 1;\n        }\n\n        const response = words > 14 && level ? {\n            value: sentence,\n            type: `readability-${level === 'warning' ? 'very-' : ''}hard`,\n            level,\n            message: `sentence is${level ===  'warning' ? ' very' : ''} hard to read`,\n            index: start,\n            offset: end,\n        } : null;\n\n        return response;\n    }).filter(Boolean);\n};\n","import { text } from 'alex';\n\nconst typeMap = {\n    'retext-equality': 'equality',\n    'retext-profanities': 'profanity',\n};\n\nexport default function sensitivity(content) {\n    const { messages } = text(content);\n    \n    if (!messages.length) {\n        return [];\n    }\n    \n    return messages.map((match) => {\n        const { actual: value, position: { start: { offset: index }, end: { offset } }, message, fatal, source } = match;\n\n        return {\n            value,\n            type: typeMap[source],\n            level: fatal ? 'warning' : 'suggestion',\n            message,\n            index,\n            offset,\n        };\n    });\n}\n","import words from '../data/simpler';\n\nconst expression = new RegExp('\\\\b(' + words.map(({ value }) => value).join('|') + ')\\\\b', 'gi');\n\nexport default function simpler(text) {\n    const matches = [...text.matchAll(expression)];\n    \n    if (!matches) {\n        return [];\n    }\n    \n    return matches.map((match) => {\n        const [ value ] = [...match].filter(Boolean);\n        const replacement = words.find(({ value: word }) => word === value);\n\n        return {\n            value,\n            type: 'simpler',\n            level: 'suggestion',\n            message: `\"${value}\" has a simpler alternative`,\n            index: match.index,\n            offset: value.length + match.index,\n            replacements: replacement?.replace ? replacement.replace.split(', ').map((value) => ({ value: value.toLocaleLowerCase(), action: 'replace' })) : [],\n        };\n    });\n}\n","import words from '../data/weasel';\n\nconst expression = new RegExp('\\\\b(' + words.list.join('|') + ')\\\\b', 'gi');\n\nexport default function weasel(text) {\n\tconst matches = [...text.matchAll(expression)];\n\t\n\tif (!matches) {\n\t\treturn [];\n\t}\n\t\n\treturn matches.map((match) => {\n\t\tconst [ value ] = [...match].filter(Boolean);\n\n\t\treturn {\n\t\t\tvalue,\n\t\t\ttype: 'weasel',\n\t\t\tlevel: 'warning',\n\t\t\tmessage: `\"${value}\" is a weasel word`,\n\t\t\tindex: match.index,\n\t\t\toffset: value.length + match.index,\n\t\t\treplacements: [{\n\t\t\t\taction: 'delete',\n\t\t\t\tvalue: '',\n\t\t\t}],\n\t\t};\n\t});\n};\n","import { flow } from 'lodash';\nimport { count as characterCounter } from '@wordpress/wordcount';\nimport readingTime from 'reading-time/lib/reading-time';\nimport { automatedReadability } from 'automated-readability';\nimport { polarity } from 'polarity';\n\nimport stripAstrals from './utils/strip-astrals';\nimport stripHTMComments from './utils/strip-html-comments';\nimport stripSpaces from './utils/strip-spaces';\nimport stripTags from './utils/strip-tags';\nimport stripHTMLEntities from './utils/strip-html-entities';\nimport { tokenize } from './tokenizer';\n\n/**\n * \n * @param {string} text\n */\nexport const readingScore = (content) => {\n    const text = `${\n        flow(\n            stripTags,\n            stripHTMComments,\n            stripAstrals,\n            stripSpaces,\n            stripHTMLEntities,\n        )(content)\n    }\\n`;\n\n    const paragraphs = text.replace(/\\n$/gm, '').split(/\\n/g).filter((line) => line.length);\n    const { sentences } = tokenize(paragraphs.join(' '));\n    const words = sentences.reduce((accumulator, sentence) => {\n        const { words } = tokenize(sentence);\n\n        accumulator.push(...words);\n        return accumulator;\n    }, []);\n\n    const wordCount = characterCounter(text, 'words');\n    const characterCount = characterCounter(text, 'characters_including_spaces');\n    const alphaNumericCharacters = text.match(/[a-zA-Z0-9]/g);\n    const letters = text.match(/[a-zA-Z]/g)?.length || 0;\n    const score = automatedReadability({\n        sentence: sentences.length,\n        word: wordCount,\n        character: alphaNumericCharacters?.length || 0,\n    });\n    const { polarity: polarityScore } = polarity(words);\n    const { minutes } = readingTime(text, { wordsPerMinute: 250 });\n\n    return {\n        paragraphs: paragraphs.length,\n        sentences: sentences.length,\n        words: wordCount,\n        characters: characterCount,\n        score: Math.round(score),\n        letters,\n        polarity: polarityScore,\n        readingTime: minutes,\n    };\n};\n","export function addProblem(problem) {\n\treturn {\n\t\ttype: 'ADD_PROBLEM',\n\t\tproblem,\n\t};\n};\n\nexport function addProblems(problems) {\n\treturn {\n\t\ttype: 'ADD_PROBLEMS',\n\t\tproblems,\n\t};\n};\n\nexport function removeProblem(name) {\n\treturn {\n\t\ttype: 'REMOVE_PROBLEM',\n\t\tname,\n\t};\n};\n\nexport function updateReadability(stats) {\n\treturn {\n\t\ttype: 'UPDATE_READABILITY',\n\t\tstats,\n\t};\n};\n\nexport function updateUserSettings(settings) {\n\treturn {\n\t\ttype: 'UPDATE_USER_SETTINGS',\n\t\tsettings,\n\t};\n};\n","import { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\n\nconst STORE_NAME = 'writers-blocks/editor';\n\nexport const store = createReduxStore(STORE_NAME, {\n\treducer,\n\tselectors,\n\tactions,\n});\n\nregister(store);\n","/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nimport { PROBLEM_TYPES_TO_LABEL } from '../constants';\n\nconst { btoa } = window;\n\nconst DEFAULT_USER_SETTINGS = {\n\tshowProblems: true,\n\ttypesToShow: Object.keys(PROBLEM_TYPES_TO_LABEL).reduce((accumulator, type) => {\n\t\taccumulator[type] = true;\n\t\treturn accumulator;\n\t}, {}),\n};\n\nexport function readability(state = { stats: {} }, action) {\n\tswitch (action.type) {\n\t\tcase 'UPDATE_READABILITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstats: action.stats,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport function problems(state = { list: [] }, action) {\n\tswitch (action.type) {\n\t\tcase 'ADD_PROBLEM':\n\t\t\tconst id = btoa(`${action.problem.blockId}-${action.problem.type}-${action.problem.index}-${action.problem.offset}`);\n\n\t\t\tif (state.list.find((p) => p.id === id)) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlist: [...state.list, { ...action.problem, id }],\n\t\t\t};\n\t\tcase 'ADD_PROBLEMS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlist: action.problems.map((problem) => ({\n\t\t\t\t\t...problem,\n\t\t\t\t\tid: btoa(`${problem.blockId}-${problem.type}-${problem.index}-${problem.offset}`),\n\t\t\t\t})),\n\t\t\t};\n\t\tcase 'REMOVE_PROBLEM':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlist: state.list.filter((problem) => problem.id !== action.name),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport function user(state = { settings: DEFAULT_USER_SETTINGS }, action) {\n\tswitch (action.type) {\n\t\tcase 'UPDATE_USER_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsettings: {\n\t\t\t\t\t...state.settings,\n\t\t\t\t\t...action.settings,\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default combineReducers({\n\tproblems,\n\treadability,\n\tuser,\n});\n","export const getProblems = (state) => state.problems.list;\n\nexport const getProblem = (state, id) => state.problems.list.find((problem) => problem.id === id);\n\nexport const getBlockProblems = (state, blockId) => state.problems.list.filter((problem) => problem.blockId === blockId);\n\nexport const getProblemsByType = (state, type) => state.problems.list.filter((problem) => problem.type === type);\n\nexport const getReadability = (state) => state.readability.stats;\n\nexport const getUserSettings = (state) => state.user.settings;\n\n","import { subscribe, select, dispatch } from '@wordpress/data';\nimport { debounce } from 'lodash';\n\nimport check from '../parsers';\nimport { readingScore } from '../reading-score';\nimport { store } from '../store';\nimport {\n\tPROBLEM_TYPES,\n\tALLOWED_BLOCKS,\n\tBLOCK_TYPE_CONTENT_ATTRIBUTE,\n} from '../constants';\n\nlet _content = '';\nlet isUpdatingProblems = false;\n\nconst { btoa } = window;\n\nlet queue = [];\n\nconst getProblemsFromBlock = (block) => {\n    const { clientId: blockId, name: blockName } = block;\n\n    const isAllowed = ALLOWED_BLOCKS.includes(blockName);\n    const attribute = BLOCK_TYPE_CONTENT_ATTRIBUTE[blockName];\n\n    if (!isAllowed) {\n        return [];\n    }\n\t\n\tconst problems = check(\n\t\tblock.attributes[attribute],\n\t\t{\n\t\t\tpreserveWhiteSpace: blockName !== 'core/list',\n\t\t}\n\t);\n\n    if (!problems.length) {\n        return [];\n    }\n\n    return problems.map((problem) => ({\n        blockId,\n        blockName,\n        id: btoa(`${blockId}-${problem.type}-${problem.index}-${problem.offset}`),\n        ...problem,\n    }));\n};\n\nconst getProblems = (blocks) => {\n\tconst allowedBlocks = blocks.filter( (block) => ALLOWED_BLOCKS.includes(block.name) );\n\t\n\treturn allowedBlocks.flatMap(getProblemsFromBlock);\n};\n\nconst addAnnotations = (blockProblems, { clientId } = {}) => {\n\tconst { typesToShow: SHOWN_ANNOTATION_TYPES } = select('writers-blocks/editor').getUserSettings();\n\n\tif (clientId) {\n\t\tconst annotationsInBlock = select('core/annotations')\n\t\t\t.__experimentalGetAnnotations()\n\t\t\t.filter( annotation => annotation.blockClientId === clientId && PROBLEM_TYPES.map((type) => `writers-blocks--${type}`).includes(annotation.source) );\n\n\t\tannotationsInBlock.forEach( annotation => {\n\t\t\tdispatch('core/annotations').__experimentalRemoveAnnotation( annotation.id );\n\t\t} );\n\t}\n\n\tblockProblems.forEach(({ blockId, blockName, type, index, offset }) => {\n\t\tconst [name] = type.split('-');\n\n\t\tif (SHOWN_ANNOTATION_TYPES[name]) {\n\t\t\tdispatch('core/annotations').__experimentalAddAnnotation({\n\t\t\t\tsource: `writers-blocks--${type}`,\n\t\t\t\tblockClientId: blockId,\n\t\t\t\trichTextIdentifier: BLOCK_TYPE_CONTENT_ATTRIBUTE[blockName],\n\t\t\t\trange: {\n\t\t\t\t\tstart: index,\n\t\t\t\t\tend: offset,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n};\n\nconst scheduleBlockProblemsUpdate = debounce(() => {\n\tif (isUpdatingProblems) {\n\t\treturn;\n\t}\n\n\tisUpdatingProblems = true;\n\tconst block = queue.shift();\n\n\tif (!block) {\n\t\tisUpdatingProblems = false;\n\t\treturn;\n\t}\n\n\tconst blockProblems = getProblemsFromBlock(block);\n\t\n\tif (blockProblems.length) {\n\t\tconst { clientId } = block;\n\t\tconst problems = select(store).getProblems();\n\n\t\tdispatch(store).addProblems([\n\t\t\t...problems.filter((problem) => problem.blockId !== clientId),\n\t\t\t...blockProblems,\n\t\t]);\n\n\t\taddAnnotations(blockProblems, { clientId });\n\t}\n\n\tisUpdatingProblems = false;\n\n\tif (queue.length) {\n\t\tscheduleBlockProblemsUpdate();\n\t}\n}, 500);\n\nconst scheduleReadingScoreUpdate = debounce((content) => {\n\tdispatch(store).updateReadability(readingScore(content));\n}, 500);\n\nsubscribe( () => {\n\tconst content = select('core/editor').getEditedPostAttribute('content');\n\tconst blocks = select('core/block-editor').getBlocks();\n\tconst problems = select(store).getProblems();\n\n\tif (!content || (content === _content && problems.length)) {\n\t\treturn;\n\t}\n\n\tif (!problems.length && blocks.length) {\n\t\tconst blockProblems = getProblems(blocks);\n\t\t\n\t\tif (blockProblems.length) {\n\t\t\tdispatch(store).addProblems(blockProblems);\n\t\t\taddAnnotations(blockProblems);\n\t\t}\n\t}\n\n\tconst selectedBlock = select('core/block-editor').getSelectedBlock();\n\n\tif (selectedBlock) {\n\t\tqueue = queue.filter( (block) => block.clientId !== selectedBlock.clientId );\n\t\tqueue.push(selectedBlock);\n\t}\n\n\tif (queue.length) {\n\t\tscheduleBlockProblemsUpdate();\n\t}\n\n\tscheduleReadingScoreUpdate(content);\n\n\t_content = content;\n});\n","import './content';\n","import Tokenizer from 'sentence-tokenizer';\n\nexport const tokenize = (text) => {\n\tconst tokenizer = new Tokenizer();\n\ttokenizer.setEntry(text);\n\n\ttry {\n\t\treturn {\n\t\t\tsentences: tokenizer.getSentences(),\n\t\t\twords: tokenizer.getTokens(),\n\t\t}\n\t} catch(error) {\n\t\treturn {\n\t\t\tsentences: 0,\n\t\t\twords: 0,\n\t\t};\n\t}\n};\n","/**\n * Replaces items matched in the regex with character.\n *\n * @param {string} text The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripAstrals( text ) {\n\treturn text.replace( /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '' );\n}\n","/**\n * Removes items matched in the regex.\n *\n * @param {string} text The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripHTMLComments(text) {\n\treturn text.replace( /<!--[\\s\\S]*?-->/g, '' );\n}\n","/**\n * Replaces items matched in the regex with a single character.\n *\n * @param {string} text The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripHTMLEntities( text ) {\n\treturn text.replace( /&\\S+?;/g, '' );\n}\n","/**\n * Replaces items matched in the regex with spaces.\n *\n * @param {string} text The string being counted.\n *\n * @return {string} The manipulated text.\n */\nexport default function stripSpaces( text ) {\n\treturn text.replace( /[\\n\\r\\t]+/g, ' ' );\n}\n","/**\n * Replaces items matched in the regex with new line\n *\n * @param {string} text The string being counted.\n *\n * @return {string} The manipulated text.\n */\n// export default function stripTags(text, preserveWhiteSpace) {\n// \treturn text.split( /<\\/?[a-z][^>]*?>/gi ).filter(Boolean).join(preserveWhiteSpace ? '' : ' ');\n// }\n\nexport default function stripTags(text, preserveWhiteSpace) {\n\treturn text\n\t\t.replaceAll( '</li><li>', ' ' )\n\t\t.replace( /<\\/?[li][^>]*?>/gi, '' )\n\t\t.replace( /<\\/?[br][^>]*?>/gi, ' ' )\n\t\t.split( /<\\/?[a-z][^>]*?>/gi ).filter(Boolean).join(preserveWhiteSpace ? ' ' : '');\n}\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n","/**\n * @fileoverview\n *   Check if a `link` element is “Body OK”.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   var h = require('hastscript')\n *   var ok = require('hast-util-is-body-ok-link')\n *\n *   ok(h('link', {itemProp: 'foo'})) //=> true\n *   ok(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true\n *   ok(h('link', {rel: ['author'], href: 'index.css'})) //=> false\n *   ```\n *\n *   ## API\n *\n *   ### `isBodyOkLink(node)`\n *\n *   * Return `true` for `link` elements with an `itemProp`\n *   * Return `true` for `link` elements with a `rel` list where one or more\n *     entries are `pingback`, `prefetch`, or `stylesheet`.\n */\n\n'use strict'\n\nvar is = require('hast-util-is-element')\nvar has = require('hast-util-has-property')\n\nmodule.exports = ok\n\nvar list = ['pingback', 'prefetch', 'stylesheet']\n\nfunction ok(node) {\n  var length\n  var index\n  var rel\n\n  if (!is(node, 'link')) {\n    return false\n  }\n\n  if (has(node, 'itemProp')) {\n    return true\n  }\n\n  rel = (node.properties || {}).rel || []\n  length = rel.length\n  index = -1\n\n  if (rel.length === 0) {\n    return false\n  }\n\n  while (++index < length) {\n    if (list.indexOf(rel[index]) === -1) {\n      return false\n    }\n  }\n\n  return true\n}\n","'use strict'\n\nvar own = {}.hasOwnProperty\n\nmodule.exports = hasProperty\n\n// Check if `node` has a set `name` property.\nfunction hasProperty(node, name) {\n  var props\n  var value\n\n  if (!node || !name || typeof node !== 'object' || node.type !== 'element') {\n    return false\n  }\n\n  props = node.properties\n  value = props && own.call(props, name) && props[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n","'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return tagNameFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return element\n  }\n\n  if (typeof test === 'object') {\n    return any(test)\n  }\n\n  if (typeof test === 'function') {\n    return callFactory(test)\n  }\n\n  throw new Error('Expected function, string, or array as test')\n}\n\nfunction convertAll(tests) {\n  var length = tests.length\n  var index = -1\n  var results = []\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\nfunction any(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string a tag name check.\nfunction tagNameFactory(test) {\n  return tagName\n\n  function tagName(node) {\n    return element(node) && node.tagName === test\n  }\n}\n\n// Utility to convert a function check.\nfunction callFactory(test) {\n  return call\n\n  function call(node) {\n    return element(node) && Boolean(test.apply(this, arguments))\n  }\n}\n\n// Utility to return true if this is an element.\nfunction element(node) {\n  return (\n    node &&\n    typeof node === 'object' &&\n    node.type === 'element' &&\n    typeof node.tagName === 'string'\n  )\n}\n","'use strict'\n\nvar convert = require('./convert')\n\nmodule.exports = isElement\n\nisElement.convert = convert\n\n// Check if if `node` is an `element` and whether it passes the given test.\nfunction isElement(node, test, index, parent, context) {\n  var hasParent = parent !== null && parent !== undefined\n  var hasIndex = index !== null && index !== undefined\n  var check = convert(test)\n\n  if (\n    hasIndex &&\n    (typeof index !== 'number' || index < 0 || index === Infinity)\n  ) {\n    throw new Error('Expected positive finite index for child node')\n  }\n\n  if (hasParent && (!parent.type || !parent.children)) {\n    throw new Error('Expected parent node')\n  }\n\n  if (!node || !node.type || typeof node.type !== 'string') {\n    return false\n  }\n\n  if (hasParent !== hasIndex) {\n    throw new Error('Expected both parent and index')\n  }\n\n  return check.call(context, node, index, parent)\n}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","'use strict'\n\nmodule.exports = nlcstToString\n\n// Stringify one nlcst node or list of nodes.\nfunction nlcstToString(node, separator) {\n  var sep = separator || ''\n  var values\n  var length\n  var children\n\n  if (!node || (!('length' in node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  if (typeof node.value === 'string') {\n    return node.value\n  }\n\n  children = 'length' in node ? node : node.children\n  length = children.length\n\n  // Shortcut: This is pretty common, and a small performance win.\n  if (length === 1 && 'value' in children[0]) {\n    return children[0].value\n  }\n\n  values = []\n\n  while (length--) {\n    values[length] = nlcstToString(children[length], sep)\n  }\n\n  return values.join(sep)\n}\n","'use strict'\n\nmodule.exports = nlcstToString\n\n// Stringify one nlcst node or list of nodes.\nfunction nlcstToString(node, separator) {\n  var sep = separator || ''\n  var values\n  var length\n  var children\n\n  if (!node || (!('length' in node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  if (typeof node.value === 'string') {\n    return node.value\n  }\n\n  children = 'length' in node ? node : node.children\n  length = children.length\n\n  // Shortcut: This is pretty common, and a small performance win.\n  if (length === 1 && 'value' in children[0]) {\n    return children[0].value\n  }\n\n  values = []\n\n  while (length--) {\n    values[length] = nlcstToString(children[length], sep)\n  }\n\n  return values.join(sep)\n}\n","'use strict';\n\nconst { DOCUMENT_MODE } = require('./html');\n\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\n\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//'\n];\n\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\nconst QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\n\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\n//Utils\nfunction enquoteDoctypeId(id) {\n    const quote = id.indexOf('\"') !== -1 ? \"'\" : '\"';\n\n    return quote + id + quote;\n}\n\nfunction hasPrefix(publicId, prefixes) {\n    for (let i = 0; i < prefixes.length; i++) {\n        if (publicId.indexOf(prefixes[i]) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n//API\nexports.isConforming = function(token) {\n    return (\n        token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID)\n    );\n};\n\nexports.getDocumentMode = function(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    const systemId = token.systemId;\n\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    let publicId = token.publicId;\n\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n\n        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n\n    return DOCUMENT_MODE.NO_QUIRKS;\n};\n\nexports.serializeContent = function(name, publicId, systemId) {\n    let str = '!DOCTYPE ';\n\n    if (name) {\n        str += name;\n    }\n\n    if (publicId) {\n        str += ' PUBLIC ' + enquoteDoctypeId(publicId);\n    } else if (systemId) {\n        str += ' SYSTEM';\n    }\n\n    if (systemId !== null) {\n        str += ' ' + enquoteDoctypeId(systemId);\n    }\n\n    return str;\n};\n","'use strict';\n\nmodule.exports = {\n    controlCharacterInInputStream: 'control-character-in-input-stream',\n    noncharacterInInputStream: 'noncharacter-in-input-stream',\n    surrogateInInputStream: 'surrogate-in-input-stream',\n    nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',\n    endTagWithAttributes: 'end-tag-with-attributes',\n    endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',\n    unexpectedSolidusInTag: 'unexpected-solidus-in-tag',\n    unexpectedNullCharacter: 'unexpected-null-character',\n    unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',\n    invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',\n    unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',\n    missingEndTagName: 'missing-end-tag-name',\n    unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',\n    unknownNamedCharacterReference: 'unknown-named-character-reference',\n    missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',\n    unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',\n    unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',\n    eofBeforeTagName: 'eof-before-tag-name',\n    eofInTag: 'eof-in-tag',\n    missingAttributeValue: 'missing-attribute-value',\n    missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',\n    missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',\n    missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:\n        'missing-whitespace-between-doctype-public-and-system-identifiers',\n    missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',\n    missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',\n    missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',\n    missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',\n    missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',\n    abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',\n    abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',\n    cdataInHtmlContent: 'cdata-in-html-content',\n    incorrectlyOpenedComment: 'incorrectly-opened-comment',\n    eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',\n    eofInDoctype: 'eof-in-doctype',\n    nestedComment: 'nested-comment',\n    abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',\n    eofInComment: 'eof-in-comment',\n    incorrectlyClosedComment: 'incorrectly-closed-comment',\n    eofInCdata: 'eof-in-cdata',\n    absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',\n    nullCharacterReference: 'null-character-reference',\n    surrogateCharacterReference: 'surrogate-character-reference',\n    characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',\n    controlCharacterReference: 'control-character-reference',\n    noncharacterCharacterReference: 'noncharacter-character-reference',\n    missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',\n    missingDoctypeName: 'missing-doctype-name',\n    invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',\n    duplicateAttribute: 'duplicate-attribute',\n    nonConformingDoctype: 'non-conforming-doctype',\n    missingDoctype: 'missing-doctype',\n    misplacedDoctype: 'misplaced-doctype',\n    endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',\n    closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',\n    disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',\n    openElementsLeftAfterEof: 'open-elements-left-after-eof',\n    abandonedHeadElementChild: 'abandoned-head-element-child',\n    misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',\n    nestedNoscriptInHead: 'nested-noscript-in-head',\n    eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'\n};\n","'use strict';\n\nconst Tokenizer = require('../tokenizer');\nconst HTML = require('./html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml'\n};\n\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = {\n    attributename: 'attributeName',\n    attributetype: 'attributeType',\n    basefrequency: 'baseFrequency',\n    baseprofile: 'baseProfile',\n    calcmode: 'calcMode',\n    clippathunits: 'clipPathUnits',\n    diffuseconstant: 'diffuseConstant',\n    edgemode: 'edgeMode',\n    filterunits: 'filterUnits',\n    glyphref: 'glyphRef',\n    gradienttransform: 'gradientTransform',\n    gradientunits: 'gradientUnits',\n    kernelmatrix: 'kernelMatrix',\n    kernelunitlength: 'kernelUnitLength',\n    keypoints: 'keyPoints',\n    keysplines: 'keySplines',\n    keytimes: 'keyTimes',\n    lengthadjust: 'lengthAdjust',\n    limitingconeangle: 'limitingConeAngle',\n    markerheight: 'markerHeight',\n    markerunits: 'markerUnits',\n    markerwidth: 'markerWidth',\n    maskcontentunits: 'maskContentUnits',\n    maskunits: 'maskUnits',\n    numoctaves: 'numOctaves',\n    pathlength: 'pathLength',\n    patterncontentunits: 'patternContentUnits',\n    patterntransform: 'patternTransform',\n    patternunits: 'patternUnits',\n    pointsatx: 'pointsAtX',\n    pointsaty: 'pointsAtY',\n    pointsatz: 'pointsAtZ',\n    preservealpha: 'preserveAlpha',\n    preserveaspectratio: 'preserveAspectRatio',\n    primitiveunits: 'primitiveUnits',\n    refx: 'refX',\n    refy: 'refY',\n    repeatcount: 'repeatCount',\n    repeatdur: 'repeatDur',\n    requiredextensions: 'requiredExtensions',\n    requiredfeatures: 'requiredFeatures',\n    specularconstant: 'specularConstant',\n    specularexponent: 'specularExponent',\n    spreadmethod: 'spreadMethod',\n    startoffset: 'startOffset',\n    stddeviation: 'stdDeviation',\n    stitchtiles: 'stitchTiles',\n    surfacescale: 'surfaceScale',\n    systemlanguage: 'systemLanguage',\n    tablevalues: 'tableValues',\n    targetx: 'targetX',\n    targety: 'targetY',\n    textlength: 'textLength',\n    viewbox: 'viewBox',\n    viewtarget: 'viewTarget',\n    xchannelselector: 'xChannelSelector',\n    ychannelselector: 'yChannelSelector',\n    zoomandpan: 'zoomAndPan'\n};\n\nconst XML_ATTRS_ADJUSTMENT_MAP = {\n    'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK },\n    'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK },\n    'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS.XLINK },\n    'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS.XLINK },\n    'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS.XLINK },\n    'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS.XLINK },\n    'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS.XLINK },\n    'xml:base': { prefix: 'xml', name: 'base', namespace: NS.XML },\n    'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS.XML },\n    'xml:space': { prefix: 'xml', name: 'space', namespace: NS.XML },\n    xmlns: { prefix: '', name: 'xmlns', namespace: NS.XMLNS },\n    'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }\n};\n\n//SVG tag names adjustment map\nconst SVG_TAG_NAMES_ADJUSTMENT_MAP = (exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n    textpath: 'textPath'\n});\n\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = {\n    [$.B]: true,\n    [$.BIG]: true,\n    [$.BLOCKQUOTE]: true,\n    [$.BODY]: true,\n    [$.BR]: true,\n    [$.CENTER]: true,\n    [$.CODE]: true,\n    [$.DD]: true,\n    [$.DIV]: true,\n    [$.DL]: true,\n    [$.DT]: true,\n    [$.EM]: true,\n    [$.EMBED]: true,\n    [$.H1]: true,\n    [$.H2]: true,\n    [$.H3]: true,\n    [$.H4]: true,\n    [$.H5]: true,\n    [$.H6]: true,\n    [$.HEAD]: true,\n    [$.HR]: true,\n    [$.I]: true,\n    [$.IMG]: true,\n    [$.LI]: true,\n    [$.LISTING]: true,\n    [$.MENU]: true,\n    [$.META]: true,\n    [$.NOBR]: true,\n    [$.OL]: true,\n    [$.P]: true,\n    [$.PRE]: true,\n    [$.RUBY]: true,\n    [$.S]: true,\n    [$.SMALL]: true,\n    [$.SPAN]: true,\n    [$.STRONG]: true,\n    [$.STRIKE]: true,\n    [$.SUB]: true,\n    [$.SUP]: true,\n    [$.TABLE]: true,\n    [$.TT]: true,\n    [$.U]: true,\n    [$.UL]: true,\n    [$.VAR]: true\n};\n\n//Check exit from foreign content\nexports.causesExit = function(startTagToken) {\n    const tn = startTagToken.tagName;\n    const isFontWithAttrs =\n        tn === $.FONT &&\n        (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);\n\n    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];\n};\n\n//Token adjustments\nexports.adjustTokenMathMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n};\n\nexports.adjustTokenSVGAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrName) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n};\n\nexports.adjustTokenXMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n};\n\nexports.adjustTokenSVGTagName = function(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];\n\n    if (adjustedTagName) {\n        token.tagName = adjustedTagName;\n    }\n};\n\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\n\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\n\nexports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {\n    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {\n        return true;\n    }\n\n    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {\n        return true;\n    }\n\n    return false;\n};\n","'use strict';\n\nconst NS = (exports.NAMESPACES = {\n    HTML: 'http://www.w3.org/1999/xhtml',\n    MATHML: 'http://www.w3.org/1998/Math/MathML',\n    SVG: 'http://www.w3.org/2000/svg',\n    XLINK: 'http://www.w3.org/1999/xlink',\n    XML: 'http://www.w3.org/XML/1998/namespace',\n    XMLNS: 'http://www.w3.org/2000/xmlns/'\n});\n\nexports.ATTRS = {\n    TYPE: 'type',\n    ACTION: 'action',\n    ENCODING: 'encoding',\n    PROMPT: 'prompt',\n    NAME: 'name',\n    COLOR: 'color',\n    FACE: 'face',\n    SIZE: 'size'\n};\n\nexports.DOCUMENT_MODE = {\n    NO_QUIRKS: 'no-quirks',\n    QUIRKS: 'quirks',\n    LIMITED_QUIRKS: 'limited-quirks'\n};\n\nconst $ = (exports.TAG_NAMES = {\n    A: 'a',\n    ADDRESS: 'address',\n    ANNOTATION_XML: 'annotation-xml',\n    APPLET: 'applet',\n    AREA: 'area',\n    ARTICLE: 'article',\n    ASIDE: 'aside',\n\n    B: 'b',\n    BASE: 'base',\n    BASEFONT: 'basefont',\n    BGSOUND: 'bgsound',\n    BIG: 'big',\n    BLOCKQUOTE: 'blockquote',\n    BODY: 'body',\n    BR: 'br',\n    BUTTON: 'button',\n\n    CAPTION: 'caption',\n    CENTER: 'center',\n    CODE: 'code',\n    COL: 'col',\n    COLGROUP: 'colgroup',\n\n    DD: 'dd',\n    DESC: 'desc',\n    DETAILS: 'details',\n    DIALOG: 'dialog',\n    DIR: 'dir',\n    DIV: 'div',\n    DL: 'dl',\n    DT: 'dt',\n\n    EM: 'em',\n    EMBED: 'embed',\n\n    FIELDSET: 'fieldset',\n    FIGCAPTION: 'figcaption',\n    FIGURE: 'figure',\n    FONT: 'font',\n    FOOTER: 'footer',\n    FOREIGN_OBJECT: 'foreignObject',\n    FORM: 'form',\n    FRAME: 'frame',\n    FRAMESET: 'frameset',\n\n    H1: 'h1',\n    H2: 'h2',\n    H3: 'h3',\n    H4: 'h4',\n    H5: 'h5',\n    H6: 'h6',\n    HEAD: 'head',\n    HEADER: 'header',\n    HGROUP: 'hgroup',\n    HR: 'hr',\n    HTML: 'html',\n\n    I: 'i',\n    IMG: 'img',\n    IMAGE: 'image',\n    INPUT: 'input',\n    IFRAME: 'iframe',\n\n    KEYGEN: 'keygen',\n\n    LABEL: 'label',\n    LI: 'li',\n    LINK: 'link',\n    LISTING: 'listing',\n\n    MAIN: 'main',\n    MALIGNMARK: 'malignmark',\n    MARQUEE: 'marquee',\n    MATH: 'math',\n    MENU: 'menu',\n    META: 'meta',\n    MGLYPH: 'mglyph',\n    MI: 'mi',\n    MO: 'mo',\n    MN: 'mn',\n    MS: 'ms',\n    MTEXT: 'mtext',\n\n    NAV: 'nav',\n    NOBR: 'nobr',\n    NOFRAMES: 'noframes',\n    NOEMBED: 'noembed',\n    NOSCRIPT: 'noscript',\n\n    OBJECT: 'object',\n    OL: 'ol',\n    OPTGROUP: 'optgroup',\n    OPTION: 'option',\n\n    P: 'p',\n    PARAM: 'param',\n    PLAINTEXT: 'plaintext',\n    PRE: 'pre',\n\n    RB: 'rb',\n    RP: 'rp',\n    RT: 'rt',\n    RTC: 'rtc',\n    RUBY: 'ruby',\n\n    S: 's',\n    SCRIPT: 'script',\n    SECTION: 'section',\n    SELECT: 'select',\n    SOURCE: 'source',\n    SMALL: 'small',\n    SPAN: 'span',\n    STRIKE: 'strike',\n    STRONG: 'strong',\n    STYLE: 'style',\n    SUB: 'sub',\n    SUMMARY: 'summary',\n    SUP: 'sup',\n\n    TABLE: 'table',\n    TBODY: 'tbody',\n    TEMPLATE: 'template',\n    TEXTAREA: 'textarea',\n    TFOOT: 'tfoot',\n    TD: 'td',\n    TH: 'th',\n    THEAD: 'thead',\n    TITLE: 'title',\n    TR: 'tr',\n    TRACK: 'track',\n    TT: 'tt',\n\n    U: 'u',\n    UL: 'ul',\n\n    SVG: 'svg',\n\n    VAR: 'var',\n\n    WBR: 'wbr',\n\n    XMP: 'xmp'\n});\n\nexports.SPECIAL_ELEMENTS = {\n    [NS.HTML]: {\n        [$.ADDRESS]: true,\n        [$.APPLET]: true,\n        [$.AREA]: true,\n        [$.ARTICLE]: true,\n        [$.ASIDE]: true,\n        [$.BASE]: true,\n        [$.BASEFONT]: true,\n        [$.BGSOUND]: true,\n        [$.BLOCKQUOTE]: true,\n        [$.BODY]: true,\n        [$.BR]: true,\n        [$.BUTTON]: true,\n        [$.CAPTION]: true,\n        [$.CENTER]: true,\n        [$.COL]: true,\n        [$.COLGROUP]: true,\n        [$.DD]: true,\n        [$.DETAILS]: true,\n        [$.DIR]: true,\n        [$.DIV]: true,\n        [$.DL]: true,\n        [$.DT]: true,\n        [$.EMBED]: true,\n        [$.FIELDSET]: true,\n        [$.FIGCAPTION]: true,\n        [$.FIGURE]: true,\n        [$.FOOTER]: true,\n        [$.FORM]: true,\n        [$.FRAME]: true,\n        [$.FRAMESET]: true,\n        [$.H1]: true,\n        [$.H2]: true,\n        [$.H3]: true,\n        [$.H4]: true,\n        [$.H5]: true,\n        [$.H6]: true,\n        [$.HEAD]: true,\n        [$.HEADER]: true,\n        [$.HGROUP]: true,\n        [$.HR]: true,\n        [$.HTML]: true,\n        [$.IFRAME]: true,\n        [$.IMG]: true,\n        [$.INPUT]: true,\n        [$.LI]: true,\n        [$.LINK]: true,\n        [$.LISTING]: true,\n        [$.MAIN]: true,\n        [$.MARQUEE]: true,\n        [$.MENU]: true,\n        [$.META]: true,\n        [$.NAV]: true,\n        [$.NOEMBED]: true,\n        [$.NOFRAMES]: true,\n        [$.NOSCRIPT]: true,\n        [$.OBJECT]: true,\n        [$.OL]: true,\n        [$.P]: true,\n        [$.PARAM]: true,\n        [$.PLAINTEXT]: true,\n        [$.PRE]: true,\n        [$.SCRIPT]: true,\n        [$.SECTION]: true,\n        [$.SELECT]: true,\n        [$.SOURCE]: true,\n        [$.STYLE]: true,\n        [$.SUMMARY]: true,\n        [$.TABLE]: true,\n        [$.TBODY]: true,\n        [$.TD]: true,\n        [$.TEMPLATE]: true,\n        [$.TEXTAREA]: true,\n        [$.TFOOT]: true,\n        [$.TH]: true,\n        [$.THEAD]: true,\n        [$.TITLE]: true,\n        [$.TR]: true,\n        [$.TRACK]: true,\n        [$.UL]: true,\n        [$.WBR]: true,\n        [$.XMP]: true\n    },\n    [NS.MATHML]: {\n        [$.MI]: true,\n        [$.MO]: true,\n        [$.MN]: true,\n        [$.MS]: true,\n        [$.MTEXT]: true,\n        [$.ANNOTATION_XML]: true\n    },\n    [NS.SVG]: {\n        [$.TITLE]: true,\n        [$.FOREIGN_OBJECT]: true,\n        [$.DESC]: true\n    }\n};\n","'use strict';\n\nconst UNDEFINED_CODE_POINTS = [\n    0xfffe,\n    0xffff,\n    0x1fffe,\n    0x1ffff,\n    0x2fffe,\n    0x2ffff,\n    0x3fffe,\n    0x3ffff,\n    0x4fffe,\n    0x4ffff,\n    0x5fffe,\n    0x5ffff,\n    0x6fffe,\n    0x6ffff,\n    0x7fffe,\n    0x7ffff,\n    0x8fffe,\n    0x8ffff,\n    0x9fffe,\n    0x9ffff,\n    0xafffe,\n    0xaffff,\n    0xbfffe,\n    0xbffff,\n    0xcfffe,\n    0xcffff,\n    0xdfffe,\n    0xdffff,\n    0xefffe,\n    0xeffff,\n    0xffffe,\n    0xfffff,\n    0x10fffe,\n    0x10ffff\n];\n\nexports.REPLACEMENT_CHARACTER = '\\uFFFD';\n\nexports.CODE_POINTS = {\n    EOF: -1,\n    NULL: 0x00,\n    TABULATION: 0x09,\n    CARRIAGE_RETURN: 0x0d,\n    LINE_FEED: 0x0a,\n    FORM_FEED: 0x0c,\n    SPACE: 0x20,\n    EXCLAMATION_MARK: 0x21,\n    QUOTATION_MARK: 0x22,\n    NUMBER_SIGN: 0x23,\n    AMPERSAND: 0x26,\n    APOSTROPHE: 0x27,\n    HYPHEN_MINUS: 0x2d,\n    SOLIDUS: 0x2f,\n    DIGIT_0: 0x30,\n    DIGIT_9: 0x39,\n    SEMICOLON: 0x3b,\n    LESS_THAN_SIGN: 0x3c,\n    EQUALS_SIGN: 0x3d,\n    GREATER_THAN_SIGN: 0x3e,\n    QUESTION_MARK: 0x3f,\n    LATIN_CAPITAL_A: 0x41,\n    LATIN_CAPITAL_F: 0x46,\n    LATIN_CAPITAL_X: 0x58,\n    LATIN_CAPITAL_Z: 0x5a,\n    RIGHT_SQUARE_BRACKET: 0x5d,\n    GRAVE_ACCENT: 0x60,\n    LATIN_SMALL_A: 0x61,\n    LATIN_SMALL_F: 0x66,\n    LATIN_SMALL_X: 0x78,\n    LATIN_SMALL_Z: 0x7a,\n    REPLACEMENT_CHARACTER: 0xfffd\n};\n\nexports.CODE_POINT_SEQUENCES = {\n    DASH_DASH_STRING: [0x2d, 0x2d], //--\n    DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE\n    CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[\n    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script\n    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC\n    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM\n};\n\n//Surrogates\nexports.isSurrogate = function(cp) {\n    return cp >= 0xd800 && cp <= 0xdfff;\n};\n\nexports.isSurrogatePair = function(cp) {\n    return cp >= 0xdc00 && cp <= 0xdfff;\n};\n\nexports.getSurrogatePairCodePoint = function(cp1, cp2) {\n    return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;\n};\n\n//NOTE: excluding NULL and ASCII whitespace\nexports.isControlCodePoint = function(cp) {\n    return (\n        (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f)\n    );\n};\n\nexports.isUndefinedCodePoint = function(cp) {\n    return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;\n};\n","'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingMixinBase extends Mixin {\n    constructor(host, opts) {\n        super(host);\n\n        this.posTracker = null;\n        this.onParseError = opts.onParseError;\n    }\n\n    _setErrorLocation(err) {\n        err.startLine = err.endLine = this.posTracker.line;\n        err.startCol = err.endCol = this.posTracker.col;\n        err.startOffset = err.endOffset = this.posTracker.offset;\n    }\n\n    _reportError(code) {\n        const err = {\n            code: code,\n            startLine: -1,\n            startCol: -1,\n            startOffset: -1,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n\n        this._setErrorLocation(err);\n        this.onParseError(err);\n    }\n\n    _getOverriddenMethods(mxn) {\n        return {\n            _err(code) {\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingMixinBase;\n","'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n    constructor(parser, opts) {\n        super(parser, opts);\n\n        this.opts = opts;\n        this.ctLoc = null;\n        this.locBeforeToken = false;\n    }\n\n    _setErrorLocation(err) {\n        if (this.ctLoc) {\n            err.startLine = this.ctLoc.startLine;\n            err.startCol = this.ctLoc.startCol;\n            err.startOffset = this.ctLoc.startOffset;\n\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n            },\n\n            _processInputToken(token) {\n                mxn.ctLoc = token.location;\n\n                orig._processInputToken.call(this, token);\n            },\n\n            _err(code, options) {\n                mxn.locBeforeToken = options && options.beforeToken;\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingParserMixin;\n","'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingPreprocessorMixin extends ErrorReportingMixinBase {\n    constructor(preprocessor, opts) {\n        super(preprocessor, opts);\n\n        this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);\n        this.lastErrOffset = -1;\n    }\n\n    _reportError(code) {\n        //NOTE: avoid reporting error twice on advance/retreat\n        if (this.lastErrOffset !== this.posTracker.offset) {\n            this.lastErrOffset = this.posTracker.offset;\n            super._reportError(code);\n        }\n    }\n}\n\nmodule.exports = ErrorReportingPreprocessorMixin;\n","'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingPreprocessorMixin = require('./preprocessor-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingTokenizerMixin extends ErrorReportingMixinBase {\n    constructor(tokenizer, opts) {\n        super(tokenizer, opts);\n\n        const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);\n\n        this.posTracker = preprocessorMixin.posTracker;\n    }\n}\n\nmodule.exports = ErrorReportingTokenizerMixin;\n","'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass LocationInfoOpenElementStackMixin extends Mixin {\n    constructor(stack, opts) {\n        super(stack);\n\n        this.onItemPop = opts.onItemPop;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            pop() {\n                mxn.onItemPop(this.current);\n                orig.pop.call(this);\n            },\n\n            popAllUpToHtmlElement() {\n                for (let i = this.stackTop; i > 0; i--) {\n                    mxn.onItemPop(this.items[i]);\n                }\n\n                orig.popAllUpToHtmlElement.call(this);\n            },\n\n            remove(element) {\n                mxn.onItemPop(this.current);\n                orig.remove.call(this, element);\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoOpenElementStackMixin;\n","'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\nconst HTML = require('../../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\n\nclass LocationInfoParserMixin extends Mixin {\n    constructor(parser) {\n        super(parser);\n\n        this.parser = parser;\n        this.treeAdapter = this.parser.treeAdapter;\n        this.posTracker = null;\n        this.lastStartTagToken = null;\n        this.lastFosterParentingLocation = null;\n        this.currentToken = null;\n    }\n\n    _setStartLocation(element) {\n        let loc = null;\n\n        if (this.lastStartTagToken) {\n            loc = Object.assign({}, this.lastStartTagToken.location);\n            loc.startTag = this.lastStartTagToken.location;\n        }\n\n        this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n\n    _setEndLocation(element, closingToken) {\n        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n        if (loc) {\n            if (closingToken.location) {\n                const ctLoc = closingToken.location;\n                const tn = this.treeAdapter.getTagName(element);\n\n                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n                const endLoc = {};\n                if (isClosingEndTag) {\n                    endLoc.endTag = Object.assign({}, ctLoc);\n                    endLoc.endLine = ctLoc.endLine;\n                    endLoc.endCol = ctLoc.endCol;\n                    endLoc.endOffset = ctLoc.endOffset;\n                } else {\n                    endLoc.endLine = ctLoc.startLine;\n                    endLoc.endCol = ctLoc.startCol;\n                    endLoc.endOffset = ctLoc.startOffset;\n                }\n\n                this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n            }\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                mxn.lastStartTagToken = null;\n                mxn.lastFosterParentingLocation = null;\n                mxn.currentToken = null;\n\n                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n\n                mxn.posTracker = tokenizerMixin.posTracker;\n\n                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n                    onItemPop: function(element) {\n                        mxn._setEndLocation(element, mxn.currentToken);\n                    }\n                });\n            },\n\n            _runParsingLoop(scriptHandler) {\n                orig._runParsingLoop.call(this, scriptHandler);\n\n                // NOTE: generate location info for elements\n                // that remains on open element stack\n                for (let i = this.openElements.stackTop; i >= 0; i--) {\n                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n                }\n            },\n\n            //Token processing\n            _processTokenInForeignContent(token) {\n                mxn.currentToken = token;\n                orig._processTokenInForeignContent.call(this, token);\n            },\n\n            _processToken(token) {\n                mxn.currentToken = token;\n                orig._processToken.call(this, token);\n\n                //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n                //their end location explicitly.\n                const requireExplicitUpdate =\n                    token.type === Tokenizer.END_TAG_TOKEN &&\n                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));\n\n                if (requireExplicitUpdate) {\n                    for (let i = this.openElements.stackTop; i >= 0; i--) {\n                        const element = this.openElements.items[i];\n\n                        if (this.treeAdapter.getTagName(element) === token.tagName) {\n                            mxn._setEndLocation(element, token);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            //Doctype\n            _setDocumentType(token) {\n                orig._setDocumentType.call(this, token);\n\n                const documentChildren = this.treeAdapter.getChildNodes(this.document);\n                const cnLength = documentChildren.length;\n\n                for (let i = 0; i < cnLength; i++) {\n                    const node = documentChildren[i];\n\n                    if (this.treeAdapter.isDocumentTypeNode(node)) {\n                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n                        break;\n                    }\n                }\n            },\n\n            //Elements\n            _attachElementToTree(element) {\n                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n                //So we will use token location stored in this methods for the element.\n                mxn._setStartLocation(element);\n                mxn.lastStartTagToken = null;\n                orig._attachElementToTree.call(this, element);\n            },\n\n            _appendElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._appendElement.call(this, token, namespaceURI);\n            },\n\n            _insertElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._insertElement.call(this, token, namespaceURI);\n            },\n\n            _insertTemplate(token) {\n                mxn.lastStartTagToken = token;\n                orig._insertTemplate.call(this, token);\n\n                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n\n                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n            },\n\n            _insertFakeRootElement() {\n                orig._insertFakeRootElement.call(this);\n                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n            },\n\n            //Comments\n            _appendCommentNode(token, parent) {\n                orig._appendCommentNode.call(this, token, parent);\n\n                const children = this.treeAdapter.getChildNodes(parent);\n                const commentNode = children[children.length - 1];\n\n                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n            },\n\n            //Text\n            _findFosterParentingLocation() {\n                //NOTE: store last foster parenting location, so we will be able to find inserted text\n                //in case of foster parenting\n                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n\n                return mxn.lastFosterParentingLocation;\n            },\n\n            _insertCharacters(token) {\n                orig._insertCharacters.call(this, token);\n\n                const hasFosterParent = this._shouldFosterParentOnInsertion();\n\n                const parent =\n                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||\n                    this.openElements.currentTmplContent ||\n                    this.openElements.current;\n\n                const siblings = this.treeAdapter.getChildNodes(parent);\n\n                const textNodeIdx =\n                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement\n                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1\n                        : siblings.length - 1;\n\n                const textNode = siblings[textNodeIdx];\n\n                //NOTE: if we have location assigned by another token, then just update end position\n                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n                if (tnLoc) {\n                    const { endLine, endCol, endOffset } = token.location;\n                    this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n                } else {\n                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n                }\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoParserMixin;\n","'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');\n\nclass LocationInfoTokenizerMixin extends Mixin {\n    constructor(tokenizer) {\n        super(tokenizer);\n\n        this.tokenizer = tokenizer;\n        this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);\n        this.currentAttrLocation = null;\n        this.ctLoc = null;\n    }\n\n    _getCurrentLocation() {\n        return {\n            startLine: this.posTracker.line,\n            startCol: this.posTracker.col,\n            startOffset: this.posTracker.offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n    }\n\n    _attachCurrentAttrLocationInfo() {\n        this.currentAttrLocation.endLine = this.posTracker.line;\n        this.currentAttrLocation.endCol = this.posTracker.col;\n        this.currentAttrLocation.endOffset = this.posTracker.offset;\n\n        const currentToken = this.tokenizer.currentToken;\n        const currentAttr = this.tokenizer.currentAttr;\n\n        if (!currentToken.location.attrs) {\n            currentToken.location.attrs = Object.create(null);\n        }\n\n        currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        const methods = {\n            _createStartTagToken() {\n                orig._createStartTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createEndTagToken() {\n                orig._createEndTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCommentToken() {\n                orig._createCommentToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createDoctypeToken(initialName) {\n                orig._createDoctypeToken.call(this, initialName);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCharacterToken(type, ch) {\n                orig._createCharacterToken.call(this, type, ch);\n                this.currentCharacterToken.location = mxn.ctLoc;\n            },\n\n            _createEOFToken() {\n                orig._createEOFToken.call(this);\n                this.currentToken.location = mxn._getCurrentLocation();\n            },\n\n            _createAttr(attrNameFirstCh) {\n                orig._createAttr.call(this, attrNameFirstCh);\n                mxn.currentAttrLocation = mxn._getCurrentLocation();\n            },\n\n            _leaveAttrName(toState) {\n                orig._leaveAttrName.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _leaveAttrValue(toState) {\n                orig._leaveAttrValue.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _emitCurrentToken() {\n                const ctLoc = this.currentToken.location;\n\n                //NOTE: if we have pending character token make it's end location equal to the\n                //current token's start location.\n                if (this.currentCharacterToken) {\n                    this.currentCharacterToken.location.endLine = ctLoc.startLine;\n                    this.currentCharacterToken.location.endCol = ctLoc.startCol;\n                    this.currentCharacterToken.location.endOffset = ctLoc.startOffset;\n                }\n\n                if (this.currentToken.type === Tokenizer.EOF_TOKEN) {\n                    ctLoc.endLine = ctLoc.startLine;\n                    ctLoc.endCol = ctLoc.startCol;\n                    ctLoc.endOffset = ctLoc.startOffset;\n                } else {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col + 1;\n                    ctLoc.endOffset = mxn.posTracker.offset + 1;\n                }\n\n                orig._emitCurrentToken.call(this);\n            },\n\n            _emitCurrentCharacterToken() {\n                const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;\n\n                //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),\n                //then set it's location at the current preprocessor position.\n                //We don't need to increment preprocessor position, since character token\n                //emission is always forced by the start of the next character token here.\n                //So, we already have advanced position.\n                if (ctLoc && ctLoc.endOffset === -1) {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col;\n                    ctLoc.endOffset = mxn.posTracker.offset;\n                }\n\n                orig._emitCurrentCharacterToken.call(this);\n            }\n        };\n\n        //NOTE: patch initial states for each mode to obtain token start position\n        Object.keys(Tokenizer.MODE).forEach(modeName => {\n            const state = Tokenizer.MODE[modeName];\n\n            methods[state] = function(cp) {\n                mxn.ctLoc = mxn._getCurrentLocation();\n                orig[state].call(this, cp);\n            };\n        });\n\n        return methods;\n    }\n}\n\nmodule.exports = LocationInfoTokenizerMixin;\n","'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass PositionTrackingPreprocessorMixin extends Mixin {\n    constructor(preprocessor) {\n        super(preprocessor);\n\n        this.preprocessor = preprocessor;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n\n        this.offset = 0;\n        this.col = 0;\n        this.line = 1;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            advance() {\n                const pos = this.pos + 1;\n                const ch = this.html[pos];\n\n                //NOTE: LF should be in the last column of the line\n                if (mxn.isEol) {\n                    mxn.isEol = false;\n                    mxn.line++;\n                    mxn.lineStartPos = pos;\n                }\n\n                if (ch === '\\n' || (ch === '\\r' && this.html[pos + 1] !== '\\n')) {\n                    mxn.isEol = true;\n                }\n\n                mxn.col = pos - mxn.lineStartPos + 1;\n                mxn.offset = mxn.droppedBufferSize + pos;\n\n                return orig.advance.call(this);\n            },\n\n            retreat() {\n                orig.retreat.call(this);\n\n                mxn.isEol = false;\n                mxn.col = this.pos - mxn.lineStartPos + 1;\n            },\n\n            dropParsedChunk() {\n                const prevPos = this.pos;\n\n                orig.dropParsedChunk.call(this);\n\n                const reduction = prevPos - this.pos;\n\n                mxn.lineStartPos -= reduction;\n                mxn.droppedBufferSize += reduction;\n                mxn.offset = mxn.droppedBufferSize + this.pos;\n            }\n        };\n    }\n}\n\nmodule.exports = PositionTrackingPreprocessorMixin;\n","'use strict';\n\n//Const\nconst NOAH_ARK_CAPACITY = 3;\n\n//List of formatting elements\nclass FormattingElementList {\n    constructor(treeAdapter) {\n        this.length = 0;\n        this.entries = [];\n        this.treeAdapter = treeAdapter;\n        this.bookmark = null;\n    }\n\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement) {\n        const candidates = [];\n\n        if (this.length >= NOAH_ARK_CAPACITY) {\n            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;\n            const neTagName = this.treeAdapter.getTagName(newElement);\n            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n            for (let i = this.length - 1; i >= 0; i--) {\n                const entry = this.entries[i];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                    break;\n                }\n\n                const element = entry.element;\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n\n                const isCandidate =\n                    this.treeAdapter.getTagName(element) === neTagName &&\n                    this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&\n                    elementAttrs.length === neAttrsLength;\n\n                if (isCandidate) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n\n        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;\n    }\n\n    _ensureNoahArkCondition(newElement) {\n        const candidates = this._getNoahArkConditionCandidates(newElement);\n        let cLength = candidates.length;\n\n        if (cLength) {\n            const neAttrs = this.treeAdapter.getAttrList(newElement);\n            const neAttrsLength = neAttrs.length;\n            const neAttrsMap = Object.create(null);\n\n            //NOTE: build attrs map for the new element so we can perform fast lookups\n            for (let i = 0; i < neAttrsLength; i++) {\n                const neAttr = neAttrs[i];\n\n                neAttrsMap[neAttr.name] = neAttr.value;\n            }\n\n            for (let i = 0; i < neAttrsLength; i++) {\n                for (let j = 0; j < cLength; j++) {\n                    const cAttr = candidates[j].attrs[i];\n\n                    if (neAttrsMap[cAttr.name] !== cAttr.value) {\n                        candidates.splice(j, 1);\n                        cLength--;\n                    }\n\n                    if (candidates.length < NOAH_ARK_CAPACITY) {\n                        return;\n                    }\n                }\n            }\n\n            //NOTE: remove bottommost candidates until Noah's Ark condition will not be met\n            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {\n                this.entries.splice(candidates[i].idx, 1);\n                this.length--;\n            }\n        }\n    }\n\n    //Mutations\n    insertMarker() {\n        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });\n        this.length++;\n    }\n\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n\n        this.entries.push({\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    insertElementAfterBookmark(element, token) {\n        let bookmarkIdx = this.length - 1;\n\n        for (; bookmarkIdx >= 0; bookmarkIdx--) {\n            if (this.entries[bookmarkIdx] === this.bookmark) {\n                break;\n            }\n        }\n\n        this.entries.splice(bookmarkIdx + 1, 0, {\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    removeEntry(entry) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (this.entries[i] === entry) {\n                this.entries.splice(i, 1);\n                this.length--;\n                break;\n            }\n        }\n    }\n\n    clearToLastMarker() {\n        while (this.length) {\n            const entry = this.entries.pop();\n\n            this.length--;\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                break;\n            }\n        }\n    }\n\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                return null;\n            }\n\n            if (this.treeAdapter.getTagName(entry.element) === tagName) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n\n    getElementEntry(element) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n}\n\n//Entry types\nFormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';\nFormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';\n\nmodule.exports = FormattingElementList;\n","'use strict';\n\nconst Tokenizer = require('../tokenizer');\nconst OpenElementStack = require('./open-element-stack');\nconst FormattingElementList = require('./formatting-element-list');\nconst LocationInfoParserMixin = require('../extensions/location-info/parser-mixin');\nconst ErrorReportingParserMixin = require('../extensions/error-reporting/parser-mixin');\nconst Mixin = require('../utils/mixin');\nconst defaultTreeAdapter = require('../tree-adapters/default');\nconst mergeOptions = require('../utils/merge-options');\nconst doctype = require('../common/doctype');\nconst foreignContent = require('../common/foreign-content');\nconst ERR = require('../common/error-codes');\nconst unicode = require('../common/unicode');\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\nconst DEFAULT_OPTIONS = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    onParseError: null,\n    treeAdapter: defaultTreeAdapter\n};\n\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n\n//Insertion modes\nconst INITIAL_MODE = 'INITIAL_MODE';\nconst BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';\nconst BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';\nconst IN_HEAD_MODE = 'IN_HEAD_MODE';\nconst IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';\nconst AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';\nconst IN_BODY_MODE = 'IN_BODY_MODE';\nconst TEXT_MODE = 'TEXT_MODE';\nconst IN_TABLE_MODE = 'IN_TABLE_MODE';\nconst IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';\nconst IN_CAPTION_MODE = 'IN_CAPTION_MODE';\nconst IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';\nconst IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';\nconst IN_ROW_MODE = 'IN_ROW_MODE';\nconst IN_CELL_MODE = 'IN_CELL_MODE';\nconst IN_SELECT_MODE = 'IN_SELECT_MODE';\nconst IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';\nconst IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';\nconst AFTER_BODY_MODE = 'AFTER_BODY_MODE';\nconst IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';\nconst AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';\nconst AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';\nconst AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';\n\n//Insertion mode reset map\nconst INSERTION_MODE_RESET_MAP = {\n    [$.TR]: IN_ROW_MODE,\n    [$.TBODY]: IN_TABLE_BODY_MODE,\n    [$.THEAD]: IN_TABLE_BODY_MODE,\n    [$.TFOOT]: IN_TABLE_BODY_MODE,\n    [$.CAPTION]: IN_CAPTION_MODE,\n    [$.COLGROUP]: IN_COLUMN_GROUP_MODE,\n    [$.TABLE]: IN_TABLE_MODE,\n    [$.BODY]: IN_BODY_MODE,\n    [$.FRAMESET]: IN_FRAMESET_MODE\n};\n\n//Template insertion mode switch map\nconst TEMPLATE_INSERTION_MODE_SWITCH_MAP = {\n    [$.CAPTION]: IN_TABLE_MODE,\n    [$.COLGROUP]: IN_TABLE_MODE,\n    [$.TBODY]: IN_TABLE_MODE,\n    [$.TFOOT]: IN_TABLE_MODE,\n    [$.THEAD]: IN_TABLE_MODE,\n    [$.COL]: IN_COLUMN_GROUP_MODE,\n    [$.TR]: IN_TABLE_BODY_MODE,\n    [$.TD]: IN_ROW_MODE,\n    [$.TH]: IN_ROW_MODE\n};\n\n//Token handlers map for insertion modes\nconst TOKEN_HANDLERS = {\n    [INITIAL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,\n        [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.EOF_TOKEN]: tokenInInitialMode\n    },\n    [BEFORE_HTML_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHtml\n    },\n    [BEFORE_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHead\n    },\n    [IN_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHead,\n        [Tokenizer.EOF_TOKEN]: tokenInHead\n    },\n    [IN_HEAD_NO_SCRIPT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,\n        [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript\n    },\n    [AFTER_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,\n        [Tokenizer.EOF_TOKEN]: tokenAfterHead\n    },\n    [IN_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: ignoreToken,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.END_TAG_TOKEN]: endTagInText,\n        [Tokenizer.EOF_TOKEN]: eofInText\n    },\n    [IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTableText,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,\n        [Tokenizer.COMMENT_TOKEN]: tokenInTableText,\n        [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,\n        [Tokenizer.START_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.END_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.EOF_TOKEN]: tokenInTableText\n    },\n    [IN_CAPTION_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCaption,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCaption,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_COLUMN_GROUP_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,\n        [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_ROW_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInRow,\n        [Tokenizer.END_TAG_TOKEN]: endTagInRow,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_CELL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCell,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCell,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelect,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelect,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TEMPLATE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,\n        [Tokenizer.EOF_TOKEN]: eofInTemplate\n    },\n    [AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [IN_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    }\n};\n\n//Parser\nclass Parser {\n    constructor(options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n\n        this.treeAdapter = this.options.treeAdapter;\n        this.pendingScript = null;\n\n        if (this.options.sourceCodeLocationInfo) {\n            Mixin.install(this, LocationInfoParserMixin);\n        }\n\n        if (this.options.onParseError) {\n            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });\n        }\n    }\n\n    // API\n    parse(html) {\n        const document = this.treeAdapter.createDocument();\n\n        this._bootstrap(document, null);\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        return document;\n    }\n\n    parseFragment(html, fragmentContext) {\n        //NOTE: use <template> element as a fragment context if context element was not provided,\n        //so we will parse in \"forgiving\" manner\n        if (!fragmentContext) {\n            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);\n        }\n\n        //NOTE: create fake element which will be used as 'document' for fragment parsing.\n        //This is important for jsdom there 'document' can't be recreated, therefore\n        //fragment parsing causes messing of the main `document`.\n        const documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);\n\n        this._bootstrap(documentMock, fragmentContext);\n\n        if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {\n            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n        }\n\n        this._initTokenizerForFragmentParsing();\n        this._insertFakeRootElement();\n        this._resetInsertionMode();\n        this._findFormInFragmentContext();\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        const rootElement = this.treeAdapter.getFirstChild(documentMock);\n        const fragment = this.treeAdapter.createDocumentFragment();\n\n        this._adoptNodes(rootElement, fragment);\n\n        return fragment;\n    }\n\n    //Bootstrap parser\n    _bootstrap(document, fragmentContext) {\n        this.tokenizer = new Tokenizer(this.options);\n\n        this.stopped = false;\n\n        this.insertionMode = INITIAL_MODE;\n        this.originalInsertionMode = '';\n\n        this.document = document;\n        this.fragmentContext = fragmentContext;\n\n        this.headElement = null;\n        this.formElement = null;\n\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n\n        this.tmplInsertionModeStack = [];\n        this.tmplInsertionModeStackTop = -1;\n        this.currentTmplInsertionMode = null;\n\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    //Parsing loop\n    _runParsingLoop(scriptHandler) {\n        while (!this.stopped) {\n            this._setupTokenizerCDATAMode();\n\n            const token = this.tokenizer.getNextToken();\n\n            if (token.type === Tokenizer.HIBERNATION_TOKEN) {\n                break;\n            }\n\n            if (this.skipNextNewLine) {\n                this.skipNextNewLine = false;\n\n                if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\\n') {\n                    if (token.chars.length === 1) {\n                        continue;\n                    }\n\n                    token.chars = token.chars.substr(1);\n                }\n            }\n\n            this._processInputToken(token);\n\n            if (scriptHandler && this.pendingScript) {\n                break;\n            }\n        }\n    }\n\n    runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {\n        this._runParsingLoop(scriptHandler);\n\n        if (scriptHandler && this.pendingScript) {\n            const script = this.pendingScript;\n\n            this.pendingScript = null;\n\n            scriptHandler(script);\n\n            return;\n        }\n\n        if (writeCallback) {\n            writeCallback();\n        }\n    }\n\n    //Text parsing\n    _setupTokenizerCDATAMode() {\n        const current = this._getAdjustedCurrentElement();\n\n        this.tokenizer.allowCDATA =\n            current &&\n            current !== this.document &&\n            this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&\n            !this._isIntegrationPoint(current);\n    }\n\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = TEXT_MODE;\n    }\n\n    switchToPlaintextParsing() {\n        this.insertionMode = TEXT_MODE;\n        this.originalInsertionMode = IN_BODY_MODE;\n        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n    }\n\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n\n        do {\n            if (this.treeAdapter.getTagName(node) === $.FORM) {\n                this.formElement = node;\n                break;\n            }\n\n            node = this.treeAdapter.getParentNode(node);\n        } while (node);\n    }\n\n    _initTokenizerForFragmentParsing() {\n        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {\n            const tn = this.treeAdapter.getTagName(this.fragmentContext);\n\n            if (tn === $.TITLE || tn === $.TEXTAREA) {\n                this.tokenizer.state = Tokenizer.MODE.RCDATA;\n            } else if (\n                tn === $.STYLE ||\n                tn === $.XMP ||\n                tn === $.IFRAME ||\n                tn === $.NOEMBED ||\n                tn === $.NOFRAMES ||\n                tn === $.NOSCRIPT\n            ) {\n                this.tokenizer.state = Tokenizer.MODE.RAWTEXT;\n            } else if (tn === $.SCRIPT) {\n                this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;\n            } else if (tn === $.PLAINTEXT) {\n                this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n            }\n        }\n    }\n\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n    }\n\n    _attachElementToTree(element) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n    }\n\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertFakeElement(tagName) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl);\n        this.openElements.push(tmpl);\n    }\n\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);\n\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element);\n    }\n\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n\n        this.treeAdapter.appendChild(parent, commentNode);\n    }\n\n    _insertCharacters(token) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentText(token.chars);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n    }\n\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n\n    //Token processing\n    _shouldProcessTokenInForeignContent(token) {\n        const current = this._getAdjustedCurrentElement();\n\n        if (!current || current === this.document) {\n            return false;\n        }\n\n        const ns = this.treeAdapter.getNamespaceURI(current);\n\n        if (ns === NS.HTML) {\n            return false;\n        }\n\n        if (\n            this.treeAdapter.getTagName(current) === $.ANNOTATION_XML &&\n            ns === NS.MATHML &&\n            token.type === Tokenizer.START_TAG_TOKEN &&\n            token.tagName === $.SVG\n        ) {\n            return false;\n        }\n\n        const isCharacterToken =\n            token.type === Tokenizer.CHARACTER_TOKEN ||\n            token.type === Tokenizer.NULL_CHARACTER_TOKEN ||\n            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n\n        const isMathMLTextStartTag =\n            token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;\n\n        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {\n            return false;\n        }\n\n        if (\n            (token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) &&\n            this._isIntegrationPoint(current, NS.HTML)\n        ) {\n            return false;\n        }\n\n        return token.type !== Tokenizer.EOF_TOKEN;\n    }\n\n    _processToken(token) {\n        TOKEN_HANDLERS[this.insertionMode][token.type](this, token);\n    }\n\n    _processTokenInBodyMode(token) {\n        TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);\n    }\n\n    _processTokenInForeignContent(token) {\n        if (token.type === Tokenizer.CHARACTER_TOKEN) {\n            characterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {\n            nullCharacterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {\n            insertCharacters(this, token);\n        } else if (token.type === Tokenizer.COMMENT_TOKEN) {\n            appendComment(this, token);\n        } else if (token.type === Tokenizer.START_TAG_TOKEN) {\n            startTagInForeignContent(this, token);\n        } else if (token.type === Tokenizer.END_TAG_TOKEN) {\n            endTagInForeignContent(this, token);\n        }\n    }\n\n    _processInputToken(token) {\n        if (this._shouldProcessTokenInForeignContent(token)) {\n            this._processTokenInForeignContent(token);\n        } else {\n            this._processToken(token);\n        }\n\n        if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {\n            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n\n    //Integration points\n    _isIntegrationPoint(element, foreignNS) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n\n        return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);\n    }\n\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.length;\n\n        if (listLength) {\n            let unopenIdx = listLength;\n            let entry = null;\n\n            do {\n                unopenIdx--;\n                entry = this.activeFormattingElements.entries[unopenIdx];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {\n                    unopenIdx++;\n                    break;\n                }\n            } while (unopenIdx > 0);\n\n            for (let i = unopenIdx; i < listLength; i++) {\n                entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = IN_ROW_MODE;\n    }\n\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n\n    //Insertion modes\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {\n            let element = this.openElements.items[i];\n\n            if (i === 0) {\n                last = true;\n\n                if (this.fragmentContext) {\n                    element = this.fragmentContext;\n                }\n            }\n\n            const tn = this.treeAdapter.getTagName(element);\n            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];\n\n            if (newInsertionMode) {\n                this.insertionMode = newInsertionMode;\n                break;\n            } else if (!last && (tn === $.TD || tn === $.TH)) {\n                this.insertionMode = IN_CELL_MODE;\n                break;\n            } else if (!last && tn === $.HEAD) {\n                this.insertionMode = IN_HEAD_MODE;\n                break;\n            } else if (tn === $.SELECT) {\n                this._resetInsertionModeForSelect(i);\n                break;\n            } else if (tn === $.TEMPLATE) {\n                this.insertionMode = this.currentTmplInsertionMode;\n                break;\n            } else if (tn === $.HTML) {\n                this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;\n                break;\n            } else if (last) {\n                this.insertionMode = IN_BODY_MODE;\n                break;\n            }\n        }\n    }\n\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const ancestor = this.openElements.items[i];\n                const tn = this.treeAdapter.getTagName(ancestor);\n\n                if (tn === $.TEMPLATE) {\n                    break;\n                } else if (tn === $.TABLE) {\n                    this.insertionMode = IN_SELECT_IN_TABLE_MODE;\n                    return;\n                }\n            }\n        }\n\n        this.insertionMode = IN_SELECT_MODE;\n    }\n\n    _pushTmplInsertionMode(mode) {\n        this.tmplInsertionModeStack.push(mode);\n        this.tmplInsertionModeStackTop++;\n        this.currentTmplInsertionMode = mode;\n    }\n\n    _popTmplInsertionMode() {\n        this.tmplInsertionModeStack.pop();\n        this.tmplInsertionModeStackTop--;\n        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];\n    }\n\n    //Foster parenting\n    _isElementCausesFosterParenting(element) {\n        const tn = this.treeAdapter.getTagName(element);\n\n        return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;\n    }\n\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);\n    }\n\n    _findFosterParentingLocation() {\n        const location = {\n            parent: null,\n            beforeElement: null\n        };\n\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            const tn = this.treeAdapter.getTagName(openElement);\n            const ns = this.treeAdapter.getNamespaceURI(openElement);\n\n            if (tn === $.TEMPLATE && ns === NS.HTML) {\n                location.parent = this.treeAdapter.getTemplateContent(openElement);\n                break;\n            } else if (tn === $.TABLE) {\n                location.parent = this.treeAdapter.getParentNode(openElement);\n\n                if (location.parent) {\n                    location.beforeElement = openElement;\n                } else {\n                    location.parent = this.openElements.items[i - 1];\n                }\n\n                break;\n            }\n        }\n\n        if (!location.parent) {\n            location.parent = this.openElements.items[0];\n        }\n\n        return location;\n    }\n\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        } else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n\n    _fosterParentText(chars) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);\n        } else {\n            this.treeAdapter.insertText(location.parent, chars);\n        }\n    }\n\n    //Special elements\n    _isSpecialElement(element) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n\n        return HTML.SPECIAL_ELEMENTS[ns][tn];\n    }\n}\n\nmodule.exports = Parser;\n\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        } else if (!p.openElements.hasInScope(token.tagName)) {\n            formattingElementEntry = null;\n        }\n    } else {\n        genericEndTagInBody(p, token);\n    }\n\n    return formattingElementEntry;\n}\n\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            furthestBlock = element;\n        }\n    }\n\n    if (!furthestBlock) {\n        p.openElements.popUntilElementPopped(formattingElementEntry.element);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n\n    return furthestBlock;\n}\n\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n\n            p.openElements.remove(element);\n        } else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n\n    return lastElement;\n}\n\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n\n    return newElement;\n}\n\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    if (p._isElementCausesFosterParenting(commonAncestor)) {\n        p._fosterParentElement(lastElement);\n    } else {\n        const tn = p.treeAdapter.getTagName(commonAncestor);\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n\n        if (tn === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const token = formattingElementEntry.token;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement);\n}\n\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    let formattingElementEntry;\n\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);\n\n        if (!formattingElementEntry) {\n            break;\n        }\n\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n\n        if (!furthestBlock) {\n            break;\n        }\n\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n\n        p.treeAdapter.detachNode(lastElement);\n        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n\n//Generic token handlers\n//------------------------------------------------------------------\nfunction ignoreToken() {\n    //NOTE: do nothing =)\n}\n\nfunction misplacedDoctype(p) {\n    p._err(ERR.misplacedDoctype);\n}\n\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);\n}\n\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\n\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\n\nfunction insertCharacters(p, token) {\n    p._insertCharacters(token);\n}\n\nfunction stopParsing(p) {\n    p.stopped = true;\n}\n\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n\n    const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n\n    if (!doctype.isConforming(token)) {\n        p._err(ERR.nonConformingDoctype);\n    }\n\n    p.treeAdapter.setDocumentMode(p.document, mode);\n\n    p.insertionMode = BEFORE_HTML_MODE;\n}\n\nfunction tokenInInitialMode(p, token) {\n    p._err(ERR.missingDoctype, { beforeToken: true });\n    p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = BEFORE_HTML_MODE;\n    p._processToken(token);\n}\n\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagName === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = BEFORE_HEAD_MODE;\n    } else {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = BEFORE_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.HEAD) {\n        p._insertElement(token, NS.HTML);\n        p.headElement = p.openElements.current;\n        p.insertionMode = IN_HEAD_MODE;\n    } else {\n        tokenBeforeHead(p, token);\n    }\n}\n\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement($.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TITLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);\n    } else if (tn === $.NOSCRIPT) {\n        if (p.options.scriptingEnabled) {\n            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n        } else {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;\n        }\n    } else if (tn === $.NOFRAMES || tn === $.STYLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n    } else if (tn === $.SCRIPT) {\n        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);\n    } else if (tn === $.TEMPLATE) {\n        p._insertTemplate(token, NS.HTML);\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = IN_TEMPLATE_MODE;\n        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenInHead(p, token);\n    }\n}\n\nfunction endTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD) {\n        p.openElements.pop();\n        p.insertionMode = AFTER_HEAD_MODE;\n    } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {\n        tokenInHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        if (p.openElements.tmplCount > 0) {\n            p.openElements.generateImpliedEndTagsThoroughly();\n\n            if (p.openElements.currentTagName !== $.TEMPLATE) {\n                p._err(ERR.closingOfElementWithOpenChildElements);\n            }\n\n            p.openElements.popUntilTagNamePopped($.TEMPLATE);\n            p.activeFormattingElements.clearToLastMarker();\n            p._popTmplInsertionMode();\n            p._resetInsertionMode();\n        } else {\n            p._err(ERR.endTagWithoutMatchingOpenElement);\n        }\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = AFTER_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.HEAD ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.STYLE\n    ) {\n        startTagInHead(p, token);\n    } else if (tn === $.NOSCRIPT) {\n        p._err(ERR.nestedNoscriptInHead);\n    } else {\n        tokenInHeadNoScript(p, token);\n    }\n}\n\nfunction endTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.NOSCRIPT) {\n        p.openElements.pop();\n        p.insertionMode = IN_HEAD_MODE;\n    } else if (tn === $.BR) {\n        tokenInHeadNoScript(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHeadNoScript(p, token) {\n    const errCode =\n        token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n\n    p._err(errCode);\n    p.openElements.pop();\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BODY) {\n        p._insertElement(token, NS.HTML);\n        p.framesetOk = false;\n        p.insertionMode = IN_BODY_MODE;\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    } else if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        p._err(ERR.abandonedHeadElementChild);\n        p.openElements.push(p.headElement);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenAfterHead(p, token);\n    }\n}\n\nfunction endTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenAfterHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement($.BODY);\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\n\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\n\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\n\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    }\n}\n\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    const tn = p.openElements.currentTagName;\n\n    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n        p.openElements.pop();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\n\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n\n        p._insertElement(token, NS.HTML);\n\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\n\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n        const elementTn = p.treeAdapter.getTagName(element);\n        let closeTn = null;\n\n        if (tn === $.LI && elementTn === $.LI) {\n            closeTn = $.LI;\n        } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {\n            closeTn = elementTn;\n        }\n\n        if (closeTn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);\n            p.openElements.popUntilTagNamePopped(closeTn);\n            break;\n        }\n\n        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {\n            break;\n        }\n    }\n\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n}\n\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\n\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);\n\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\n\nfunction tableStartTagInBody(p, token) {\n    if (\n        p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS &&\n        p.openElements.hasInButtonScope($.P)\n    ) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = IN_TABLE_MODE;\n}\n\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {\n        p.framesetOk = false;\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\n\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction imageStartTagInBody(p, token) {\n    token.tagName = $.IMG;\n    areaStartTagInBody(p, token);\n}\n\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = Tokenizer.MODE.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = TEXT_MODE;\n}\n\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as a rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n\n    if (\n        p.insertionMode === IN_TABLE_MODE ||\n        p.insertionMode === IN_CAPTION_MODE ||\n        p.insertionMode === IN_TABLE_BODY_MODE ||\n        p.insertionMode === IN_ROW_MODE ||\n        p.insertionMode === IN_CELL_MODE\n    ) {\n        p.insertionMode = IN_SELECT_IN_TABLE_MODE;\n    } else {\n        p.insertionMode = IN_SELECT_MODE;\n    }\n}\n\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagName === $.OPTION) {\n        p.openElements.pop();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction menuStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    } else {\n        p._insertElement(token, NS.MATHML);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    } else {\n        p._insertElement(token, NS.SVG);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction startTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.P) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.A) {\n                aStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.OL || tn === $.UL) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderStartTagInBody(p, token);\n            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {\n                listItemStartTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.BR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.HR) {\n                hrStartTagInBody(p, token);\n            } else if (tn === $.RB) {\n                rbStartTagInBody(p, token);\n            } else if (tn === $.RT || tn === $.RP) {\n                rtStartTagInBody(p, token);\n            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.PRE) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.BIG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.IMG || tn === $.WBR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.XMP) {\n                xmpStartTagInBody(p, token);\n            } else if (tn === $.SVG) {\n                svgStartTagInBody(p, token);\n            } else if (tn === $.RTC) {\n                rbStartTagInBody(p, token);\n            } else if (tn !== $.COL) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                htmlStartTagInBody(p, token);\n            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {\n                startTagInHead(p, token);\n            } else if (tn === $.BODY) {\n                bodyStartTagInBody(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formStartTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.NOBR) {\n                nobrStartTagInBody(p, token);\n            } else if (tn === $.AREA) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.MATH) {\n                mathStartTagInBody(p, token);\n            } else if (tn === $.MENU) {\n                menuStartTagInBody(p, token);\n            } else if (tn !== $.HEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.STYLE || tn === $.TITLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.ASIDE) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.TABLE) {\n                tableStartTagInBody(p, token);\n            } else if (tn === $.EMBED) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInBody(p, token);\n            } else if (tn === $.PARAM || tn === $.TRACK) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IMAGE) {\n                imageStartTagInBody(p, token);\n            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.BUTTON) {\n                buttonStartTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.KEYGEN) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.SOURCE) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IFRAME) {\n                iframeStartTagInBody(p, token);\n            } else if (tn === $.SELECT) {\n                selectStartTagInBody(p, token);\n            } else if (tn === $.OPTION) {\n                optgroupStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.BGSOUND) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.DETAILS ||\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.LISTING) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.NOEMBED) {\n                noembedStartTagInBody(p, token);\n            } else if (tn !== $.CAPTION) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.BASEFONT) {\n                startTagInHead(p, token);\n            } else if (tn === $.FRAMESET) {\n                framesetStartTagInBody(p, token);\n            } else if (tn === $.FIELDSET) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.TEXTAREA) {\n                textareaStartTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else if (tn === $.NOSCRIPT) {\n                if (p.options.scriptingEnabled) {\n                    noembedStartTagInBody(p, token);\n                } else {\n                    genericStartTagInBody(p, token);\n                }\n            } else if (tn === $.OPTGROUP) {\n                optgroupStartTagInBody(p, token);\n            } else if (tn !== $.COLGROUP) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 9:\n            if (tn === $.PLAINTEXT) {\n                plaintextStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericStartTagInBody(p, token);\n    }\n}\n\nfunction bodyEndTagInBody(p) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n    }\n}\n\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n        p._processToken(token);\n    }\n}\n\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const formElement = p.formElement;\n\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        } else {\n            p.openElements.remove(formElement);\n        }\n    }\n}\n\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement($.P);\n    }\n\n    p._closePElement();\n}\n\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\n\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\n\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\n\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement($.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\n\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getTagName(element) === tn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tn);\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            break;\n        }\n    }\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction endTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.P) {\n                pEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.UL || tn === $.OL) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.LI) {\n                liEndTagInBody(p, token);\n            } else if (tn === $.DD || tn === $.DT) {\n                ddEndTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderEndTagInBody(p, token);\n            } else if (tn === $.BR) {\n                brEndTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.BIG) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.BODY) {\n                bodyEndTagInBody(p, token);\n            } else if (tn === $.HTML) {\n                htmlEndTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formEndTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.ASIDE) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletEndTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.DETAILS ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY ||\n                tn === $.LISTING\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.FIELDSET) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                endTagInHead(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericEndTagInBody(p, token);\n    }\n}\n\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStackTop > -1) {\n        eofInTemplate(p, token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    if (token.tagName === $.SCRIPT) {\n        p.pendingScript = p.openElements.current;\n    }\n\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\n\nfunction eofInText(p, token) {\n    p._err(ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    const curTn = p.openElements.currentTagName;\n\n    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {\n        p.pendingCharacterTokens = [];\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = IN_TABLE_TEXT_MODE;\n        p._processToken(token);\n    } else {\n        tokenInTable(p, token);\n    }\n}\n\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_CAPTION_MODE;\n}\n\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n}\n\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.COLGROUP);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n    p._processToken(token);\n}\n\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n}\n\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.TBODY);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n    p._processToken(token);\n}\n\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processToken(token);\n    }\n}\n\nfunction inputStartTagInTable(p, token) {\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {\n        p._appendElement(token, NS.HTML);\n    } else {\n        tokenInTable(p, token);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\n\nfunction startTagInTable(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH || tn === $.TR) {\n                tdStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.COL) {\n                colStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.FORM) {\n                formStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                tableStartTagInTable(p, token);\n            } else if (tn === $.STYLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n                tbodyStartTagInTable(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.CAPTION) {\n                captionStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.COLGROUP) {\n                colgroupStartTagInTable(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        default:\n            tokenInTable(p, token);\n    }\n}\n\nfunction endTagInTable(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TABLE)) {\n            p.openElements.popUntilTagNamePopped($.TABLE);\n            p._resetInsertionMode();\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.CAPTION &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        tokenInTable(p, token);\n    }\n}\n\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n\n    p.fosterParentingEnabled = true;\n    p._processTokenInBodyMode(token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\n\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\n\nfunction tokenInTableText(p, token) {\n    let i = 0;\n\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    } else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.CAPTION || tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n\n            if (tn === $.TABLE) {\n                p._processToken(token);\n            }\n        }\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.COL) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    } else {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction endTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.COLGROUP) {\n        if (p.openElements.currentTagName === $.COLGROUP) {\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (tn !== $.COL) {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagName === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = IN_TABLE_MODE;\n        p._processToken(token);\n    }\n}\n\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_ROW_MODE;\n    } else if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertFakeElement($.TR);\n        p.insertionMode = IN_ROW_MODE;\n        p._processToken(token);\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD\n    ) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableRowContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_CELL_MODE;\n        p.activeFormattingElements.insertMarker();\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TD || tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped(tn);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_ROW_MODE;\n        }\n    } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.OPTGROUP) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n\n            if (tn !== $.SELECT) {\n                p._processToken(token);\n            }\n        }\n    } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.OPTGROUP) {\n        const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];\n        const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);\n\n        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\n//12.2.5.4.17 The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        startTagInSelect(p, token);\n    }\n}\n\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p._processToken(token);\n        }\n    } else {\n        endTagInSelect(p, token);\n    }\n}\n\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        startTagInHead(p, token);\n    } else {\n        const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;\n\n        p._popTmplInsertionMode();\n        p._pushTmplInsertionMode(newInsertionMode);\n        p.insertionMode = newInsertionMode;\n        p._processToken(token);\n    }\n}\n\nfunction endTagInTemplate(p, token) {\n    if (token.tagName === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p._popTmplInsertionMode();\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction endTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = AFTER_AFTER_BODY_MODE;\n        }\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.FRAME) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInFrameset(p, token) {\n    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n\n        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {\n            p.insertionMode = AFTER_FRAMESET_MODE;\n        }\n    }\n}\n\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagName === $.HTML) {\n        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;\n    }\n}\n\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\n\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token) && !p.fragmentContext) {\n        while (\n            p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n            !p._isIntegrationPoint(p.openElements.current)\n        ) {\n            p.openElements.pop();\n        }\n\n        p._processToken(token);\n    } else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n\n        foreignContent.adjustTokenXMLAttrs(token);\n\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        } else {\n            p._insertElement(token, currentNs);\n        }\n\n        token.ackSelfClosing = true;\n    }\n}\n\nfunction endTagInForeignContent(p, token) {\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._processToken(token);\n            break;\n        }\n\n        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n    }\n}\n","'use strict';\n\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Element utils\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction isImpliedEndTagRequired(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;\n\n        case 3:\n            return tn === $.RTC;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 8:\n            return tn === $.OPTGROUP;\n    }\n\n    return false;\n}\n\nfunction isImpliedEndTagRequiredThoroughly(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return (\n                tn === $.RB ||\n                tn === $.RP ||\n                tn === $.RT ||\n                tn === $.DD ||\n                tn === $.DT ||\n                tn === $.LI ||\n                tn === $.TD ||\n                tn === $.TH ||\n                tn === $.TR\n            );\n\n        case 3:\n            return tn === $.RTC;\n\n        case 5:\n            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 7:\n            return tn === $.CAPTION;\n\n        case 8:\n            return tn === $.OPTGROUP || tn === $.COLGROUP;\n    }\n\n    return false;\n}\n\nfunction isScopingElement(tn, ns) {\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH) {\n                return ns === NS.HTML;\n            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {\n                return ns === NS.MATHML;\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                return ns === NS.HTML;\n            } else if (tn === $.DESC) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                return ns === NS.HTML;\n            } else if (tn === $.MTEXT) {\n                return ns === NS.MATHML;\n            } else if (tn === $.TITLE) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 6:\n            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;\n\n        case 7:\n            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;\n\n        case 8:\n            return tn === $.TEMPLATE && ns === NS.HTML;\n\n        case 13:\n            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;\n\n        case 14:\n            return tn === $.ANNOTATION_XML && ns === NS.MATHML;\n    }\n\n    return false;\n}\n\n//Stack of open elements\nclass OpenElementStack {\n    constructor(document, treeAdapter) {\n        this.stackTop = -1;\n        this.items = [];\n        this.current = document;\n        this.currentTagName = null;\n        this.currentTmplContent = null;\n        this.tmplCount = 0;\n        this.treeAdapter = treeAdapter;\n    }\n\n    //Index of element\n    _indexOf(element) {\n        let idx = -1;\n\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                idx = i;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);\n\n        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;\n    }\n\n    //Mutations\n    push(element) {\n        this.items[++this.stackTop] = element;\n        this._updateCurrentElement();\n\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n    }\n\n    pop() {\n        this.stackTop--;\n\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n\n        this._updateCurrentElement();\n    }\n\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n\n        this.items[idx] = newElement;\n\n        if (idx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    insertAfter(referenceElement, newElement) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n\n        this.items.splice(insertionIdx, 0, newElement);\n\n        if (insertionIdx === ++this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    popUntilTagNamePopped(tagName) {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === tagName && ns === NS.HTML) {\n                break;\n            }\n        }\n    }\n\n    popUntilElementPopped(element) {\n        while (this.stackTop > -1) {\n            const poppedElement = this.current;\n\n            this.pop();\n\n            if (poppedElement === element) {\n                break;\n            }\n        }\n    }\n\n    popUntilNumberedHeaderPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (\n                tn === $.H1 ||\n                tn === $.H2 ||\n                tn === $.H3 ||\n                tn === $.H4 ||\n                tn === $.H5 ||\n                (tn === $.H6 && ns === NS.HTML)\n            ) {\n                break;\n            }\n        }\n    }\n\n    popUntilTableCellPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === $.TD || (tn === $.TH && ns === NS.HTML)) {\n                break;\n            }\n        }\n    }\n\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.stackTop = 0;\n        this._updateCurrentElement();\n    }\n\n    clearBackToTableContext() {\n        while (\n            (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableBodyContext() {\n        while (\n            (this.currentTagName !== $.TBODY &&\n                this.currentTagName !== $.TFOOT &&\n                this.currentTagName !== $.THEAD &&\n                this.currentTagName !== $.TEMPLATE &&\n                this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableRowContext() {\n        while (\n            (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    remove(element) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                this.items.splice(i, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                break;\n            }\n        }\n    }\n\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        const element = this.items[1];\n\n        return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;\n    }\n\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n\n    getCommonAncestor(element) {\n        let elementIdx = this._indexOf(element);\n\n        return --elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.currentTagName === $.HTML;\n    }\n\n    //Element in scope\n    hasInScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (\n                (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) &&\n                ns === NS.HTML\n            ) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInListItemScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInButtonScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn !== $.OPTION && tn !== $.OPTGROUP) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (isImpliedEndTagRequired(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsThoroughly() {\n        while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsWithExclusion(exclusionTagName) {\n        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {\n            this.pop();\n        }\n    }\n}\n\nmodule.exports = OpenElementStack;\n","'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n","'use strict';\n\n//NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption\n//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)\nmodule.exports = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);","'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n","'use strict';\n\nconst { DOCUMENT_MODE } = require('../common/html');\n\n//Node construction\nexports.createDocument = function() {\n    return {\n        nodeName: '#document',\n        mode: DOCUMENT_MODE.NO_QUIRKS,\n        childNodes: []\n    };\n};\n\nexports.createDocumentFragment = function() {\n    return {\n        nodeName: '#document-fragment',\n        childNodes: []\n    };\n};\n\nexports.createElement = function(tagName, namespaceURI, attrs) {\n    return {\n        nodeName: tagName,\n        tagName: tagName,\n        attrs: attrs,\n        namespaceURI: namespaceURI,\n        childNodes: [],\n        parentNode: null\n    };\n};\n\nexports.createCommentNode = function(data) {\n    return {\n        nodeName: '#comment',\n        data: data,\n        parentNode: null\n    };\n};\n\nconst createTextNode = function(value) {\n    return {\n        nodeName: '#text',\n        value: value,\n        parentNode: null\n    };\n};\n\n//Tree mutation\nconst appendChild = (exports.appendChild = function(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n});\n\nconst insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n});\n\nexports.setTemplateContent = function(templateElement, contentElement) {\n    templateElement.content = contentElement;\n};\n\nexports.getTemplateContent = function(templateElement) {\n    return templateElement.content;\n};\n\nexports.setDocumentType = function(document, name, publicId, systemId) {\n    let doctypeNode = null;\n\n    for (let i = 0; i < document.childNodes.length; i++) {\n        if (document.childNodes[i].nodeName === '#documentType') {\n            doctypeNode = document.childNodes[i];\n            break;\n        }\n    }\n\n    if (doctypeNode) {\n        doctypeNode.name = name;\n        doctypeNode.publicId = publicId;\n        doctypeNode.systemId = systemId;\n    } else {\n        appendChild(document, {\n            nodeName: '#documentType',\n            name: name,\n            publicId: publicId,\n            systemId: systemId\n        });\n    }\n};\n\nexports.setDocumentMode = function(document, mode) {\n    document.mode = mode;\n};\n\nexports.getDocumentMode = function(document) {\n    return document.mode;\n};\n\nexports.detachNode = function(node) {\n    if (node.parentNode) {\n        const idx = node.parentNode.childNodes.indexOf(node);\n\n        node.parentNode.childNodes.splice(idx, 1);\n        node.parentNode = null;\n    }\n};\n\nexports.insertText = function(parentNode, text) {\n    if (parentNode.childNodes.length) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n        if (prevNode.nodeName === '#text') {\n            prevNode.value += text;\n            return;\n        }\n    }\n\n    appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n    if (prevNode && prevNode.nodeName === '#text') {\n        prevNode.value += text;\n    } else {\n        insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n};\n\nexports.adoptAttributes = function(recipient, attrs) {\n    const recipientAttrsMap = [];\n\n    for (let i = 0; i < recipient.attrs.length; i++) {\n        recipientAttrsMap.push(recipient.attrs[i].name);\n    }\n\n    for (let j = 0; j < attrs.length; j++) {\n        if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {\n            recipient.attrs.push(attrs[j]);\n        }\n    }\n};\n\n//Tree traversing\nexports.getFirstChild = function(node) {\n    return node.childNodes[0];\n};\n\nexports.getChildNodes = function(node) {\n    return node.childNodes;\n};\n\nexports.getParentNode = function(node) {\n    return node.parentNode;\n};\n\nexports.getAttrList = function(element) {\n    return element.attrs;\n};\n\n//Node data\nexports.getTagName = function(element) {\n    return element.tagName;\n};\n\nexports.getNamespaceURI = function(element) {\n    return element.namespaceURI;\n};\n\nexports.getTextNodeContent = function(textNode) {\n    return textNode.value;\n};\n\nexports.getCommentNodeContent = function(commentNode) {\n    return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function(doctypeNode) {\n    return doctypeNode.name;\n};\n\nexports.getDocumentTypeNodePublicId = function(doctypeNode) {\n    return doctypeNode.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function(doctypeNode) {\n    return doctypeNode.systemId;\n};\n\n//Node types\nexports.isTextNode = function(node) {\n    return node.nodeName === '#text';\n};\n\nexports.isCommentNode = function(node) {\n    return node.nodeName === '#comment';\n};\n\nexports.isDocumentTypeNode = function(node) {\n    return node.nodeName === '#documentType';\n};\n\nexports.isElementNode = function(node) {\n    return !!node.tagName;\n};\n\n// Source code location\nexports.setNodeSourceCodeLocation = function(node, location) {\n    node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function(node) {\n    return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function(node, endLocation) {\n    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};\n","'use strict';\n\nmodule.exports = function mergeOptions(defaults, options) {\n    options = options || Object.create(null);\n\n    return [defaults, options].reduce((merged, optObj) => {\n        Object.keys(optObj).forEach(key => {\n            merged[key] = optObj[key];\n        });\n\n        return merged;\n    }, Object.create(null));\n};\n","'use strict';\n\nclass Mixin {\n    constructor(host) {\n        const originalMethods = {};\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n\n        for (const key of Object.keys(overriddenMethods)) {\n            if (typeof overriddenMethods[key] === 'function') {\n                originalMethods[key] = host[key];\n                host[key] = overriddenMethods[key];\n            }\n        }\n    }\n\n    _getOverriddenMethods() {\n        throw new Error('Not implemented');\n    }\n}\n\nMixin.install = function(host, Ctor, opts) {\n    if (!host.__mixins) {\n        host.__mixins = [];\n    }\n\n    for (let i = 0; i < host.__mixins.length; i++) {\n        if (host.__mixins[i].constructor === Ctor) {\n            return host.__mixins[i];\n        }\n    }\n\n    const mixin = new Ctor(host, opts);\n\n    host.__mixins.push(mixin);\n\n    return mixin;\n};\n\nmodule.exports = Mixin;\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * @typedef {import('reading-time').Options['wordBound']} WordBoundFunction\n */\n\n/**\n * @param {number} number\n * @param {number[][]} arrayOfRanges\n */\nfunction codeIsInRanges(number, arrayOfRanges) {\n  return arrayOfRanges.some(([lowerBound, upperBound]) =>\n    (lowerBound <= number) && (number <= upperBound)\n  )\n}\n\n/**\n * @type {WordBoundFunction}\n */\nfunction isCJK(c) {\n  if ('string' !== typeof c) {\n    return false\n  }\n  const charCode = c.charCodeAt(0)\n  // Help wanted!\n  // This should be good for most cases, but if you find it unsatisfactory\n  // (e.g. some other language where each character should be standalone words),\n  // contributions welcome!\n  return codeIsInRanges(\n    charCode,\n    [\n      // Hiragana (Katakana not included on purpose,\n      // context: https://github.com/ngryman/reading-time/pull/35#issuecomment-853364526)\n      // If you think Katakana should be included and have solid reasons, improvement is welcomed\n      [0x3040, 0x309f],\n      // CJK Unified ideographs\n      [0x4e00, 0x9fff],\n      // Hangul\n      [0xac00, 0xd7a3],\n      // CJK extensions\n      [0x20000, 0x2ebe0]\n    ]\n  )\n}\n\n/**\n * @type {WordBoundFunction}\n */\nfunction isAnsiWordBound(c) {\n  return ' \\n\\r\\t'.includes(c)\n}\n\n/**\n * @type {WordBoundFunction}\n */\nfunction isPunctuation(c) {\n  if ('string' !== typeof c) {\n    return false\n  }\n  const charCode = c.charCodeAt(0)\n  return codeIsInRanges(\n    charCode,\n    [\n      [0x21, 0x2f],\n      [0x3a, 0x40],\n      [0x5b, 0x60],\n      [0x7b, 0x7e],\n      // CJK Symbols and Punctuation\n      [0x3000, 0x303f],\n      // Full-width ASCII punctuation variants\n      [0xff00, 0xffef]\n    ]\n  )\n}\n\n/**\n * @type {import('reading-time').default}\n */\nfunction readingTime(text, options = {}) {\n  let words = 0, start = 0, end = text.length - 1\n\n  // use provided value if available\n  const wordsPerMinute = options.wordsPerMinute || 200\n\n  // use provided function if available\n  const isWordBound = options.wordBound || isAnsiWordBound\n\n  // fetch bounds\n  while (isWordBound(text[start])) start++\n  while (isWordBound(text[end])) end--\n\n  // Add a trailing word bound to make handling edges more convenient\n  const normalizedText = `${text}\\n`\n\n  // calculate the number of words\n  for (let i = start; i <= end; i++) {\n    // A CJK character is a always word;\n    // A non-word bound followed by a word bound / CJK is the end of a word.\n    if (\n      isCJK(normalizedText[i]) ||\n      (!isWordBound(normalizedText[i]) &&\n        (isWordBound(normalizedText[i + 1]) || isCJK(normalizedText[i + 1]))\n      )\n    ) {\n      words++\n    }\n    // In case of CJK followed by punctuations, those characters have to be eaten as well\n    if (isCJK(normalizedText[i])) {\n      while (\n        i <= end &&\n        (isPunctuation(normalizedText[i + 1]) || isWordBound(normalizedText[i + 1]))\n      ) {\n        i++\n      }\n    }\n  }\n\n  // reading time stats\n  const minutes = words / wordsPerMinute\n  // Math.round used to resolve floating point funkyness\n  //   http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\n  const time = Math.round(minutes * 60 * 1000)\n  const displayed = Math.ceil(minutes.toFixed(2))\n\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  }\n}\n\n/**\n * Export\n */\nmodule.exports = readingTime\n","\"use strict\";\n\n// eslint-disable-next-line no-unused-vars\nvar debug = require('debug')('tokenizer');\n\nfunction compact(str) {\n  var res = str.trim();\n  res = res.replace('  ', ' ');\n  return res;\n}\n\nfunction Tokenizer(username, botname) {\n\n  // // Maybe it is not useful\n  // if (!(this instanceof Tokenizer)) {\n  //   return new Tokenizer();\n  // }\n\n  this.username = username || 'Guy';\n  this.entry = null;\n  this.sentences = null;\n\n  if (typeof botname == 'string') {\n    this.botname = botname;\n  }\n  else {\n    this.botname = 'ECTOR';\n  }\n}\n\nTokenizer.prototype = {\n  setEntry : function (entry) {\n    this.entry = compact(entry);\n    this.sentences = null;\n  },\n  // Split the entry into sentences.\n  getSentences : function () {\n    // this.sentences = this.entry.split(/[\\.!]\\s/);\n    if (!this.entry) return [];\n    var words = this.entry.split(' ');\n    var endingWords = words.filter(function(w) {\n      return w.endsWith('.') || w.endsWith('!') || w.endsWith('?');\n    });\n\n    var self = this;\n    var botnameRegExp = new RegExp(\"\\\\W?\" + self.botname.normalize() + \"\\\\W?\");\n    var usernameRegExp = new RegExp(\"\\\\W?\" + self.username.normalize() + \"\\\\W?\");\n    var lastSentence = words[0];\n    self.sentences = [];\n    words.reduce(function (prev, cur) {\n      var curNormalized = cur.normalize();\n      var curReplaced = cur;\n      if (curNormalized.search(botnameRegExp) !== -1) {\n        curReplaced = cur.replace(self.botname,\"{yourname}\");\n      }\n      else if (curNormalized.search(usernameRegExp) !== -1) {\n        curReplaced = cur.replace(self.username,\"{myname}\");\n      }\n\n      if (endingWords.indexOf(prev) != -1) {\n        self.sentences.push(compact(lastSentence));\n        lastSentence = \"\";\n      }\n      lastSentence = lastSentence + \" \" + curReplaced;\n      return cur;\n    });\n    self.sentences.push(compact(lastSentence));\n    return this.sentences;\n  },\n  // Get the tokens of one sentence\n  getTokens : function (sentenceIndex) {\n    var s = 0;\n    if(typeof sentenceIndex === 'number') s = sentenceIndex;\n    return this.sentences[s].split(' ');\n  }\n};\n\nmodule.exports = Tokenizer;","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\nfunction log(...args) {\n\t// This hackery is required for IE8/9, where\n\t// the `console.log` function doesn't have 'apply'\n\treturn typeof console === 'object' &&\n\t\tconsole.log &&\n\t\tconsole.log(...args);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\treturn createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","'use strict'\n\nvar iterate = require('array-iterate')\n\nmodule.exports = modifierFactory\n\n// Turn `callback` into a child-modifier accepting a parent.  See\n// `array-iterate` for more info.\nfunction modifierFactory(callback) {\n  return iteratorFactory(wrapperFactory(callback))\n}\n\n// Turn `callback` into a `iterator' accepting a parent.\nfunction iteratorFactory(callback) {\n  return iterator\n\n  function iterator(parent) {\n    var children = parent && parent.children\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `modifier`')\n    }\n\n    iterate(children, callback, parent)\n  }\n}\n\n// Pass the context as the third argument to `callback`.\nfunction wrapperFactory(callback) {\n  return wrapper\n\n  function wrapper(value, index) {\n    return callback(value, index, this)\n  }\n}\n","'use strict'\n\nmodule.exports = visitChildren\n\nfunction visitChildren(callback) {\n  return visitor\n\n  // Visit `parent`, invoking `callback` for each child.\n  function visitor(parent) {\n    var index = -1\n    var children = parent && parent.children\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `visitor`')\n    }\n\n    while (++index in children) {\n      callback(children[index], index, parent)\n    }\n  }\n}\n","module.exports = window[\"lodash\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"editPost\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"plugins\"];","module.exports = window[\"wp\"][\"wordcount\"];","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10\n  // (2019). This influences support for strict mode, the set of\n  // reserved words, and support for new syntax features. The default\n  // is 10.\n  ecmaVersion: 10,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = {};\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };\nprototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n// Switch to a getter for 7.0.0.\nParser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91) { return true } // '['\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock(true, node)\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (this.options.ecmaVersion > 10 && starttype === types._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this.type === types._case || this.type === types._default) {\n      var isCase = this.type === types._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var isForIn = this.type === types._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  } else if (init.type === \"AssignmentPattern\") {\n    this.raise(init.start, \"Invalid left-hand side in for-loop\");\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (this.type !== types.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassElement = function(constructorAllowsSuper) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  var allowsDirectSuper = false;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n    allowsDirectSuper = constructorAllowsSuper;\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  if (this.type === types.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLVal(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseIdent(true);\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseIdent(true);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    this.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLVal(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types.comma); }\n    if (allowEmpty && this.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n      { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0)\n            { refDestructuringErrors.doubleProto = key.start; }\n          // Backwards-compat kludge. Can be removed in version 6.0\n        } else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(noIn) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= node.left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var coalesce = this.type === types.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLVal(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types.bracketL);\n  if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== \"never\");\n    node.computed = !!computed;\n    if (computed) { this.expect(types.bracketR); }\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  case types._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types.parenL:\n    return this.parseDynamicImport(node)\n  case types.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types.comma) && this.eat(types.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$3.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\")\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types.parenR) {\n      first ? first = false : this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.inNonArrowFunction())\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types.comma)\n      { elt = null; }\n    else if (this.type === types.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function(noIn) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign(noIn);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, false);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$5.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$5.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$5.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$5.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$5.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$5.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$5.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types._const || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nbuildUnicodeData(9);\nbuildUnicodeData(10);\nbuildUnicodeData(11);\n\nvar pp$8 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$8.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$8.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$8.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$8.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$8.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$8.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$8.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$8.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$8.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$8.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$8.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$8.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$8.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$8.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$8.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$8.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$8.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$8.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$8.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$8.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$8.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$8.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$8.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$8.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$8.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$8.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$8.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$8.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$8.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$8.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$8.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!has(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$8.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$8.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$8.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$8.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$8.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$8.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$8.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$8.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$8.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$8.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$9 = Parser.prototype;\n\n// Move to the next token\n\npp$9.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$9.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$9[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$9.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$9.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$9.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$9.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$9.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$9.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$9.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$9.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$9.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$9.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$9.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$9.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$9.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$9.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$9.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$9.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$9.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types.assign, 3) }\n      }\n      return this.finishOp(types.coalesce, 2)\n    }\n  }\n  return this.finishOp(types.question, 1)\n};\n\npp$9.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString$1(code) + \"'\");\n};\n\npp$9.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$9.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp$9.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$9.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$9.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString$1(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$9.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$9.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$9.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$9.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$9.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$9.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString$1(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$9.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$9.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString$1(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$9.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"7.4.1\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types,\n  keywordTypes: keywords$1,\n  TokContext: TokContext,\n  tokContexts: types$1,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords$1 as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types$1 as tokContexts, types as tokTypes, tokenizer, version };\n","/** @type {Record<string, number>} */\nexport const afinn165 = {\n  abandon: -2,\n  abandoned: -2,\n  abandons: -2,\n  abducted: -2,\n  abduction: -2,\n  abductions: -2,\n  abhor: -3,\n  abhorred: -3,\n  abhorrent: -3,\n  abhors: -3,\n  abilities: 2,\n  ability: 2,\n  aboard: 1,\n  aborted: -1,\n  aborts: -1,\n  absentee: -1,\n  absentees: -1,\n  absolve: 2,\n  absolved: 2,\n  absolves: 2,\n  absolving: 2,\n  absorbed: 1,\n  abuse: -3,\n  abused: -3,\n  abuses: -3,\n  abusing: -3,\n  abusive: -3,\n  accept: 1,\n  acceptable: 1,\n  acceptance: 1,\n  accepted: 1,\n  accepting: 1,\n  accepts: 1,\n  accessible: 1,\n  accident: -2,\n  accidental: -2,\n  accidentally: -2,\n  accidents: -2,\n  acclaim: 2,\n  acclaimed: 2,\n  accolade: 2,\n  accomplish: 2,\n  accomplished: 2,\n  accomplishes: 2,\n  accomplishment: 2,\n  accomplishments: 2,\n  accusation: -2,\n  accusations: -2,\n  accuse: -2,\n  accused: -2,\n  accuses: -2,\n  accusing: -2,\n  ache: -2,\n  achievable: 1,\n  aching: -2,\n  acquit: 2,\n  acquits: 2,\n  acquitted: 2,\n  acquitting: 2,\n  acrimonious: -3,\n  active: 1,\n  adequate: 1,\n  admire: 3,\n  admired: 3,\n  admires: 3,\n  admiring: 3,\n  admit: -1,\n  admits: -1,\n  admitted: -1,\n  admonish: -2,\n  admonished: -2,\n  adopt: 1,\n  adopts: 1,\n  adorable: 3,\n  adoration: 3,\n  adore: 3,\n  adored: 3,\n  adores: 3,\n  adoring: 3,\n  adoringly: 3,\n  advanced: 1,\n  advantage: 2,\n  advantageous: 2,\n  advantageously: 2,\n  advantages: 2,\n  adventure: 2,\n  adventures: 2,\n  adventurous: 2,\n  adversary: -1,\n  advisable: 1,\n  affected: -1,\n  affection: 3,\n  affectionate: 3,\n  affectionateness: 3,\n  afflicted: -1,\n  affordable: 2,\n  affronted: -1,\n  aficionados: 2,\n  afraid: -2,\n  aggravate: -2,\n  aggravated: -2,\n  aggravates: -2,\n  aggravating: -2,\n  aggression: -2,\n  aggressions: -2,\n  aggressive: -2,\n  aggressiveness: -2,\n  aghast: -2,\n  agog: 2,\n  agonise: -3,\n  agonised: -3,\n  agonises: -3,\n  agonising: -3,\n  agonize: -3,\n  agonized: -3,\n  agonizes: -3,\n  agonizing: -3,\n  agree: 1,\n  agreeable: 2,\n  agreed: 1,\n  agreement: 1,\n  agrees: 1,\n  alarm: -2,\n  alarmed: -2,\n  alarmist: -2,\n  alarmists: -2,\n  alas: -1,\n  alert: -1,\n  alienation: -2,\n  alive: 1,\n  allegation: -2,\n  allegations: -2,\n  allergic: -2,\n  allow: 1,\n  ally: 2,\n  alone: -2,\n  altruistic: 2,\n  amaze: 2,\n  amazed: 2,\n  amazes: 2,\n  amazing: 4,\n  ambitious: 2,\n  ambivalent: -1,\n  amicable: 2,\n  amuse: 3,\n  amused: 3,\n  amusement: 3,\n  amusements: 3,\n  anger: -3,\n  angered: -3,\n  angers: -3,\n  angry: -3,\n  anguish: -3,\n  anguished: -3,\n  animosity: -2,\n  annoy: -2,\n  annoyance: -2,\n  annoyed: -2,\n  annoying: -2,\n  annoys: -2,\n  antagonistic: -2,\n  anti: -1,\n  anticipation: 1,\n  anxiety: -2,\n  anxious: -2,\n  apathetic: -3,\n  apathy: -3,\n  apeshit: -3,\n  apocalyptic: -2,\n  apologise: -1,\n  apologised: -1,\n  apologises: -1,\n  apologising: -1,\n  apologize: -1,\n  apologized: -1,\n  apologizes: -1,\n  apologizing: -1,\n  apology: -1,\n  appalled: -2,\n  appalling: -2,\n  appealing: 2,\n  appease: 2,\n  appeased: 2,\n  appeases: 2,\n  appeasing: 2,\n  applaud: 2,\n  applauded: 2,\n  applauding: 2,\n  applauds: 2,\n  applause: 2,\n  appreciate: 2,\n  appreciated: 2,\n  appreciates: 2,\n  appreciating: 2,\n  appreciation: 2,\n  apprehensive: -2,\n  appropriate: 2,\n  appropriately: 2,\n  approval: 2,\n  approved: 2,\n  approves: 2,\n  ardent: 1,\n  arrest: -2,\n  arrested: -3,\n  arrests: -2,\n  arrogant: -2,\n  arsehole: -4,\n  ashame: -2,\n  ashamed: -2,\n  ass: -4,\n  assassination: -3,\n  assassinations: -3,\n  assault: -2,\n  assaults: -2,\n  asset: 2,\n  assets: 2,\n  assfucking: -4,\n  asshole: -4,\n  astonished: 2,\n  astound: 3,\n  astounded: 3,\n  astounding: 3,\n  astoundingly: 3,\n  astounds: 3,\n  atrocious: -3,\n  atrocity: -3,\n  attack: -1,\n  attacked: -1,\n  attacking: -1,\n  attacks: -1,\n  attract: 1,\n  attracted: 1,\n  attracting: 2,\n  attraction: 2,\n  attractions: 2,\n  attractive: 2,\n  attractively: 2,\n  attractiveness: 2,\n  attracts: 1,\n  audacious: 3,\n  aura: 1,\n  authority: 1,\n  avenge: -2,\n  avenged: -2,\n  avenger: -2,\n  avengers: -2,\n  avenges: -2,\n  avenging: -2,\n  avert: -1,\n  averted: -1,\n  averts: -1,\n  avid: 2,\n  avoid: -1,\n  avoided: -1,\n  avoids: -1,\n  await: -1,\n  awaited: -1,\n  awaits: -1,\n  award: 3,\n  awarded: 3,\n  awards: 3,\n  awesome: 4,\n  awful: -3,\n  awkward: -2,\n  axe: -1,\n  axed: -1,\n  backed: 1,\n  backing: 2,\n  backs: 1,\n  bad: -3,\n  'bad luck': -2,\n  badass: -3,\n  badly: -3,\n  badness: -3,\n  bailout: -2,\n  balanced: 1,\n  bamboozle: -2,\n  bamboozled: -2,\n  bamboozles: -2,\n  ban: -2,\n  banish: -1,\n  bankrupt: -3,\n  bankruptcy: -3,\n  bankster: -3,\n  banned: -2,\n  barbarian: -2,\n  barbaric: -2,\n  barbarous: -2,\n  bargain: 2,\n  barrier: -2,\n  bastard: -5,\n  bastards: -5,\n  battle: -1,\n  battled: -1,\n  battles: -1,\n  battling: -2,\n  beaten: -2,\n  beatific: 3,\n  beating: -1,\n  beauties: 3,\n  beautiful: 3,\n  beautifully: 3,\n  beautify: 3,\n  beauty: 3,\n  befit: 2,\n  befitting: 2,\n  belittle: -2,\n  belittled: -2,\n  beloved: 3,\n  benefactor: 2,\n  benefactors: 2,\n  benefit: 2,\n  benefits: 2,\n  benefitted: 2,\n  benefitting: 2,\n  benevolent: 3,\n  bereave: -2,\n  bereaved: -2,\n  bereaves: -2,\n  bereaving: -2,\n  best: 3,\n  'best damn': 4,\n  betray: -3,\n  betrayal: -3,\n  betrayed: -3,\n  betraying: -3,\n  betrays: -3,\n  better: 2,\n  bias: -1,\n  biased: -2,\n  big: 1,\n  bitch: -5,\n  bitches: -5,\n  bitter: -2,\n  bitterest: -2,\n  bitterly: -2,\n  bizarre: -2,\n  blackmail: -3,\n  blackmailed: -3,\n  blackmailing: -3,\n  blackmails: -3,\n  blah: -2,\n  blame: -2,\n  blamed: -2,\n  blames: -2,\n  blaming: -2,\n  bless: 2,\n  blesses: 2,\n  blessing: 3,\n  blessings: 3,\n  blind: -1,\n  bliss: 3,\n  blissful: 3,\n  blithe: 2,\n  bloated: -1,\n  block: -1,\n  blockade: -2,\n  blockbuster: 3,\n  blocked: -1,\n  blocking: -1,\n  blocks: -1,\n  bloody: -3,\n  blurry: -2,\n  boastful: -2,\n  bold: 2,\n  boldly: 2,\n  bomb: -1,\n  boost: 1,\n  boosted: 1,\n  boosting: 1,\n  boosts: 1,\n  bore: -2,\n  bored: -2,\n  boring: -3,\n  bother: -2,\n  bothered: -2,\n  bothers: -2,\n  bothersome: -2,\n  boycott: -2,\n  boycotted: -2,\n  boycotting: -2,\n  boycotts: -2,\n  brainwashing: -3,\n  brave: 2,\n  braveness: 2,\n  bravery: 2,\n  bravura: 3,\n  breach: -2,\n  breached: -2,\n  breaches: -2,\n  breaching: -2,\n  breakthrough: 3,\n  breathtaking: 5,\n  bribe: -3,\n  bribed: -3,\n  bribes: -3,\n  bribing: -3,\n  bright: 1,\n  brightest: 2,\n  brightness: 1,\n  brilliant: 4,\n  brilliance: 3,\n  brilliances: 3,\n  brisk: 2,\n  broke: -1,\n  broken: -1,\n  brooding: -2,\n  brutal: -3,\n  brutally: -3,\n  bullied: -2,\n  bullshit: -4,\n  bully: -2,\n  bullying: -2,\n  bummer: -2,\n  buoyant: 2,\n  burden: -2,\n  burdened: -2,\n  burdening: -2,\n  burdens: -2,\n  burglar: -2,\n  burglary: -2,\n  calm: 2,\n  calmed: 2,\n  calming: 2,\n  calms: 2,\n  \"can't stand\": -3,\n  cancel: -1,\n  cancelled: -1,\n  cancelling: -1,\n  cancels: -1,\n  cancer: -1,\n  capabilities: 1,\n  capability: 1,\n  capable: 1,\n  captivated: 3,\n  care: 2,\n  carefree: 1,\n  careful: 2,\n  carefully: 2,\n  carefulness: 2,\n  careless: -2,\n  cares: 2,\n  caring: 2,\n  'cashing in': -2,\n  casualty: -2,\n  catastrophe: -3,\n  catastrophic: -4,\n  cautious: -1,\n  celebrate: 3,\n  celebrated: 3,\n  celebrates: 3,\n  celebrating: 3,\n  celebration: 3,\n  celebrations: 3,\n  censor: -2,\n  censored: -2,\n  censors: -2,\n  certain: 1,\n  chagrin: -2,\n  chagrined: -2,\n  challenge: -1,\n  champion: 2,\n  championed: 2,\n  champions: 2,\n  chance: 2,\n  chances: 2,\n  chaos: -2,\n  chaotic: -2,\n  charged: -3,\n  charges: -2,\n  charisma: 2,\n  charitable: 2,\n  charm: 3,\n  charming: 3,\n  charmingly: 3,\n  charmless: -3,\n  chastise: -3,\n  chastised: -3,\n  chastises: -3,\n  chastising: -3,\n  cheat: -3,\n  cheated: -3,\n  cheater: -3,\n  cheaters: -3,\n  cheating: -3,\n  cheats: -3,\n  cheer: 2,\n  cheered: 2,\n  cheerful: 2,\n  cheerfully: 2,\n  cheering: 2,\n  cheerless: -2,\n  cheers: 2,\n  cheery: 3,\n  cherish: 2,\n  cherished: 2,\n  cherishes: 2,\n  cherishing: 2,\n  chic: 2,\n  chide: -3,\n  chided: -3,\n  chides: -3,\n  chiding: -3,\n  childish: -2,\n  chilling: -1,\n  choke: -2,\n  choked: -2,\n  chokes: -2,\n  choking: -2,\n  clarifies: 2,\n  clarity: 2,\n  clash: -2,\n  classy: 3,\n  clean: 2,\n  cleaner: 2,\n  clear: 1,\n  cleared: 1,\n  clearly: 1,\n  clears: 1,\n  clever: 2,\n  clouded: -1,\n  clueless: -2,\n  cock: -5,\n  cocksucker: -5,\n  cocksuckers: -5,\n  cocky: -2,\n  coerced: -2,\n  coercion: -2,\n  collapse: -2,\n  collapsed: -2,\n  collapses: -2,\n  collapsing: -2,\n  collide: -1,\n  collides: -1,\n  colliding: -1,\n  collision: -2,\n  collisions: -2,\n  colluding: -3,\n  combat: -1,\n  combats: -1,\n  comedy: 1,\n  comfort: 2,\n  comfortable: 2,\n  comfortably: 2,\n  comforting: 2,\n  comforts: 2,\n  comic: 1,\n  commend: 2,\n  commended: 2,\n  commit: 1,\n  commitment: 2,\n  commits: 1,\n  committed: 1,\n  committing: 1,\n  compassion: 2,\n  compassionate: 2,\n  compelled: 1,\n  competencies: 1,\n  competent: 2,\n  competitive: 2,\n  complacent: -2,\n  complain: -2,\n  complained: -2,\n  complaining: -2,\n  complains: -2,\n  complaint: -2,\n  complaints: -2,\n  complicating: -2,\n  compliment: 2,\n  complimented: 2,\n  compliments: 2,\n  comprehensive: 2,\n  concerned: -2,\n  conciliate: 2,\n  conciliated: 2,\n  conciliates: 2,\n  conciliating: 2,\n  condemn: -2,\n  condemnation: -2,\n  condemned: -2,\n  condemns: -2,\n  confidence: 2,\n  confident: 2,\n  confidently: 2,\n  conflict: -2,\n  conflicting: -2,\n  conflictive: -2,\n  conflicts: -2,\n  confuse: -2,\n  confused: -2,\n  confusing: -2,\n  congrats: 2,\n  congratulate: 2,\n  congratulation: 2,\n  congratulations: 2,\n  consent: 2,\n  consents: 2,\n  consolable: 2,\n  conspiracy: -3,\n  constipation: -2,\n  constrained: -2,\n  contagion: -2,\n  contagions: -2,\n  contagious: -1,\n  contaminant: -2,\n  contaminants: -2,\n  contaminate: -2,\n  contaminated: -2,\n  contaminates: -2,\n  contaminating: -2,\n  contamination: -2,\n  contaminations: -2,\n  contempt: -2,\n  contemptible: -2,\n  contemptuous: -2,\n  contemptuously: -2,\n  contend: -1,\n  contender: -1,\n  contending: -1,\n  contentious: -2,\n  contestable: -2,\n  controversial: -2,\n  controversially: -2,\n  controversies: -2,\n  controversy: -2,\n  convicted: -2,\n  convince: 1,\n  convinced: 1,\n  convinces: 1,\n  convivial: 2,\n  cool: 1,\n  'cool stuff': 3,\n  cornered: -2,\n  corpse: -1,\n  corrupt: -3,\n  corrupted: -3,\n  corrupting: -3,\n  corruption: -3,\n  corrupts: -3,\n  costly: -2,\n  courage: 2,\n  courageous: 2,\n  courageously: 2,\n  courageousness: 2,\n  courteous: 2,\n  courtesy: 2,\n  'cover-up': -3,\n  coward: -2,\n  cowardly: -2,\n  coziness: 2,\n  cramp: -1,\n  crap: -3,\n  crappy: -3,\n  crash: -2,\n  crazier: -2,\n  craziest: -2,\n  crazy: -2,\n  creative: 2,\n  crestfallen: -2,\n  cried: -2,\n  cries: -2,\n  crime: -3,\n  crimes: -3,\n  criminal: -3,\n  criminals: -3,\n  criminate: -3,\n  criminated: -3,\n  criminates: -3,\n  crisis: -3,\n  critic: -2,\n  criticise: -2,\n  criticised: -2,\n  criticises: -2,\n  criticising: -2,\n  criticism: -2,\n  criticize: -2,\n  criticized: -2,\n  criticizes: -2,\n  criticizing: -2,\n  critics: -2,\n  critique: -2,\n  crowding: -1,\n  crude: -1,\n  cruel: -3,\n  cruelty: -3,\n  crush: -1,\n  crushed: -2,\n  crushes: -1,\n  crushing: -1,\n  cry: -1,\n  crying: -2,\n  cunning: 2,\n  cunt: -5,\n  curious: 1,\n  curse: -1,\n  cut: -1,\n  cutback: -2,\n  cutbacks: -2,\n  cute: 2,\n  cuts: -1,\n  cutting: -1,\n  cynic: -2,\n  cynical: -2,\n  cynicism: -2,\n  damage: -3,\n  damaged: -3,\n  damages: -3,\n  damaging: -3,\n  damn: -2,\n  'damn cute': 3,\n  'damn good': 4,\n  damned: -4,\n  damnit: -4,\n  danger: -2,\n  dangerous: -2,\n  dangerously: -2,\n  daredevil: 2,\n  daring: 2,\n  darkest: -2,\n  darkness: -1,\n  dauntless: 2,\n  dazzling: 3,\n  dead: -3,\n  deadening: -2,\n  deadlock: -2,\n  deadly: -3,\n  deafening: -1,\n  dear: 2,\n  dearly: 3,\n  death: -2,\n  deaths: -2,\n  debonair: 2,\n  debt: -2,\n  deceit: -3,\n  deceitful: -3,\n  deceive: -3,\n  deceived: -3,\n  deceives: -3,\n  deceiving: -3,\n  deception: -3,\n  deceptive: -3,\n  decisive: 1,\n  dedicated: 2,\n  dedication: 2,\n  defeat: -2,\n  defeated: -2,\n  defect: -3,\n  defective: -3,\n  defects: -3,\n  defender: 2,\n  defenders: 2,\n  defenseless: -2,\n  defer: -1,\n  deferring: -1,\n  defiant: -1,\n  deficient: -2,\n  deficiency: -2,\n  deficiencies: -2,\n  deficit: -2,\n  deformed: -2,\n  deformities: -2,\n  deformity: -2,\n  defraud: -3,\n  defrauds: -3,\n  deft: 2,\n  defunct: -2,\n  degrade: -2,\n  degraded: -2,\n  degrades: -2,\n  dehumanize: -2,\n  dehumanized: -2,\n  dehumanizes: -2,\n  dehumanizing: -2,\n  deject: -2,\n  dejected: -2,\n  dejecting: -2,\n  dejects: -2,\n  delay: -1,\n  delayed: -1,\n  delectable: 3,\n  delicious: 3,\n  delight: 3,\n  delighted: 3,\n  delightful: 3,\n  delightfully: 3,\n  delighting: 3,\n  delights: 3,\n  demand: -1,\n  demanded: -1,\n  demanding: -1,\n  demands: -1,\n  demonstration: -1,\n  demoralize: -2,\n  demoralized: -2,\n  demoralizes: -2,\n  demoralizing: -2,\n  denial: -2,\n  denials: -2,\n  denied: -2,\n  denier: -2,\n  deniers: -2,\n  denies: -2,\n  denounce: -2,\n  denounces: -2,\n  dent: -2,\n  deny: -2,\n  denying: -2,\n  deplore: -3,\n  deplored: -3,\n  deplores: -3,\n  deploring: -3,\n  deport: -2,\n  deported: -2,\n  deporting: -2,\n  deports: -2,\n  deportation: -2,\n  deportations: -2,\n  depressed: -2,\n  depressing: -2,\n  deprivation: -3,\n  derail: -2,\n  derailed: -2,\n  derails: -2,\n  derelict: -2,\n  deride: -2,\n  derided: -2,\n  derides: -2,\n  deriding: -2,\n  derision: -2,\n  desirable: 2,\n  desire: 1,\n  desired: 2,\n  desirous: 2,\n  despair: -3,\n  despairing: -3,\n  despairs: -3,\n  desperate: -3,\n  desperately: -3,\n  despondent: -3,\n  destroy: -3,\n  destroyed: -3,\n  destroying: -3,\n  destroys: -3,\n  destruction: -3,\n  destructive: -3,\n  detached: -1,\n  detain: -2,\n  detained: -2,\n  detention: -2,\n  deteriorate: -2,\n  deteriorated: -2,\n  deteriorates: -2,\n  deteriorating: -2,\n  determined: 2,\n  deterrent: -2,\n  detract: -1,\n  detracted: -1,\n  detracts: -1,\n  devastate: -2,\n  devastated: -2,\n  devastating: -2,\n  devastation: -2,\n  devastations: -2,\n  devoted: 3,\n  devotion: 2,\n  devotional: 2,\n  diamond: 1,\n  dick: -4,\n  dickhead: -4,\n  die: -3,\n  died: -3,\n  difficult: -1,\n  diffident: -2,\n  dignity: 2,\n  dilemma: -1,\n  dilligence: 2,\n  dipshit: -3,\n  dire: -3,\n  direful: -3,\n  dirt: -2,\n  dirtier: -2,\n  dirtiest: -2,\n  dirty: -2,\n  disabilities: -2,\n  disability: -2,\n  disabling: -1,\n  disadvantage: -2,\n  disadvantaged: -2,\n  disagree: -2,\n  disagreeable: -2,\n  disagreement: -2,\n  disappear: -1,\n  disappeared: -1,\n  disappears: -1,\n  disappoint: -2,\n  disappointed: -2,\n  disappointing: -2,\n  disappointment: -2,\n  disappointments: -2,\n  disappoints: -2,\n  disapproval: -2,\n  disapprovals: -2,\n  disapprove: -2,\n  disapproved: -2,\n  disapproves: -2,\n  disapproving: -2,\n  disaster: -2,\n  disasters: -2,\n  disastrous: -3,\n  disbelieve: -2,\n  discard: -1,\n  discarded: -1,\n  discarding: -1,\n  discards: -1,\n  discernment: 2,\n  discomfort: -2,\n  disconsolate: -2,\n  disconsolation: -2,\n  discontented: -2,\n  discord: -2,\n  discounted: -1,\n  discouraged: -2,\n  discredited: -2,\n  discriminate: -2,\n  discriminated: -2,\n  discriminates: -2,\n  discriminating: -2,\n  discriminatory: -2,\n  disdain: -2,\n  disease: -1,\n  diseases: -1,\n  disgrace: -2,\n  disgraced: -2,\n  disguise: -1,\n  disguised: -1,\n  disguises: -1,\n  disguising: -1,\n  disgust: -3,\n  disgusted: -3,\n  disgustful: -3,\n  disgusting: -3,\n  disheartened: -2,\n  dishonest: -2,\n  disillusioned: -2,\n  disinclined: -2,\n  disjointed: -2,\n  dislike: -2,\n  disliked: -2,\n  dislikes: -2,\n  dismal: -2,\n  dismayed: -2,\n  dismissed: -2,\n  disorder: -2,\n  disorders: -2,\n  disorganized: -2,\n  disoriented: -2,\n  disparage: -2,\n  disparaged: -2,\n  disparages: -2,\n  disparaging: -2,\n  displeased: -2,\n  displeasure: -2,\n  disproportionate: -2,\n  dispute: -2,\n  disputed: -2,\n  disputes: -2,\n  disputing: -2,\n  disqualified: -2,\n  disquiet: -2,\n  disregard: -2,\n  disregarded: -2,\n  disregarding: -2,\n  disregards: -2,\n  disrespect: -2,\n  disrespected: -2,\n  disrupt: -2,\n  disrupted: -2,\n  disrupting: -2,\n  disruption: -2,\n  disruptions: -2,\n  disruptive: -2,\n  disrupts: -2,\n  dissatisfied: -2,\n  distasteful: -2,\n  distinguished: 2,\n  distort: -2,\n  distorted: -2,\n  distorting: -2,\n  distorts: -2,\n  distract: -2,\n  distracted: -2,\n  distraction: -2,\n  distracts: -2,\n  distress: -2,\n  distressed: -2,\n  distresses: -2,\n  distressing: -2,\n  distrust: -3,\n  distrustful: -3,\n  disturb: -2,\n  disturbed: -2,\n  disturbing: -2,\n  disturbs: -2,\n  dithering: -2,\n  diverting: -1,\n  dizzy: -1,\n  dodging: -2,\n  dodgy: -2,\n  'does not work': -3,\n  dolorous: -2,\n  donate: 2,\n  donated: 2,\n  donates: 2,\n  donating: 2,\n  donation: 2,\n  'dont like': -2,\n  doom: -2,\n  doomed: -2,\n  doubt: -1,\n  doubted: -1,\n  doubtful: -1,\n  doubting: -1,\n  doubts: -1,\n  douche: -3,\n  douchebag: -3,\n  dour: -2,\n  downcast: -2,\n  downer: -2,\n  downhearted: -2,\n  downside: -2,\n  drag: -1,\n  dragged: -1,\n  drags: -1,\n  drained: -2,\n  dread: -2,\n  dreaded: -2,\n  dreadful: -3,\n  dreading: -2,\n  dream: 1,\n  dreams: 1,\n  dreary: -2,\n  droopy: -2,\n  drop: -1,\n  dropped: -1,\n  drown: -2,\n  drowned: -2,\n  drowns: -2,\n  drudgery: -2,\n  drunk: -2,\n  dubious: -2,\n  dud: -2,\n  dull: -2,\n  dumb: -3,\n  dumbass: -3,\n  dump: -1,\n  dumped: -2,\n  dumps: -1,\n  dupe: -2,\n  duped: -2,\n  dupery: -2,\n  durable: 2,\n  dying: -3,\n  dysfunction: -2,\n  eager: 2,\n  earnest: 2,\n  ease: 2,\n  easy: 1,\n  ecstatic: 4,\n  eerie: -2,\n  eery: -2,\n  effective: 2,\n  effectively: 2,\n  effectiveness: 2,\n  effortlessly: 2,\n  elated: 3,\n  elation: 3,\n  elegant: 2,\n  elegantly: 2,\n  embarrass: -2,\n  embarrassed: -2,\n  embarrasses: -2,\n  embarrassing: -2,\n  embarrassment: -2,\n  embezzlement: -3,\n  embittered: -2,\n  embrace: 1,\n  emergency: -2,\n  empathetic: 2,\n  empower: 2,\n  empowerment: 2,\n  emptiness: -1,\n  empty: -1,\n  enchanted: 2,\n  encourage: 2,\n  encouraged: 2,\n  encouragement: 2,\n  encourages: 2,\n  encouraging: 2,\n  endorse: 2,\n  endorsed: 2,\n  endorsement: 2,\n  endorses: 2,\n  enemies: -2,\n  enemy: -2,\n  energetic: 2,\n  engage: 1,\n  engages: 1,\n  engrossed: 1,\n  engrossing: 3,\n  enjoy: 2,\n  enjoyable: 2,\n  enjoyed: 2,\n  enjoying: 2,\n  enjoys: 2,\n  enlighten: 2,\n  enlightened: 2,\n  enlightening: 2,\n  enlightens: 2,\n  ennui: -2,\n  enrage: -2,\n  enraged: -2,\n  enrages: -2,\n  enraging: -2,\n  enrapture: 3,\n  enslave: -2,\n  enslaved: -2,\n  enslaves: -2,\n  ensure: 1,\n  ensuring: 1,\n  enterprising: 1,\n  entertaining: 2,\n  enthral: 3,\n  enthusiastic: 3,\n  entitled: 1,\n  entrusted: 2,\n  envies: -1,\n  envious: -2,\n  'environment-friendly': 2,\n  envy: -1,\n  envying: -1,\n  erroneous: -2,\n  error: -2,\n  errors: -2,\n  escape: -1,\n  escapes: -1,\n  escaping: -1,\n  esteem: 2,\n  esteemed: 2,\n  ethical: 2,\n  euphoria: 3,\n  euphoric: 4,\n  evacuate: -1,\n  evacuated: -1,\n  evacuates: -1,\n  evacuating: -1,\n  evacuation: -1,\n  evergreen: 2,\n  evergreens: 2,\n  evergreening: -3,\n  eviction: -1,\n  evil: -3,\n  exacerbate: -2,\n  exacerbated: -2,\n  exacerbates: -2,\n  exacerbating: -2,\n  exaggerate: -2,\n  exaggerated: -2,\n  exaggerates: -2,\n  exaggerating: -2,\n  exasparate: -2,\n  exasperated: -2,\n  exasperates: -2,\n  exasperating: -2,\n  excellence: 3,\n  excellent: 3,\n  excite: 3,\n  excited: 3,\n  excitement: 3,\n  exciting: 3,\n  exclude: -1,\n  excluded: -2,\n  exclusion: -1,\n  exclusive: 2,\n  excruciatingly: -1,\n  excuse: -1,\n  exempt: -1,\n  exhausted: -2,\n  exhilarated: 3,\n  exhilarates: 3,\n  exhilarating: 3,\n  exonerate: 2,\n  exonerated: 2,\n  exonerates: 2,\n  exonerating: 2,\n  expand: 1,\n  expands: 1,\n  expel: -2,\n  expelled: -2,\n  expelling: -2,\n  expels: -2,\n  expertly: 2,\n  exploit: -2,\n  exploited: -2,\n  exploiting: -2,\n  exploits: -2,\n  exploration: 1,\n  explorations: 1,\n  expose: -1,\n  exposed: -1,\n  exposes: -1,\n  exposing: -1,\n  exquisite: 3,\n  extend: 1,\n  extends: 1,\n  extremist: -2,\n  extremists: -2,\n  exuberant: 4,\n  exultant: 3,\n  exultantly: 3,\n  fabulous: 4,\n  fabulously: 4,\n  fad: -2,\n  fag: -3,\n  faggot: -3,\n  faggots: -3,\n  fail: -2,\n  failed: -2,\n  failing: -2,\n  fails: -2,\n  failure: -2,\n  failures: -2,\n  fainthearted: -2,\n  fair: 2,\n  fairness: 2,\n  faith: 1,\n  faithful: 3,\n  fake: -3,\n  faker: -3,\n  fakes: -3,\n  faking: -3,\n  fallen: -2,\n  falling: -1,\n  false: -1,\n  falsely: -2,\n  falsified: -3,\n  falsify: -3,\n  fame: 1,\n  famine: -2,\n  famous: 2,\n  fan: 3,\n  fantastic: 4,\n  farce: -1,\n  fascinate: 3,\n  fascinated: 3,\n  fascinates: 3,\n  fascinating: 3,\n  fascination: 3,\n  fascist: -2,\n  fascists: -2,\n  fatal: -3,\n  fatalities: -3,\n  fatality: -3,\n  fatigue: -2,\n  fatigued: -2,\n  fatigues: -2,\n  fatiguing: -2,\n  favor: 2,\n  favorable: 2,\n  favorably: 2,\n  favored: 2,\n  favorite: 2,\n  favorited: 2,\n  favorites: 2,\n  favors: 2,\n  favour: 2,\n  favourable: 2,\n  favourably: 2,\n  favoured: 2,\n  favourite: 2,\n  favourited: 2,\n  favourites: 2,\n  favours: 2,\n  fear: -2,\n  fearful: -2,\n  fearfully: -2,\n  fearing: -2,\n  fearless: 2,\n  fearlessness: 2,\n  fearsome: -2,\n  'fed up': -3,\n  feeble: -2,\n  feeling: 1,\n  felonies: -3,\n  felony: -3,\n  fertile: 2,\n  fervent: 2,\n  fervid: 2,\n  festive: 2,\n  fever: -2,\n  fiasco: -3,\n  fidgety: -2,\n  fight: -1,\n  fighting: -2,\n  fine: 2,\n  fines: -2,\n  finest: 3,\n  fire: -2,\n  fired: -2,\n  firing: -2,\n  fit: 1,\n  fitness: 1,\n  filth: -2,\n  filthy: -2,\n  flagship: 2,\n  flaw: -2,\n  flawed: -3,\n  flawless: 2,\n  flawlessly: 2,\n  flaws: -2,\n  flees: -1,\n  flop: -2,\n  flops: -2,\n  flu: -2,\n  flustered: -2,\n  focused: 2,\n  fond: 2,\n  fondness: 2,\n  fool: -2,\n  foolish: -2,\n  fools: -2,\n  forbid: -1,\n  forbidden: -2,\n  forbidding: -2,\n  forced: -1,\n  foreclosure: -2,\n  foreclosures: -2,\n  forefront: 1,\n  forget: -1,\n  forgetful: -2,\n  forgettable: -1,\n  forgive: 1,\n  forgiving: 1,\n  forgot: -1,\n  forgotten: -1,\n  fortune: 2,\n  fortunate: 2,\n  fortunately: 2,\n  foul: -3,\n  frantic: -1,\n  fraud: -4,\n  frauds: -4,\n  fraudster: -4,\n  fraudsters: -4,\n  fraudulence: -4,\n  fraudulent: -4,\n  freak: -2,\n  free: 1,\n  freedom: 2,\n  freedoms: 2,\n  frenzy: -3,\n  fresh: 1,\n  friend: 1,\n  friendliness: 2,\n  friendly: 2,\n  friendship: 2,\n  fright: -2,\n  frightened: -2,\n  frightening: -3,\n  frikin: -2,\n  frisky: 2,\n  frowning: -1,\n  fruitless: -2,\n  frustrate: -2,\n  frustrated: -2,\n  frustrates: -2,\n  frustrating: -2,\n  frustration: -2,\n  ftw: 3,\n  fuck: -4,\n  fucked: -4,\n  fucker: -4,\n  fuckers: -4,\n  fuckface: -4,\n  fuckhead: -4,\n  fuckin: -4,\n  fucking: -4,\n  'fucking amazing': 4,\n  'fucking beautiful': 4,\n  'fucking cute': 4,\n  'fucking fantastic': 4,\n  'fucking good': 4,\n  'fucking great': 4,\n  'fucking hot': 2,\n  'fucking love': 4,\n  'fucking loves': 4,\n  'fucking perfect': 4,\n  fucktard: -4,\n  fud: -3,\n  fuked: -4,\n  fuking: -4,\n  fulfill: 2,\n  fulfilled: 2,\n  fulfillment: 2,\n  fulfills: 2,\n  fuming: -2,\n  fun: 4,\n  funeral: -1,\n  funerals: -1,\n  funky: 2,\n  funnier: 4,\n  funny: 4,\n  furious: -3,\n  futile: -2,\n  gag: -2,\n  gagged: -2,\n  gain: 2,\n  gained: 2,\n  gaining: 2,\n  gains: 2,\n  gallant: 3,\n  gallantly: 3,\n  gallantry: 3,\n  'game-changing': 3,\n  garbage: -1,\n  gem: 3,\n  generous: 2,\n  generously: 2,\n  genial: 3,\n  ghastly: -2,\n  ghost: -1,\n  giddy: -2,\n  gift: 2,\n  glad: 3,\n  glamorous: 3,\n  glamourous: 3,\n  glee: 3,\n  gleeful: 3,\n  gloom: -1,\n  gloomy: -2,\n  glorious: 2,\n  glory: 2,\n  glum: -2,\n  god: 1,\n  goddamn: -3,\n  godsend: 4,\n  gold: 2,\n  good: 3,\n  goodlooking: 3,\n  goodmorning: 1,\n  goodness: 3,\n  goodwill: 3,\n  goofiness: -2,\n  goofy: -2,\n  grace: 1,\n  graceful: 2,\n  gracious: 3,\n  grand: 3,\n  grant: 1,\n  granted: 1,\n  granting: 1,\n  grants: 1,\n  grateful: 3,\n  gratification: 2,\n  grave: -2,\n  gray: -1,\n  grisly: -2,\n  gr8: 3,\n  great: 3,\n  greater: 3,\n  greatest: 3,\n  greed: -3,\n  greedy: -2,\n  'green wash': -3,\n  'green washing': -3,\n  greenwash: -3,\n  greenwasher: -3,\n  greenwashers: -3,\n  greenwashing: -3,\n  greet: 1,\n  greeted: 1,\n  greeting: 1,\n  greetings: 2,\n  greets: 1,\n  grey: -1,\n  grief: -2,\n  grieved: -2,\n  grim: -2,\n  gripping: 2,\n  groan: -2,\n  groaned: -2,\n  groaning: -2,\n  groans: -2,\n  gross: -2,\n  growing: 1,\n  growth: 2,\n  growths: 2,\n  gruesome: -3,\n  guarantee: 1,\n  guilt: -3,\n  guilty: -3,\n  gullibility: -2,\n  gullible: -2,\n  gun: -1,\n  ha: 2,\n  hacked: -1,\n  haha: 3,\n  hahaha: 3,\n  hahahah: 3,\n  hail: 2,\n  hailed: 2,\n  hallelujah: 3,\n  handpicked: 1,\n  handsome: 3,\n  hapless: -2,\n  haplessness: -2,\n  happiest: 3,\n  happiness: 3,\n  happy: 3,\n  harass: -3,\n  harassed: -3,\n  harasses: -3,\n  harassing: -3,\n  harassment: -3,\n  hard: -1,\n  hardier: 2,\n  hardship: -2,\n  hardy: 2,\n  harm: -2,\n  harmed: -2,\n  harmful: -2,\n  harming: -2,\n  harmony: 2,\n  harmonious: 2,\n  harmoniously: 2,\n  harms: -2,\n  harried: -2,\n  harsh: -2,\n  harsher: -2,\n  harshest: -2,\n  harshly: -2,\n  hate: -3,\n  hated: -3,\n  hater: -3,\n  haters: -3,\n  hates: -3,\n  hating: -3,\n  hatred: -3,\n  haunt: -1,\n  haunted: -2,\n  haunting: 1,\n  haunts: -1,\n  havoc: -2,\n  hazardous: -3,\n  headache: -2,\n  healthy: 2,\n  heartbreaking: -3,\n  heartbroken: -3,\n  heartfelt: 3,\n  heartless: -2,\n  heartwarming: 3,\n  heaven: 2,\n  heavenly: 4,\n  heavyhearted: -2,\n  hehe: 2,\n  hell: -4,\n  hellish: -2,\n  help: 2,\n  helpful: 2,\n  helping: 2,\n  helpless: -2,\n  helps: 2,\n  hero: 2,\n  heroes: 2,\n  heroic: 3,\n  hesitant: -2,\n  hesitate: -2,\n  hid: -1,\n  hide: -1,\n  hideous: -3,\n  hides: -1,\n  hiding: -1,\n  highlight: 2,\n  hilarious: 2,\n  hinder: -2,\n  hindrance: -2,\n  hoax: -2,\n  hollow: -1,\n  homeless: -2,\n  homesick: -2,\n  homicide: -2,\n  homicides: -2,\n  honest: 2,\n  honor: 2,\n  honored: 2,\n  honoring: 2,\n  honour: 2,\n  honoured: 2,\n  honouring: 2,\n  hooligan: -2,\n  hooliganism: -2,\n  hooligans: -2,\n  hope: 2,\n  hopeful: 2,\n  hopefully: 2,\n  hopeless: -2,\n  hopelessness: -2,\n  hopes: 2,\n  hoping: 2,\n  horrendous: -3,\n  horrid: -3,\n  horrible: -3,\n  horrific: -3,\n  horrified: -3,\n  hospitalized: -2,\n  hostile: -2,\n  huckster: -2,\n  hug: 2,\n  huge: 1,\n  hugs: 2,\n  humane: 2,\n  humble: 1,\n  humbug: -2,\n  humerous: 3,\n  humiliated: -3,\n  humiliation: -3,\n  humor: 2,\n  humorous: 2,\n  humour: 2,\n  humourous: 2,\n  hunger: -2,\n  hurrah: 5,\n  hurt: -2,\n  hurting: -2,\n  hurts: -2,\n  hypocritical: -2,\n  hysteria: -3,\n  hysterical: -3,\n  hysterics: -3,\n  icky: -3,\n  idiocy: -3,\n  idiot: -3,\n  idiotic: -3,\n  ignorance: -2,\n  ignorant: -2,\n  ignore: -1,\n  ignored: -2,\n  ignores: -1,\n  ill: -2,\n  'ill-fated': -2,\n  illegal: -3,\n  illegally: -3,\n  illegitimate: -3,\n  illiteracy: -2,\n  illness: -2,\n  illnesses: -2,\n  illogical: -2,\n  imaginative: 2,\n  imbecile: -3,\n  immobilized: -1,\n  immortal: 2,\n  immune: 1,\n  impair: -2,\n  impaired: -2,\n  impairing: -2,\n  impairment: -2,\n  impairs: -2,\n  impatient: -2,\n  impeachment: -3,\n  impeachments: -3,\n  impede: -2,\n  impeded: -2,\n  impedes: -2,\n  impeding: -2,\n  impedingly: -2,\n  imperfect: -2,\n  importance: 2,\n  important: 2,\n  impose: -1,\n  imposed: -1,\n  imposes: -1,\n  imposing: -1,\n  imposter: -2,\n  impotent: -2,\n  impress: 3,\n  impressed: 3,\n  impresses: 3,\n  impressive: 3,\n  imprisoned: -2,\n  imprisonment: -2,\n  improper: -2,\n  improperly: -2,\n  improve: 2,\n  improved: 2,\n  improvement: 2,\n  improves: 2,\n  improving: 2,\n  inability: -2,\n  inaction: -2,\n  inadequate: -2,\n  inadvertently: -2,\n  inappropriate: -2,\n  incapable: -2,\n  incapacitated: -2,\n  incapacitates: -2,\n  incapacitating: -2,\n  incense: -2,\n  incensed: -2,\n  incenses: -2,\n  incensing: -2,\n  incoherent: -2,\n  incompetence: -2,\n  incompetent: -2,\n  incomplete: -1,\n  incomprehensible: -2,\n  inconsiderate: -2,\n  inconvenience: -2,\n  inconvenient: -2,\n  increase: 1,\n  increased: 1,\n  indecisive: -2,\n  indestructible: 2,\n  indicted: -2,\n  indifference: -2,\n  indifferent: -2,\n  indignant: -2,\n  indignation: -2,\n  indoctrinate: -2,\n  indoctrinated: -2,\n  indoctrinates: -2,\n  indoctrinating: -2,\n  inediable: -2,\n  inexorable: -3,\n  inexcusable: -3,\n  ineffective: -2,\n  ineffectively: -2,\n  ineffectual: -2,\n  inefficiency: -2,\n  inefficient: -2,\n  inefficiently: -2,\n  inept: -2,\n  ineptitude: -2,\n  infantile: -2,\n  infantilized: -2,\n  infatuated: 2,\n  infatuation: 2,\n  infect: -2,\n  infected: -2,\n  infecting: -2,\n  infection: -2,\n  infections: -2,\n  infectious: -2,\n  infects: -2,\n  inferior: -2,\n  infest: -2,\n  infested: -2,\n  infesting: -2,\n  infests: -2,\n  inflamed: -2,\n  inflict: -2,\n  inflicted: -2,\n  inflicting: -2,\n  inflicts: -2,\n  influential: 2,\n  infract: -2,\n  infracted: -2,\n  infracting: -2,\n  infracts: -2,\n  infringement: -2,\n  infuriate: -2,\n  infuriated: -2,\n  infuriates: -2,\n  infuriating: -2,\n  inhibit: -1,\n  inhuman: -2,\n  injured: -2,\n  injuries: -2,\n  injury: -2,\n  injustice: -2,\n  innovate: 1,\n  innovates: 1,\n  innovation: 1,\n  innovative: 2,\n  inoperative: -2,\n  inquisition: -2,\n  inquisitive: 2,\n  insane: -2,\n  insanity: -2,\n  insecure: -2,\n  insensitive: -2,\n  insensitivity: -2,\n  insignificant: -2,\n  insipid: -2,\n  insolvent: -2,\n  insomnia: -2,\n  inspiration: 2,\n  inspirational: 2,\n  inspire: 2,\n  inspired: 2,\n  inspires: 2,\n  inspiring: 3,\n  insufficiency: -2,\n  insufficient: -2,\n  insufficiently: -2,\n  insult: -2,\n  insulted: -2,\n  insulting: -2,\n  insults: -2,\n  intact: 2,\n  integrity: 2,\n  intelligent: 2,\n  intense: 1,\n  interest: 1,\n  interested: 2,\n  interesting: 2,\n  interests: 1,\n  interrogated: -2,\n  interrupt: -2,\n  interrupted: -2,\n  interrupting: -2,\n  interruption: -2,\n  interrupts: -2,\n  intimacy: 2,\n  intimidate: -2,\n  intimidated: -2,\n  intimidates: -2,\n  intimidating: -2,\n  intimidation: -2,\n  intransigence: -2,\n  intransigency: -2,\n  intricate: 2,\n  intrigues: 1,\n  invasion: -1,\n  invincible: 2,\n  invite: 1,\n  inviting: 1,\n  invulnerable: 2,\n  irate: -3,\n  ironic: -1,\n  irony: -1,\n  irrational: -1,\n  irreparable: -2,\n  irreproducible: -2,\n  irresistible: 2,\n  irresistibly: 2,\n  irresolute: -2,\n  irresponsible: -2,\n  irresponsibly: -2,\n  irreversible: -1,\n  irreversibly: -1,\n  irritate: -3,\n  irritated: -3,\n  irritates: -3,\n  irritating: -3,\n  isolated: -1,\n  itchy: -2,\n  jackass: -4,\n  jackasses: -4,\n  jailed: -2,\n  jaunty: 2,\n  jealous: -2,\n  jealousy: -2,\n  jeopardy: -2,\n  jerk: -3,\n  jesus: 1,\n  jewel: 1,\n  jewels: 1,\n  jocular: 2,\n  join: 1,\n  joke: 2,\n  jokes: 2,\n  jolly: 2,\n  jovial: 2,\n  joy: 3,\n  joyful: 3,\n  joyfully: 3,\n  joyless: -2,\n  joyous: 3,\n  jubilant: 3,\n  jumpy: -1,\n  justice: 2,\n  justifiably: 2,\n  justified: 2,\n  keen: 1,\n  kickback: -3,\n  kickbacks: -3,\n  kidnap: -2,\n  kidnapped: -2,\n  kidnapping: -2,\n  kidnappings: -2,\n  kidnaps: -2,\n  kill: -3,\n  killed: -3,\n  killing: -3,\n  kills: -3,\n  kind: 2,\n  'kind of': 0,\n  kinder: 2,\n  kindness: 2,\n  kiss: 2,\n  kudos: 3,\n  lack: -2,\n  lackadaisical: -2,\n  lag: -1,\n  lagged: -2,\n  lagging: -2,\n  lags: -2,\n  lame: -2,\n  landmark: 2,\n  lapse: -1,\n  lapsed: -1,\n  laugh: 1,\n  laughed: 1,\n  laughing: 1,\n  laughs: 1,\n  laughting: 1,\n  launched: 1,\n  lawl: 3,\n  lawsuit: -2,\n  lawsuits: -2,\n  lazy: -1,\n  leadership: 1,\n  leading: 2,\n  leak: -1,\n  leaked: -1,\n  leave: -1,\n  legal: 1,\n  legally: 1,\n  lenient: 1,\n  lethal: -2,\n  lethality: -2,\n  lethargic: -2,\n  lethargy: -2,\n  liar: -3,\n  liars: -3,\n  libelous: -2,\n  lied: -2,\n  lifeless: -1,\n  lifesaver: 4,\n  lighthearted: 1,\n  likable: 2,\n  like: 2,\n  likeable: 2,\n  liked: 2,\n  likers: 2,\n  likes: 2,\n  liking: 2,\n  limitation: -1,\n  limited: -1,\n  limits: -1,\n  litigation: -1,\n  litigious: -2,\n  lively: 2,\n  livid: -2,\n  lmao: 4,\n  lmfao: 4,\n  loathe: -3,\n  loathed: -3,\n  loathes: -3,\n  loathing: -3,\n  loathsome: -3,\n  lobbied: -2,\n  lobby: -2,\n  lobbying: -2,\n  lobbyist: -2,\n  lobbyists: -2,\n  lol: 3,\n  lolol: 4,\n  lololol: 4,\n  lolololol: 4,\n  lonely: -2,\n  lonesome: -2,\n  longing: -1,\n  lool: 3,\n  loom: -1,\n  loomed: -1,\n  looming: -1,\n  looms: -1,\n  loool: 3,\n  looool: 3,\n  loose: -3,\n  looses: -3,\n  loser: -3,\n  losing: -3,\n  loss: -3,\n  losses: -3,\n  lost: -3,\n  lousy: -2,\n  lovable: 3,\n  love: 3,\n  loved: 3,\n  lovelies: 3,\n  lovely: 3,\n  loves: 3,\n  loving: 2,\n  'loving-kindness': 3,\n  lowest: -1,\n  loyal: 3,\n  loyalty: 3,\n  luck: 3,\n  luckily: 3,\n  lucky: 3,\n  lucrative: 3,\n  ludicrous: -3,\n  lugubrious: -2,\n  lunatic: -3,\n  lunatics: -3,\n  lurk: -1,\n  lurking: -1,\n  lurks: -1,\n  luxury: 2,\n  macabre: -2,\n  mad: -3,\n  maddening: -3,\n  'made-up': -1,\n  madly: -3,\n  madness: -3,\n  magnificent: 3,\n  maladaption: -2,\n  maldevelopment: -2,\n  maltreatment: -2,\n  mandatory: -1,\n  manipulated: -1,\n  manipulating: -1,\n  manipulation: -1,\n  manslaughter: -3,\n  marvel: 3,\n  marvelous: 3,\n  marvels: 3,\n  masterpiece: 4,\n  masterpieces: 4,\n  matter: 1,\n  matters: 1,\n  mature: 2,\n  meaningful: 2,\n  meaningless: -2,\n  medal: 3,\n  mediocrity: -3,\n  meditative: 1,\n  melancholy: -2,\n  memorable: 1,\n  memoriam: -2,\n  menace: -2,\n  menaced: -2,\n  menaces: -2,\n  mercy: 2,\n  merry: 3,\n  mesmerizing: 3,\n  mess: -2,\n  messed: -2,\n  'messing up': -2,\n  methodical: 2,\n  methodically: 2,\n  mindless: -2,\n  miracle: 4,\n  mirth: 3,\n  mirthful: 3,\n  mirthfully: 3,\n  misbehave: -2,\n  misbehaved: -2,\n  misbehaves: -2,\n  misbehaving: -2,\n  misbranding: -3,\n  miscast: -2,\n  mischief: -1,\n  mischiefs: -1,\n  misclassified: -2,\n  misclassifies: -2,\n  misclassify: -2,\n  misconduct: -2,\n  misconducted: -2,\n  misconducting: -2,\n  misconducts: -2,\n  miserable: -3,\n  miserably: -3,\n  misery: -2,\n  misfire: -2,\n  misfortune: -2,\n  misgiving: -2,\n  misinformation: -2,\n  misinformed: -2,\n  misinterpreted: -2,\n  mislead: -3,\n  misleaded: -3,\n  misleading: -3,\n  misleads: -3,\n  misplace: -2,\n  misplaced: -2,\n  misplaces: -2,\n  misplacing: -2,\n  mispricing: -3,\n  misread: -1,\n  misreport: -2,\n  misreported: -2,\n  misreporting: -2,\n  misreports: -2,\n  misrepresent: -2,\n  misrepresentation: -2,\n  misrepresentations: -2,\n  misrepresented: -2,\n  misrepresenting: -2,\n  misrepresents: -2,\n  miss: -2,\n  missed: -2,\n  missing: -2,\n  mistake: -2,\n  mistaken: -2,\n  mistakes: -2,\n  mistaking: -2,\n  misunderstand: -2,\n  misunderstanding: -2,\n  misunderstands: -2,\n  misunderstood: -2,\n  misuse: -2,\n  misused: -2,\n  misuses: -2,\n  misusing: -2,\n  moan: -2,\n  moaned: -2,\n  moaning: -2,\n  moans: -2,\n  mock: -2,\n  mocked: -2,\n  mocking: -2,\n  mocks: -2,\n  modernize: 2,\n  modernized: 2,\n  modernizes: 2,\n  modernizing: 2,\n  mongering: -2,\n  monopolize: -2,\n  monopolized: -2,\n  monopolizes: -2,\n  monopolizing: -2,\n  monotone: -1,\n  moody: -1,\n  mope: -1,\n  moping: -1,\n  moron: -3,\n  motherfucker: -5,\n  motherfucking: -5,\n  motivate: 1,\n  motivated: 2,\n  motivating: 2,\n  motivation: 1,\n  mourn: -2,\n  mourned: -2,\n  mournful: -2,\n  mourning: -2,\n  mourns: -2,\n  muddy: -2,\n  mumpish: -2,\n  murder: -2,\n  murderer: -2,\n  murdering: -3,\n  murderous: -3,\n  murders: -2,\n  murky: -2,\n  myth: -1,\n  n00b: -2,\n  naive: -2,\n  narcissism: -2,\n  nasty: -3,\n  natural: 1,\n  naïve: -2,\n  needy: -2,\n  negative: -2,\n  negativity: -2,\n  neglect: -2,\n  neglected: -2,\n  neglecting: -2,\n  neglects: -2,\n  nerves: -1,\n  nervous: -2,\n  nervously: -2,\n  nice: 3,\n  nifty: 2,\n  niggas: -5,\n  nigger: -5,\n  no: -1,\n  'no fun': -3,\n  noble: 2,\n  noblest: 2,\n  noisy: -1,\n  'non-approved': -2,\n  nonsense: -2,\n  noob: -2,\n  nosey: -2,\n  'not good': -2,\n  'not working': -3,\n  notable: 2,\n  noticeable: 2,\n  notorious: -2,\n  novel: 2,\n  numb: -1,\n  nurturing: 2,\n  nuts: -3,\n  obliterate: -2,\n  obliterated: -2,\n  obnoxious: -3,\n  obscene: -2,\n  obscenity: -2,\n  obsessed: 2,\n  obsolete: -2,\n  obstacle: -2,\n  obstacles: -2,\n  obstinate: -2,\n  obstruct: -2,\n  obstructed: -2,\n  obstructing: -2,\n  obstruction: -2,\n  obstructs: -2,\n  odd: -2,\n  offence: -2,\n  offences: -2,\n  offend: -2,\n  offended: -2,\n  offender: -2,\n  offending: -2,\n  offends: -2,\n  offense: -2,\n  offenses: -2,\n  offensive: -2,\n  offensively: -2,\n  offline: -1,\n  oks: 2,\n  ominous: 3,\n  'once-in-a-lifetime': 3,\n  oops: -2,\n  opportunities: 2,\n  opportunity: 2,\n  oppressed: -2,\n  oppression: -2,\n  oppressions: -2,\n  oppressive: -2,\n  optimism: 2,\n  optimistic: 2,\n  optionless: -2,\n  ostracize: -2,\n  ostracized: -2,\n  ostracizes: -2,\n  ouch: -2,\n  outage: -2,\n  outages: -2,\n  outbreak: -2,\n  outbreaks: -2,\n  outcry: -2,\n  outmaneuvered: -2,\n  outnumbered: -2,\n  outrage: -3,\n  outraged: -3,\n  outrageous: -3,\n  outreach: 2,\n  outstanding: 5,\n  overjoyed: 4,\n  overload: -1,\n  overlooked: -1,\n  overprotective: -2,\n  overran: -2,\n  overreact: -2,\n  overreacted: -2,\n  overreacting: -2,\n  overreaction: -2,\n  overreacts: -2,\n  oversell: -2,\n  overselling: -2,\n  oversells: -2,\n  oversight: -1,\n  oversimplification: -2,\n  oversimplified: -2,\n  oversimplifies: -2,\n  oversimplify: -2,\n  oversold: -2,\n  overstatement: -2,\n  overstatements: -2,\n  overweight: -1,\n  overwrought: -3,\n  oxymoron: -1,\n  pain: -2,\n  pained: -2,\n  painful: -2,\n  panic: -3,\n  panicked: -3,\n  panics: -3,\n  paradise: 3,\n  paradox: -1,\n  pardon: 2,\n  pardoned: 2,\n  pardoning: 2,\n  pardons: 2,\n  parley: -1,\n  passion: 1,\n  passionate: 2,\n  passive: -1,\n  passively: -1,\n  pathetic: -2,\n  pay: -1,\n  peace: 2,\n  peaceful: 2,\n  peacefully: 2,\n  penalize: -2,\n  penalized: -2,\n  penalizes: -2,\n  penalizing: -2,\n  penalty: -2,\n  pensive: -1,\n  perfect: 3,\n  perfected: 2,\n  perfection: 3,\n  perfectly: 3,\n  perfects: 2,\n  peril: -2,\n  perjury: -3,\n  perpetrated: -2,\n  perpetrator: -2,\n  perpetrators: -2,\n  perplexed: -2,\n  persecute: -2,\n  persecuted: -2,\n  persecutes: -2,\n  persecuting: -2,\n  perturbed: -2,\n  pervert: -3,\n  pesky: -2,\n  pessimism: -2,\n  pessimistic: -2,\n  petrified: -2,\n  philanthropy: 2,\n  phobic: -2,\n  picturesque: 2,\n  pileup: -1,\n  pillage: -2,\n  pique: -2,\n  piqued: -2,\n  piss: -4,\n  pissed: -4,\n  pissing: -3,\n  piteous: -2,\n  pitied: -1,\n  pity: -2,\n  plague: -3,\n  plagued: -3,\n  plagues: -3,\n  plaguing: -3,\n  playful: 2,\n  pleasant: 3,\n  please: 1,\n  pleased: 3,\n  pleasurable: 3,\n  pleasure: 3,\n  plodding: -2,\n  poignant: 2,\n  pointless: -2,\n  poised: -2,\n  poison: -2,\n  poisoned: -2,\n  poisons: -2,\n  polished: 2,\n  polite: 2,\n  politeness: 2,\n  pollutant: -2,\n  pollute: -2,\n  polluted: -2,\n  polluter: -2,\n  polluters: -2,\n  pollutes: -2,\n  pollution: -2,\n  poor: -2,\n  poorer: -2,\n  poorest: -2,\n  poorly: -2,\n  popular: 3,\n  popularity: 3,\n  positive: 2,\n  positively: 2,\n  possessive: -2,\n  'post-traumatic': -2,\n  postpone: -1,\n  postponed: -1,\n  postpones: -1,\n  postponing: -1,\n  poverty: -1,\n  powerful: 2,\n  powerless: -2,\n  praise: 3,\n  praised: 3,\n  praises: 3,\n  praising: 3,\n  pray: 1,\n  praying: 1,\n  prays: 1,\n  prblm: -2,\n  prblms: -2,\n  predatory: -2,\n  prepared: 1,\n  pressure: -1,\n  pressured: -2,\n  pretend: -1,\n  pretending: -1,\n  pretends: -1,\n  pretty: 1,\n  prevent: -1,\n  prevented: -1,\n  preventing: -1,\n  prevents: -1,\n  prick: -5,\n  prison: -2,\n  prisoner: -2,\n  prisoners: -2,\n  privileged: 2,\n  proactive: 2,\n  problem: -2,\n  problems: -2,\n  profit: 2,\n  profitable: 2,\n  profiteer: -2,\n  profits: 2,\n  progress: 2,\n  prohibit: -1,\n  prohibits: -1,\n  prominent: 2,\n  promise: 1,\n  promised: 1,\n  promises: 1,\n  promote: 1,\n  promoted: 1,\n  promotes: 1,\n  promoting: 1,\n  promptly: 1,\n  propaganda: -2,\n  prosecute: -1,\n  prosecuted: -2,\n  prosecutes: -1,\n  prosecution: -1,\n  prospect: 1,\n  prospects: 1,\n  prosperity: 3,\n  prosperous: 3,\n  protect: 1,\n  protected: 1,\n  protects: 1,\n  protest: -2,\n  protesters: -2,\n  protesting: -2,\n  protests: -2,\n  proud: 2,\n  proudly: 2,\n  provoke: -1,\n  provoked: -1,\n  provokes: -1,\n  provoking: -1,\n  prudence: 2,\n  pseudoscience: -3,\n  psychopathic: -2,\n  punish: -2,\n  punished: -2,\n  punishes: -2,\n  punishing: -2,\n  punitive: -2,\n  pure: 1,\n  purest: 1,\n  purposeful: 2,\n  pushy: -1,\n  puzzled: -2,\n  quaking: -2,\n  qualities: 2,\n  quality: 2,\n  questionable: -2,\n  questioned: -1,\n  questioning: -1,\n  racism: -3,\n  racist: -3,\n  racists: -3,\n  rage: -2,\n  rageful: -2,\n  rainy: -1,\n  rant: -3,\n  ranter: -3,\n  ranters: -3,\n  rants: -3,\n  rape: -4,\n  raped: -4,\n  rapist: -4,\n  rapture: 2,\n  raptured: 2,\n  raptures: 2,\n  rapturous: 4,\n  rash: -2,\n  ratified: 2,\n  reach: 1,\n  reached: 1,\n  reaches: 1,\n  reaching: 1,\n  reassure: 1,\n  reassured: 1,\n  reassures: 1,\n  reassuring: 2,\n  rebel: -2,\n  rebellion: -2,\n  rebels: -2,\n  recession: -2,\n  reckless: -2,\n  recognition: 2,\n  recommend: 2,\n  recommended: 2,\n  recommends: 2,\n  redeemed: 2,\n  refine: 1,\n  refined: 1,\n  refines: 1,\n  refreshingly: 2,\n  refuse: -2,\n  refused: -2,\n  refuses: -2,\n  refusing: -2,\n  regret: -2,\n  regretful: -2,\n  regrets: -2,\n  regretted: -2,\n  regretting: -2,\n  reigning: 1,\n  reject: -1,\n  rejected: -1,\n  rejecting: -1,\n  rejection: -2,\n  rejects: -1,\n  rejoice: 4,\n  rejoiced: 4,\n  rejoices: 4,\n  rejoicing: 4,\n  relaxed: 2,\n  relentless: -1,\n  reliability: 2,\n  reliable: 2,\n  reliably: 2,\n  reliant: 2,\n  relieve: 1,\n  relieved: 2,\n  relieves: 1,\n  relieving: 2,\n  relishing: 2,\n  remarkable: 2,\n  remorse: -2,\n  repellent: -2,\n  repercussion: -2,\n  repercussions: -2,\n  reprimand: -2,\n  reprimanded: -2,\n  reprimanding: -2,\n  reprimands: -2,\n  repulse: -1,\n  repulsed: -2,\n  repulsive: -2,\n  rescue: 2,\n  rescued: 2,\n  rescues: 2,\n  resentful: -2,\n  resign: -1,\n  resigned: -1,\n  resigning: -1,\n  resigns: -1,\n  resolute: 2,\n  resolution: 2,\n  resolve: 2,\n  resolved: 2,\n  resolves: 2,\n  resolving: 2,\n  respect: 2,\n  respected: 2,\n  respects: 2,\n  responsibility: 1,\n  responsible: 2,\n  responsive: 2,\n  restful: 2,\n  restless: -2,\n  restore: 1,\n  restored: 1,\n  restores: 1,\n  restoring: 1,\n  restrict: -2,\n  restricted: -2,\n  restricting: -2,\n  restriction: -2,\n  restrictive: -1,\n  restricts: -2,\n  retained: -1,\n  retard: -2,\n  retarded: -2,\n  retreat: -1,\n  revenge: -2,\n  revengeful: -2,\n  revered: 2,\n  revive: 2,\n  revives: 2,\n  revolting: -2,\n  reward: 2,\n  rewarded: 2,\n  rewarding: 2,\n  rewards: 2,\n  rich: 2,\n  richly: 2,\n  ridiculous: -3,\n  rig: -1,\n  rigged: -1,\n  'right direction': 3,\n  righteousness: 2,\n  rightful: 2,\n  rightfully: 2,\n  rigorous: 3,\n  rigorously: 3,\n  riot: -2,\n  riots: -2,\n  rise: 1,\n  rises: 1,\n  risk: -2,\n  risks: -2,\n  risky: -2,\n  riveting: 3,\n  rob: -2,\n  robber: -2,\n  robed: -2,\n  robing: -2,\n  robs: -2,\n  robust: 2,\n  rofl: 4,\n  roflcopter: 4,\n  roflmao: 4,\n  romance: 2,\n  romantical: 2,\n  romantically: 2,\n  rose: 1,\n  rotfl: 4,\n  rotflmfao: 4,\n  rotflol: 4,\n  rotten: -3,\n  rude: -2,\n  ruin: -2,\n  ruined: -2,\n  ruining: -2,\n  ruins: -2,\n  sabotage: -2,\n  sad: -2,\n  sadden: -2,\n  saddened: -2,\n  sadly: -2,\n  safe: 1,\n  safely: 1,\n  safer: 2,\n  safety: 1,\n  salient: 1,\n  salute: 2,\n  saluted: 2,\n  salutes: 2,\n  saluting: 2,\n  salvation: 2,\n  sappy: -1,\n  sarcastic: -2,\n  satisfied: 2,\n  savange: -2,\n  savanges: -2,\n  save: 2,\n  saved: 2,\n  savings: 1,\n  scam: -2,\n  scams: -2,\n  scandal: -3,\n  scandalous: -3,\n  scandals: -3,\n  scapegoat: -2,\n  scapegoats: -2,\n  scare: -2,\n  scared: -2,\n  scar: -2,\n  scars: -2,\n  scary: -2,\n  sceptical: -2,\n  scold: -2,\n  scoop: 3,\n  scorn: -2,\n  scornful: -2,\n  scream: -2,\n  screamed: -2,\n  screaming: -2,\n  screams: -2,\n  screwed: -2,\n  'screwed up': -3,\n  scum: -3,\n  scumbag: -4,\n  seamless: 2,\n  seamlessly: 2,\n  secure: 2,\n  secured: 2,\n  secures: 2,\n  sedition: -2,\n  seditious: -2,\n  seduced: -1,\n  'self-abuse': -2,\n  'self-confident': 2,\n  'self-contradictory': -2,\n  'self-deluded': -2,\n  selfish: -3,\n  selfishness: -3,\n  sentence: -2,\n  sentenced: -2,\n  sentences: -2,\n  sentencing: -2,\n  serene: 2,\n  settlement: 1,\n  settlements: 1,\n  severe: -2,\n  severely: -2,\n  sexist: -2,\n  sexistic: -2,\n  sexy: 3,\n  shaky: -2,\n  shame: -2,\n  shamed: -2,\n  shameful: -2,\n  share: 1,\n  shared: 1,\n  shares: 1,\n  shattered: -2,\n  shit: -4,\n  shithead: -4,\n  shitty: -3,\n  shock: -2,\n  shocked: -2,\n  shocking: -2,\n  shocks: -2,\n  shoody: -2,\n  shoot: -1,\n  'short-sighted': -2,\n  'short-sightedness': -2,\n  shortage: -2,\n  shortages: -2,\n  shrew: -4,\n  shy: -1,\n  sick: -2,\n  sickness: -2,\n  'side-effect': -2,\n  'side-effects': -2,\n  sigh: -2,\n  significance: 1,\n  significant: 1,\n  silencing: -1,\n  silly: -1,\n  simplicity: 1,\n  sin: -2,\n  sincere: 2,\n  sincerely: 2,\n  sincerest: 2,\n  sincerity: 2,\n  sinful: -3,\n  singleminded: -2,\n  sinister: -2,\n  sins: -2,\n  skeptic: -2,\n  skeptical: -2,\n  skepticism: -2,\n  skeptics: -2,\n  slam: -2,\n  slash: -2,\n  slashed: -2,\n  slashes: -2,\n  slashing: -2,\n  slave: -3,\n  slavery: -3,\n  slaves: -3,\n  sleeplessness: -2,\n  slick: 2,\n  slicker: 2,\n  slickest: 2,\n  slip: -1,\n  sloppy: -2,\n  sluggish: -2,\n  slumping: -1,\n  slut: -5,\n  smart: 1,\n  smarter: 2,\n  smartest: 2,\n  smear: -2,\n  smile: 2,\n  smiled: 2,\n  smiles: 2,\n  smiling: 2,\n  smog: -2,\n  smuggle: -2,\n  smuggled: -2,\n  smuggling: -2,\n  smuggles: -2,\n  sneaky: -1,\n  sneeze: -2,\n  sneezed: -2,\n  sneezes: -2,\n  sneezing: -2,\n  snub: -2,\n  snubbed: -2,\n  snubbing: -2,\n  snubs: -2,\n  sobering: 1,\n  solemn: -1,\n  solid: 2,\n  solidarity: 2,\n  solidified: 2,\n  solidifies: 2,\n  solidify: 2,\n  solidifying: 2,\n  solution: 1,\n  solutions: 1,\n  solve: 1,\n  solved: 1,\n  solves: 1,\n  solving: 1,\n  somber: -2,\n  'some kind': 0,\n  'son-of-a-bitch': -5,\n  soothe: 3,\n  soothed: 3,\n  soothing: 3,\n  sophisticated: 2,\n  sore: -1,\n  sorrow: -2,\n  sorrowful: -2,\n  sorry: -1,\n  spacious: 1,\n  spam: -2,\n  spammer: -3,\n  spammers: -3,\n  spamming: -2,\n  spark: 1,\n  sparkle: 3,\n  sparkles: 3,\n  sparkling: 3,\n  spearhead: 2,\n  speculative: -2,\n  spirit: 1,\n  spirited: 2,\n  spiritless: -2,\n  spiteful: -2,\n  splendid: 3,\n  spoiled: -2,\n  spoilt: -2,\n  spotless: 2,\n  sprightly: 2,\n  squander: -2,\n  squandered: -2,\n  squandering: -2,\n  squanders: -2,\n  squelched: -1,\n  stab: -2,\n  stabbed: -2,\n  stable: 2,\n  stabs: -2,\n  stall: -2,\n  stalled: -2,\n  stalling: -2,\n  stamina: 2,\n  stampede: -2,\n  stank: -2,\n  startled: -2,\n  startling: 3,\n  starve: -2,\n  starved: -2,\n  starves: -2,\n  starving: -2,\n  steadfast: 2,\n  steal: -2,\n  stealing: -2,\n  steals: -2,\n  stereotype: -2,\n  stereotyped: -2,\n  stifled: -1,\n  stimulate: 1,\n  stimulated: 1,\n  stimulates: 1,\n  stimulating: 2,\n  stingy: -2,\n  stink: -2,\n  stinked: -2,\n  stinker: -2,\n  stinking: -2,\n  stinks: -2,\n  stinky: -2,\n  stole: -2,\n  stolen: -2,\n  stop: -1,\n  stopped: -1,\n  stopping: -1,\n  stops: -1,\n  stout: 2,\n  straight: 1,\n  strange: -1,\n  strangely: -1,\n  strangled: -2,\n  strength: 2,\n  strengthen: 2,\n  strengthened: 2,\n  strengthening: 2,\n  strengthens: 2,\n  strengths: 2,\n  stress: -1,\n  stressed: -2,\n  stressor: -2,\n  stressors: -2,\n  stricken: -2,\n  strike: -1,\n  strikers: -2,\n  strikes: -1,\n  strong: 2,\n  stronger: 2,\n  strongest: 2,\n  struck: -1,\n  struggle: -2,\n  struggled: -2,\n  struggles: -2,\n  struggling: -2,\n  stubborn: -2,\n  stuck: -2,\n  stunned: -2,\n  stunning: 4,\n  stupid: -2,\n  stupidity: -3,\n  stupidly: -2,\n  suave: 2,\n  subpoena: -2,\n  substantial: 1,\n  substantially: 1,\n  subversive: -2,\n  succeed: 3,\n  succeeded: 3,\n  succeeding: 3,\n  succeeds: 3,\n  success: 2,\n  successful: 3,\n  successfully: 3,\n  suck: -3,\n  sucks: -3,\n  sue: -2,\n  sued: -2,\n  sueing: -2,\n  sues: -2,\n  suffer: -2,\n  suffered: -2,\n  sufferer: -2,\n  sufferers: -2,\n  suffering: -2,\n  suffers: -2,\n  suicidal: -2,\n  suicide: -2,\n  suicides: -2,\n  suing: -2,\n  suitable: 2,\n  suited: 2,\n  sulking: -2,\n  sulky: -2,\n  sullen: -2,\n  sunshine: 2,\n  super: 3,\n  superb: 5,\n  superior: 2,\n  support: 2,\n  supported: 2,\n  supporter: 1,\n  supporters: 1,\n  supporting: 1,\n  supportive: 2,\n  supports: 2,\n  supreme: 4,\n  survived: 2,\n  surviving: 2,\n  survivor: 2,\n  suspect: -1,\n  suspected: -1,\n  suspecting: -1,\n  suspects: -1,\n  suspend: -1,\n  suspended: -1,\n  suspicious: -2,\n  sustainability: 1,\n  sustainable: 2,\n  sustainably: 2,\n  swear: -2,\n  swearing: -2,\n  swears: -2,\n  sweet: 2,\n  sweeter: 3,\n  sweetest: 3,\n  swift: 2,\n  swiftly: 2,\n  swindle: -3,\n  swindles: -3,\n  swindling: -3,\n  sympathetic: 2,\n  sympathy: 2,\n  taint: -2,\n  tainted: -2,\n  talent: 2,\n  tard: -2,\n  tarnish: -2,\n  tarnished: -2,\n  tarnishes: -2,\n  tears: -2,\n  tender: 2,\n  tenderness: 2,\n  tense: -2,\n  tension: -1,\n  terrible: -3,\n  terribly: -3,\n  terrific: 4,\n  terrifically: 4,\n  terrified: -3,\n  terror: -3,\n  terrorist: -2,\n  terrorists: -2,\n  terrorize: -3,\n  terrorized: -3,\n  terrorizes: -3,\n  thank: 2,\n  thankful: 2,\n  thanks: 2,\n  thorny: -2,\n  thoughtful: 2,\n  thoughtless: -2,\n  threat: -2,\n  threaten: -2,\n  threatened: -2,\n  threatening: -2,\n  threatens: -2,\n  threats: -2,\n  thrilled: 5,\n  thwart: -2,\n  thwarted: -2,\n  thwarting: -2,\n  thwarts: -2,\n  timid: -2,\n  timorous: -2,\n  tired: -2,\n  tits: -2,\n  tolerance: 2,\n  tolerant: 2,\n  toothless: -2,\n  top: 2,\n  tops: 2,\n  torn: -2,\n  torture: -4,\n  tortured: -4,\n  tortures: -4,\n  torturing: -4,\n  totalitarian: -2,\n  totalitarianism: -2,\n  tout: -2,\n  touted: -2,\n  touting: -2,\n  touts: -2,\n  toxic: -3,\n  tragedies: -2,\n  tragedy: -2,\n  tragic: -2,\n  tranquil: 2,\n  transgress: -2,\n  transgressed: -2,\n  transgresses: -2,\n  transgressing: -2,\n  trap: -1,\n  trapped: -2,\n  traps: -1,\n  trauma: -3,\n  traumatic: -3,\n  travesty: -2,\n  treason: -3,\n  treasonous: -3,\n  treasure: 2,\n  treasures: 2,\n  trembling: -2,\n  tremor: -2,\n  tremors: -2,\n  tremulous: -2,\n  tribulation: -2,\n  tribute: 2,\n  tricked: -2,\n  trickery: -2,\n  triumph: 4,\n  triumphant: 4,\n  troll: -2,\n  trouble: -2,\n  troubled: -2,\n  troubles: -2,\n  troubling: -2,\n  true: 2,\n  trust: 1,\n  trusted: 2,\n  trusts: 1,\n  tumor: -2,\n  twat: -5,\n  tyran: -3,\n  tyrannic: -3,\n  tyrannical: -3,\n  tyrannically: -3,\n  tyrans: -3,\n  ubiquitous: 2,\n  ugh: -2,\n  ugliness: -3,\n  ugly: -3,\n  unable: -2,\n  unacceptable: -2,\n  unappeasable: -2,\n  unappreciated: -2,\n  unapproved: -2,\n  unattractive: -2,\n  unavailable: -1,\n  unavailing: -2,\n  unaware: -2,\n  unbearable: -2,\n  unbelievable: -1,\n  unbelieving: -1,\n  unbiased: 2,\n  uncertain: -1,\n  unclear: -1,\n  uncomfortable: -2,\n  unconcerned: -2,\n  unconfirmed: -1,\n  unconvinced: -1,\n  uncredited: -1,\n  undecided: -1,\n  undercooked: -2,\n  underestimate: -1,\n  underestimated: -1,\n  underestimates: -1,\n  underestimating: -1,\n  undermine: -2,\n  undermined: -2,\n  undermines: -2,\n  undermining: -2,\n  underperform: -2,\n  underperformed: -2,\n  underperforming: -2,\n  underperforms: -2,\n  undeserving: -2,\n  undesirable: -2,\n  uneasy: -2,\n  unemployed: -1,\n  unemployment: -2,\n  unequal: -1,\n  unequaled: 2,\n  unethical: -2,\n  uneventful: -2,\n  unfair: -2,\n  unfavorable: -2,\n  unfit: -2,\n  unfitted: -2,\n  unfocused: -2,\n  unforgivable: -3,\n  unforgiving: -2,\n  unfulfilled: -2,\n  unfunny: -2,\n  ungenerous: -2,\n  ungrateful: -3,\n  unhappy: -2,\n  unhappiness: -2,\n  unhealthy: -2,\n  unhygienic: -2,\n  unified: 1,\n  unimaginative: -2,\n  unimpressed: -2,\n  uninspired: -2,\n  unintelligent: -2,\n  unintentional: -2,\n  uninvolving: -2,\n  united: 1,\n  unjust: -2,\n  unlikely: -1,\n  unlovable: -2,\n  unloved: -2,\n  unmatched: 1,\n  unmotivated: -2,\n  unoriginal: -2,\n  unparliamentary: -2,\n  unpleasant: -2,\n  unpleasantness: -2,\n  unprofessional: -2,\n  unravel: 1,\n  unreleting: -2,\n  unresearched: -2,\n  unsafe: -2,\n  unsatisfied: -2,\n  unscientific: -2,\n  unsecured: -2,\n  unselfish: 2,\n  unsettled: -1,\n  unsold: -1,\n  unsophisticated: -2,\n  unsound: -2,\n  unstable: -2,\n  unstoppable: 2,\n  unsuccessful: -2,\n  unsuccessfully: -2,\n  unsupported: -2,\n  unsure: -1,\n  untarnished: 2,\n  untrue: -2,\n  unwanted: -2,\n  unworthy: -2,\n  uplifting: 2,\n  uproar: -3,\n  upset: -2,\n  upsets: -2,\n  upsetting: -2,\n  uptight: -2,\n  urgent: -1,\n  useful: 2,\n  usefulness: 2,\n  useless: -2,\n  uselessness: -2,\n  vague: -2,\n  validate: 1,\n  validated: 1,\n  validates: 1,\n  validating: 1,\n  vapid: -2,\n  verdict: -1,\n  verdicts: -1,\n  vested: 1,\n  vexation: -2,\n  vexing: -2,\n  vibrant: 3,\n  vicious: -2,\n  victim: -3,\n  victimization: -3,\n  victimize: -3,\n  victimized: -3,\n  victimizes: -3,\n  victimizing: -3,\n  victims: -3,\n  victor: 3,\n  victors: 3,\n  victory: 3,\n  victories: 3,\n  vigilant: 3,\n  vigor: 3,\n  vile: -3,\n  vindicate: 2,\n  vindicated: 2,\n  vindicates: 2,\n  vindicating: 2,\n  violate: -2,\n  violated: -2,\n  violates: -2,\n  violating: -2,\n  violation: -2,\n  violations: -2,\n  violence: -3,\n  'violence-related': -3,\n  violent: -3,\n  violently: -3,\n  virtuous: 2,\n  virulent: -2,\n  vision: 1,\n  visionary: 3,\n  visioning: 1,\n  visions: 1,\n  vitality: 3,\n  vitamin: 1,\n  vitriolic: -3,\n  vivacious: 3,\n  vividly: 2,\n  vociferous: -1,\n  vomit: -3,\n  vomited: -3,\n  vomiting: -3,\n  vomits: -3,\n  vulnerability: -2,\n  vulnerable: -2,\n  walkout: -2,\n  walkouts: -2,\n  wanker: -3,\n  want: 1,\n  war: -2,\n  warfare: -2,\n  warm: 1,\n  warmhearted: 2,\n  warmness: 2,\n  warmth: 2,\n  warn: -2,\n  warned: -2,\n  warning: -3,\n  warnings: -3,\n  warns: -2,\n  waste: -1,\n  wasted: -2,\n  wasting: -2,\n  wavering: -1,\n  weak: -2,\n  weakened: -2,\n  weakness: -2,\n  weaknesses: -2,\n  wealth: 3,\n  wealthier: 2,\n  wealthy: 2,\n  weary: -2,\n  weep: -2,\n  weeping: -2,\n  weird: -2,\n  welcome: 2,\n  welcomed: 2,\n  welcomes: 2,\n  'well-being': 2,\n  'well-championed': 3,\n  'well-developed': 2,\n  'well-established': 2,\n  'well-focused': 2,\n  'well-groomed': 2,\n  'well-proportioned': 2,\n  whimsical: 1,\n  whitewash: -3,\n  whore: -4,\n  wicked: -2,\n  widowed: -1,\n  willingness: 2,\n  win: 4,\n  winner: 4,\n  winning: 4,\n  wins: 4,\n  winwin: 3,\n  wisdom: 1,\n  wish: 1,\n  wishes: 1,\n  wishing: 1,\n  withdrawal: -3,\n  wits: 2,\n  woebegone: -2,\n  woeful: -3,\n  won: 3,\n  wonderful: 4,\n  wonderfully: 4,\n  woo: 3,\n  woohoo: 3,\n  wooo: 4,\n  woow: 4,\n  worn: -1,\n  worried: -3,\n  worries: -3,\n  worry: -3,\n  worrying: -3,\n  worse: -3,\n  worsen: -3,\n  worsened: -3,\n  worsening: -3,\n  worsens: -3,\n  worshiped: 3,\n  worst: -3,\n  worth: 2,\n  worthless: -2,\n  worthy: 2,\n  wow: 4,\n  wowow: 4,\n  wowww: 4,\n  wrathful: -3,\n  wreck: -2,\n  wrenching: -2,\n  wrong: -2,\n  wrongdoing: -2,\n  wrongdoings: -2,\n  wronged: -2,\n  wrongful: -2,\n  wrongfully: -2,\n  wrongly: -2,\n  wtf: -4,\n  wtff: -4,\n  wtfff: -4,\n  xo: 3,\n  xoxo: 3,\n  xoxoxo: 4,\n  xoxoxoxo: 4,\n  yeah: 1,\n  yearning: 1,\n  yeees: 2,\n  yes: 1,\n  youthful: 2,\n  yucky: -2,\n  yummy: 3,\n  zealot: -2,\n  zealots: -2,\n  zealous: 2\n}\n","/**\n * @typedef {import('mdast').Root} Root\n *\n * @typedef Options\n *   Configuration.\n * @property {string[]} [deny]\n *   The `deny` field should be an array of rules or `undefined` (the default is\n *   `undefined`).\n *   When provided, *only* the rules specified are reported.\n *   You cannot use both `allow` and `deny` at the same time.\n * @property {string[]} [allow]\n *   The `allow` field should be an array of rules or `undefined` (the default\n *   is `undefined`).\n *   When provided, the rules specified are skipped and not reported.\n *   You cannot use both `allow` and `deny` at the same time.\n */\n\nimport remarkMessageControl from 'remark-message-control'\n\n/** @type {import('unified').Plugin<[Options?]|[], Root>} */\nexport function filter(options = {}) {\n  if (options.allow && options.deny) {\n    throw new Error(\n      'Do not provide both allow and deny configuration parameters'\n    )\n  }\n\n  return remarkMessageControl({\n    name: 'alex',\n    reset: Boolean(options.deny),\n    enable: options.deny,\n    disable: options.allow,\n    source: ['retext-equality', 'retext-profanities']\n  })\n}\n","/**\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('./filter.js').Options} FilterOptions\n *\n * @typedef {boolean|undefined} NoBinaryOption\n * @typedef {0|1|2|undefined} SurenessOption\n *\n * @typedef {{noBinary: NoBinaryOption, sureness: SurenessOption}} TextOptions\n *\n * @typedef {{noBinary?: NoBinaryOption, profanitySureness?: SurenessOption} & FilterOptions} OptionsObject\n * @typedef {import('vfile').VFileCompatible} Input\n * @typedef {OptionsObject|string[]|undefined} Options\n */\n\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGfm from 'remark-gfm'\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkMdx from 'remark-mdx'\nimport rehypeParse from 'rehype-parse'\nimport retextEnglish from 'retext-english'\nimport retextEquality from 'retext-equality'\nimport retextProfanities from 'retext-profanities'\nimport remarkRetext from 'remark-retext'\nimport rehypeRetext from 'rehype-retext'\nimport {sort} from 'vfile-sort'\nimport {filter} from './filter.js'\n\n/** @param {TextOptions} options */\nfunction makeText(options) {\n  return unified()\n    .use(retextEnglish)\n    .use(retextEquality, options)\n    .use(retextProfanities, options)\n}\n\n/**\n * Alex’s core.\n *\n * @param {Input} value\n * @param {FilterOptions} options\n * @param {import('unified').Processor<void, Root>} processor\n */\nfunction core(value, options, processor) {\n  const file = new VFile(value)\n  const tree = processor.use(filter, options).parse(file)\n\n  processor.runSync(tree, file)\n\n  sort(file)\n\n  return file\n}\n\nexport default markdown\n\n/**\n * Alex (markdown).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function markdown(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified()\n      .use(remarkParse)\n      .use(remarkGfm)\n      .use(remarkFrontmatter, ['yaml', 'toml'])\n      .use(remarkRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (MDX).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function mdx(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified()\n      .use(remarkParse)\n      .use(remarkMdx)\n      .use(remarkRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (HTML).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function html(value, config) {\n  const options = splitOptions(config)\n  return core(\n    value,\n    options.filter,\n    unified().use(rehypeParse).use(rehypeRetext, makeText(options.text))\n  )\n}\n\n/**\n * Alex (plain text).\n *\n * @param {Input} value\n * @param {Options} [config]\n */\nexport function text(value, config) {\n  const options = splitOptions(config)\n  return core(value, options.filter, makeText(options.text))\n}\n\n/**\n * @param {Options} options\n */\nfunction splitOptions(options) {\n  /** @type {string[]|undefined} */\n  let allow\n  /** @type {string[]|undefined} */\n  let deny\n  /** @type {boolean|undefined} */\n  let noBinary\n  /** @type {SurenessOption} */\n  let sureness\n\n  if (Array.isArray(options)) {\n    allow = options\n  } else if (options) {\n    allow = options.allow\n    deny = options.deny\n    noBinary = options.noBinary\n    sureness = options.profanitySureness\n  }\n\n  return {filter: {allow, deny}, text: {noBinary, sureness}}\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n  (\n    /**\n     * @param {Value} value\n     * @param {Encoding} [encoding]\n     * @param {Options} [options]\n     * @returns {Root}\n     */\n    function (value, encoding, options) {\n      if (typeof encoding !== 'string') {\n        options = encoding\n        encoding = undefined\n      }\n\n      return compiler(options)(\n        postprocess(\n          parse(options).document().write(preprocess()(value, encoding, true))\n        )\n      )\n    }\n  )\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n\n  /** @type {CompileData} */\n  const data = {}\n\n  return compile\n\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {type: 'root', children: []}\n    /** @type {CompileContext['stack']} */\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n    const tokenStack = []\n    /** @type {Array<number>} */\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === types.listOrdered ||\n        events[index][1].type === types.listUnordered\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          assert(typeof tail === 'number', 'expected list ot be open')\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {sliceSerialize: events[index][2].sliceSerialize},\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {line: 1, column: 1, offset: 0}\n      )\n    }\n\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n    let listItem\n    /** @type {number|undefined} */\n    let lineIndex\n    /** @type {number|undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === types.listUnordered ||\n        event[1].type === types.listOrdered ||\n        event[1].type === types.blockQuote\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === types.lineEndingBlank) {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === types.linePrefix ||\n        event[1].type === types.listItemValue ||\n        event[1].type === types.listItemMarker ||\n        event[1].type === types.listItemPrefix ||\n        event[1].type === types.listItemPrefixWhitespace\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === types.listItemPrefix) ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === types.listUnordered ||\n            event[1].type === types.listOrdered))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === types.lineEnding ||\n              tailEvent[1].type === types.lineEndingBlank\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = types.lineEndingBlank\n                listSpread = true\n              }\n\n              tailEvent[1].type = types.lineEnding\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === types.linePrefix ||\n              tailEvent[1].type === types.blockQuotePrefix ||\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\n              tailEvent[1].type === types.blockQuoteMarker ||\n              tailEvent[1].type === types.listItemIndent\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === types.listItemPrefix) {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n  function point(d) {\n    return {line: d.line, column: d.column, offset: d.offset}\n  }\n\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    this.stack.push({type: 'fragment', children: []})\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    assert(parent, 'expected `parent`')\n    assert('children' in parent, 'expected `parent`')\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {start: point(token.start)}\n    return node\n  }\n\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    assert(node, 'expected `node`')\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({start: token.start, end: token.end}) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\n    assert(node.position, 'expected `position` to be defined')\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /** @type {Handle} */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = /** @type {List} */ (this.stack[this.stack.length - 2])\n      ancestor.start = Number.parseInt(\n        this.sliceSerialize(token),\n        constants.numericBaseDecimal\n      )\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n    node.lang = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n    node.meta = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /** @type {Handle} */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n\n    setData('flowCodeInside')\n  }\n\n  /** @type {Handle} */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = /** @type {Code} */ (this.stack[this.stack.length - 1])\n\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.title = data\n  }\n\n  /** @type {Handle} */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = /** @type {Definition} */ (this.stack[this.stack.length - 1])\n    node.url = data\n  }\n\n  /** @type {Handle} */\n  function onexitatxheadingsequence(token) {\n    const node = /** @type {Heading} */ (this.stack[this.stack.length - 1])\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n\n      assert(\n        depth === 1 ||\n          depth === 2 ||\n          depth === 3 ||\n          depth === 4 ||\n          depth === 5 ||\n          depth === 6,\n        'expected `depth` between `1` and `6`'\n      )\n\n      node.depth = depth\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheadinglinesequence(token) {\n    const node = /** @type {Heading} */ (this.stack[this.stack.length - 1])\n\n    node.depth =\n      this.sliceSerialize(token).charCodeAt(0) === codes.equalsTo ? 1 : 2\n  }\n\n  /** @type {Handle} */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /** @type {Handle} */\n  function onenterdata(token) {\n    const parent = /** @type {Parent} */ (this.stack[this.stack.length - 1])\n    /** @type {Node} */\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {start: point(token.start)}\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n\n  /** @type {Handle} */\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected a `node` to be on the stack')\n    assert('value' in tail, 'expected a `literal` to be on the stack')\n    assert(tail.position, 'expected `node` to have an open position')\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /** @type {Handle} */\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    assert(context, 'expected `node`')\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      assert('children' in context, 'expected `parent`')\n      const tail = context.children[context.children.length - 1]\n      assert(tail.position, 'expected tail to have a starting position')\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /** @type {Handle} */\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /** @type {Handle} */\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = /** @type {HTML} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = /** @type {HTML} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n    node.value = data\n  }\n\n  /** @type {Handle} */\n  function onexitlink() {\n    const context = /** @type {Link & {identifier: string, label: string}} */ (\n      this.stack[this.stack.length - 1]\n    )\n\n    // To do: clean.\n    if (getData('inReference')) {\n      context.type += 'Reference'\n      // @ts-expect-error: mutate.\n      context.referenceType = getData('referenceType') || 'shortcut'\n      // @ts-expect-error: mutate.\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier\n      // @ts-expect-error: mutate.\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n\n  /** @type {Handle} */\n  function onexitimage() {\n    const context = /** @type {Image & {identifier: string, label: string}} */ (\n      this.stack[this.stack.length - 1]\n    )\n\n    // To do: clean.\n    if (getData('inReference')) {\n      context.type += 'Reference'\n      // @ts-expect-error: mutate.\n      context.referenceType = getData('referenceType') || 'shortcut'\n      // @ts-expect-error: mutate.\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier\n      // @ts-expect-error: mutate.\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n\n  /** @type {Handle} */\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */ (\n        this.stack[this.stack.length - 2]\n      )\n    const string = this.sliceSerialize(token)\n\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /** @type {Handle} */\n  function onexitlabel() {\n    const fragment = /** @type {Fragment} */ (this.stack[this.stack.length - 1])\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */ (\n        this.stack[this.stack.length - 1]\n      )\n\n    // Assume a reference.\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /** @type {Handle} */\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = /** @type {Link|Image} */ (this.stack[this.stack.length - 1])\n    node.url = data\n  }\n\n  /** @type {Handle} */\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = /** @type {Link|Image} */ (this.stack[this.stack.length - 1])\n    node.title = data\n  }\n\n  /** @type {Handle} */\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /** @type {Handle} */\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /** @type {Handle} */\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = /** @type {LinkReference|ImageReference} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /** @type {Handle} */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /** @type {Handle} */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === types.characterReferenceMarkerNumeric\n          ? constants.numericBaseDecimal\n          : constants.numericBaseHexadecimal\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    assert(tail, 'expected `node`')\n    assert(tail.position, 'expected `node.position`')\n    assert('value' in tail, 'expected `node.value`')\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /** @type {Handle} */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n    node.url = this.sliceSerialize(token)\n  }\n\n  /** @type {Handle} */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {type: 'blockquote', children: []}\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {type: 'code', lang: null, meta: null, value: ''}\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {type: 'inlineCode', value: ''}\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {type: 'emphasis', children: []}\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {type: 'heading', depth: undefined, children: []}\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {type: 'break'}\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {type: 'html', value: ''}\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {type: 'image', title: null, url: '', alt: null}\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {type: 'link', title: null, url: '', children: []}\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {type: 'paragraph', children: []}\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {type: 'strong', children: []}\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {type: 'text', value: ''}\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {type: 'thematicBreak'}\n  }\n}\n\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({start: left.start, end: left.end}) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @type {Extension['document']} */\nexport const document = {\n  [codes.asterisk]: list,\n  [codes.plusSign]: list,\n  [codes.dash]: list,\n  [codes.digit0]: list,\n  [codes.digit1]: list,\n  [codes.digit2]: list,\n  [codes.digit3]: list,\n  [codes.digit4]: list,\n  [codes.digit5]: list,\n  [codes.digit6]: list,\n  [codes.digit7]: list,\n  [codes.digit8]: list,\n  [codes.digit9]: list,\n  [codes.greaterThan]: blockQuote\n}\n\n/** @type {Extension['contentInitial']} */\nexport const contentInitial = {\n  [codes.leftSquareBracket]: definition\n}\n\n/** @type {Extension['flowInitial']} */\nexport const flowInitial = {\n  [codes.horizontalTab]: codeIndented,\n  [codes.virtualSpace]: codeIndented,\n  [codes.space]: codeIndented\n}\n\n/** @type {Extension['flow']} */\nexport const flow = {\n  [codes.numberSign]: headingAtx,\n  [codes.asterisk]: thematicBreak,\n  [codes.dash]: [setextUnderline, thematicBreak],\n  [codes.lessThan]: htmlFlow,\n  [codes.equalsTo]: setextUnderline,\n  [codes.underscore]: thematicBreak,\n  [codes.graveAccent]: codeFenced,\n  [codes.tilde]: codeFenced\n}\n\n/** @type {Extension['string']} */\nexport const string = {\n  [codes.ampersand]: characterReference,\n  [codes.backslash]: characterEscape\n}\n\n/** @type {Extension['text']} */\nexport const text = {\n  [codes.carriageReturn]: lineEnding,\n  [codes.lineFeed]: lineEnding,\n  [codes.carriageReturnLineFeed]: lineEnding,\n  [codes.exclamationMark]: labelStartImage,\n  [codes.ampersand]: characterReference,\n  [codes.asterisk]: attention,\n  [codes.lessThan]: [autolink, htmlText],\n  [codes.leftSquareBracket]: labelStartLink,\n  [codes.backslash]: [hardBreakEscape, characterEscape],\n  [codes.rightSquareBracket]: labelEnd,\n  [codes.underscore]: attention,\n  [codes.graveAccent]: codeText\n}\n\n/** @type {Extension['insideSpan']} */\nexport const insideSpan = {null: [attention, resolveText]}\n\n/** @type {Extension['attentionMarkers']} */\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\n\n/** @type {Extension['disable']} */\nexport const disable = {null: []}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport createDebug from 'debug'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\nconst debug = createDebug('micromark')\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from ? Object.assign({}, from) : {line: 1, column: 1, offset: 0},\n    {_index: 0, _bufferIndex: -1}\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Construct[]} */\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n  let chunks = []\n  /** @type {Token[]} */\n  let stack = []\n  /** @type {boolean|undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: codes.eof,\n    code: codes.eof,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== codes.eof) {\n      return []\n    }\n\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    return Object.assign({}, point)\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n    debug('position: define skip: `%j`', point)\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    assert(consumed === true, 'expected character to be consumed')\n    consumed = undefined\n    debug('main: passing `%s` to %s', code, state && state.name)\n    expectedCode = code\n    assert(typeof state === 'function', 'expected state')\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    assert(code === expectedCode, 'expected given code to equal expected code')\n\n    debug('consume: `%s`', code)\n\n    assert(\n      consumed === undefined,\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\n    )\n    assert(\n      code === null\n        ? context.events.length === 0 ||\n            context.events[context.events.length - 1][0] === 'exit'\n        : context.events[context.events.length - 1][0] === 'enter',\n      'expected last token to be open'\n    )\n\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\n      accountForPotentialSkip()\n      debug('position: after eol: `%j`', point)\n    } else if (code !== codes.virtualSpace) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n    debug('enter: `%s`', type)\n\n    context.events.push(['enter', token, context])\n\n    stack.push(token)\n\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n\n    const token = stack.pop()\n    assert(token, 'cannot close w/o open tokens')\n    token.end = now()\n\n    assert(type === token.type, 'expected exit token to match current token')\n\n    assert(\n      !(\n        token.start._index === token.end._index &&\n        token.start._bufferIndex === token.end._bufferIndex\n      ),\n      'expected non-empty token (`' + type + '`)'\n    )\n\n    debug('exit: `%s`', token.type)\n    context.events.push(['exit', token, context])\n\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          assert(bogusState, 'expected `bogusState` to be given')\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n\n    assert(\n      construct.partial ||\n        context.events.length === 0 ||\n        context.events[context.events.length - 1][0] === 'exit',\n      'expected last token to end'\n    )\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n\n    return {restore, from: startEventsIndex}\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n      debug('position: restore: `%j`', point)\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n  let view\n\n  if (startIndex === endIndex) {\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n  /** @type {boolean|undefined} */\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case codes.carriageReturn: {\n          value = values.cr\n\n          break\n        }\n\n        case codes.lineFeed: {\n          value = values.lf\n\n          break\n        }\n\n        case codes.carriageReturnLineFeed: {\n          value = values.cr + values.lf\n\n          break\n        }\n\n        case codes.horizontalTab: {\n          value = expandTabs ? values.space : values.ht\n\n          break\n        }\n\n        case codes.virtualSpace: {\n          if (!expandTabs && atTab) continue\n          value = values.space\n\n          break\n        }\n\n        default: {\n          assert(typeof chunk === 'number', 'expected number')\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === codes.horizontalTab\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {InitialConstruct} */\nexport const content = {tokenize: initializeContent}\n\n/** @type {Initializer} */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, contentStart, types.linePrefix)\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected anything other than a line ending or EOF'\n    )\n    effects.enter(types.paragraph)\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText)\n      effects.exit(types.paragraph)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit(types.chunkText)\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {InitialConstruct} */\nexport const document = {tokenize: initializeDocument}\n\n/** @type {Construct} */\nconst containerConstruct = {tokenize: tokenizeContainer}\n\n/** @type {Initializer} */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {StackItem[]} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n  let childFlow\n  /** @type {Token|undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      assert(\n        item[0].continuation,\n        'expected `continuation` to be defined on container construct'\n      )\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined after continuation'\n    )\n\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    assert(\n      self.currentConstruct,\n      'expected `currentConstruct` to be defined on tokenizer'\n    )\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined on tokenizer'\n    )\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === codes.eof) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter(types.chunkFlow, {\n      contentType: constants.contentTypeFlow,\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === codes.eof) {\n      writeToChild(effects.exit(types.chunkFlow), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit(types.chunkFlow))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n      let seen\n      /** @type {Point|undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      assert(\n        entry[0].exit,\n        'expected `exit` to be defined on container construct'\n      )\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined when closing flow'\n    )\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\n    childFlow.write([codes.eof])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    types.linePrefix,\n    this.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {InitialConstruct} */\nexport const flow = {tokenize: initializeFlow}\n\n/** @type {Initializer} */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        types.linePrefix\n      )\n    )\n  )\n\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nexport const resolver = {resolveAll: createResolver()}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /** @type {Initializer} */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter(types.data)\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data)\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === types.lineEnding) &&\n      events[eventIndex - 1][1].type === types.data\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true\n          size++\n        } else if (chunk === codes.virtualSpace) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length ||\n            tabs ||\n            size < constants.hardBreakPrefixSizeMin\n              ? types.lineSuffix\n              : types.hardBreakTrailing,\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Event[]} events\n * @returns {Event[]}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Chunk[]}\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n  let start = true\n  /** @type {boolean|undefined} */\n  let atCarriageReturn\n\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Chunk[]} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (\n        code === codes.lf &&\n        startPosition === endPosition &&\n        atCarriageReturn\n      ) {\n        chunks.push(codes.carriageReturnLineFeed)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(codes.carriageReturn)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case codes.nul: {\n            chunks.push(codes.replacementCharacter)\n            column++\n\n            break\n          }\n\n          case codes.ht: {\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\n            chunks.push(codes.horizontalTab)\n            while (column++ < next) chunks.push(codes.virtualSpace)\n\n            break\n          }\n\n          case codes.lf: {\n            chunks.push(codes.lineFeed)\n            column = 1\n\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\n      if (buffer) chunks.push(buffer)\n      chunks.push(codes.eof)\n    }\n\n    return chunks\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: any[]) => void} Callback\n * @typedef {(...input: any[]) => any} Middleware\n *\n * @typedef {(...input: any[]) => void} Run Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Middleware[]} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {any[]} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @param {any[]} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware(...parameters)\n    } catch (error) {\n      /** @type {Error} */\n      const exception = error\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[1] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('..').VFileData} VFileData\n * @typedef {import('..').VFileValue} VFileValue\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n *\n * @typedef {VFileValue|VFileOptions|VFile|URL} VFileCompatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {VFileValue} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {VFileData} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} VFileOptions\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} VFileReporterSettings\n * @typedef {<T = VFileReporterSettings>(files: Array<VFile>, options: T) => string} VFileReporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, treats it as `{value: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All other given fields are set on the newly created `VFile`.\n   *\n   * Path related properties are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {VFileCompatible} [value]\n   */\n  constructor(value) {\n    /** @type {VFileOptions} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information.\n     * It’s OK to store custom data directly on the file, moving it to `data`\n     * gives a little more privacy.\n     * @type {VFileData}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of file paths the file moved between.\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path`.\n     * Defaults to `process.cwd()` (`/` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {VFileValue}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `RawSourceMap` type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Access full path (`~/index.min.js`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set full path (`~/index.min.js`).\n   * Cannot be nullified.\n   *\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Access parent path (`~`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set parent path (`~`).\n   * Cannot be set if there's no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Access basename (including extname) (`index.min.js`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (`index.min.js`).\n   * Cannot contain path separators.\n   * Cannot be nullified either (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Access extname (including dot) (`.js`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set extname (including dot) (`.js`).\n   * Cannot be set if there's no `path` yet and cannot contain path separators.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Access stem (w/o extname) (`index.min`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set stem (w/o extname) (`index.min`).\n   * Cannot be nullified, and cannot contain path separators.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8'] If `file.value` is a buffer, `encoding` is used to serialize buffers.\n   * @returns {string}\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Create a message and associates it w/ the file.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Info: create a message, associate it with the file, and mark the fatality\n   * as `null`.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {VFileMessage}\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Fail: create a message, associate it with the file, mark the fatality as\n   * `true`.\n   * Note: fatal errors mean a file is no longer processable.\n   * Calls `message()` internally.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   * @returns {never}\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","var characterWeight = 4.71\nvar sentenceWeight = 0.5\nvar base = 21.43\n\n/**\n * @typedef {Object.<string, number>} AutomatedReadabilityCounts\n * @property {number} sentence\n * @property {number} word\n * @property {number} character\n */\n\n/**\n * Given an object containing the number of words (`word`), the number of sentences (`sentence`), and the number of characters  (`character`) in a document, returns the grade level associated with the document.\n *\n * @param {AutomatedReadabilityCounts} counts\n * @return {number}\n */\nexport function automatedReadability(counts) {\n  if (!counts || !counts.sentence || !counts.word || !counts.character) {\n    return Number.NaN\n  }\n\n  return (\n    characterWeight * (counts.character / counts.word) +\n    sentenceWeight * (counts.word / counts.sentence) -\n    base\n  )\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","export const cuss = {\n  abbo: 1,\n  abeed: 2,\n  abid: 1,\n  abo: 1,\n  abortion: 1,\n  abuse: 1,\n  addict: 1,\n  addicts: 1,\n  adult: 0,\n  africa: 0,\n  african: 0,\n  africoon: 2,\n  alla: 1,\n  allah: 0,\n  'alligator bait': 2,\n  alligatorbait: 2,\n  amateur: 0,\n  american: 0,\n  anal: 1,\n  analannie: 2,\n  analsex: 1,\n  angie: 0,\n  angry: 0,\n  anus: 1,\n  arab: 0,\n  arabs: 0,\n  arabush: 2,\n  arabushs: 2,\n  areola: 1,\n  argie: 2,\n  armo: 2,\n  armos: 2,\n  aroused: 0,\n  arse: 2,\n  arsehole: 2,\n  asian: 0,\n  ass: 2,\n  assassin: 0,\n  assassinate: 0,\n  assassination: 0,\n  assault: 0,\n  assbagger: 2,\n  assblaster: 2,\n  assclown: 2,\n  asscowboy: 2,\n  asses: 2,\n  assfuck: 2,\n  assfucker: 2,\n  asshat: 2,\n  asshole: 2,\n  assholes: 2,\n  asshore: 2,\n  assjockey: 2,\n  asskiss: 2,\n  asskisser: 2,\n  assklown: 2,\n  asslick: 2,\n  asslicker: 2,\n  asslover: 2,\n  assman: 2,\n  assmonkey: 2,\n  assmunch: 2,\n  assmuncher: 2,\n  asspacker: 2,\n  asspirate: 2,\n  asspuppies: 2,\n  assranger: 2,\n  asswhore: 2,\n  asswipe: 2,\n  athletesfoot: 1,\n  attack: 0,\n  australian: 0,\n  babe: 1,\n  babies: 0,\n  backdoor: 0,\n  backdoorman: 2,\n  backseat: 0,\n  badfuck: 2,\n  balllicker: 2,\n  balls: 1,\n  ballsack: 1,\n  banana: 0,\n  bananas: 0,\n  banging: 1,\n  baptist: 0,\n  barelylegal: 2,\n  barf: 2,\n  barface: 2,\n  barfface: 2,\n  bast: 0,\n  bastard: 1,\n  bazongas: 2,\n  bazooms: 2,\n  beanbag: 2,\n  beanbags: 2,\n  beaner: 2,\n  beaners: 2,\n  beaney: 2,\n  beaneys: 2,\n  beast: 0,\n  beastality: 1,\n  beastial: 1,\n  beastiality: 1,\n  beatoff: 2,\n  beatyourmeat: 2,\n  beaver: 0,\n  bestial: 1,\n  bestiality: 1,\n  bi: 0,\n  biatch: 2,\n  bible: 0,\n  bicurious: 1,\n  bigass: 2,\n  bigbastard: 2,\n  bigbutt: 2,\n  bigger: 0,\n  bisexual: 0,\n  bitch: 1,\n  bitcher: 2,\n  bitches: 1,\n  bitchez: 2,\n  bitchin: 2,\n  bitching: 2,\n  bitchslap: 2,\n  bitchy: 2,\n  biteme: 2,\n  black: 0,\n  blackman: 1,\n  blackout: 0,\n  blacks: 1,\n  blind: 0,\n  blow: 0,\n  blowjob: 2,\n  bluegum: 2,\n  bluegums: 2,\n  boang: 2,\n  boche: 2,\n  boches: 2,\n  bogan: 2,\n  bohunk: 2,\n  bollick: 2,\n  bollock: 2,\n  bollocks: 2,\n  bomb: 0,\n  bombers: 0,\n  bombing: 0,\n  bombs: 0,\n  bomd: 0,\n  bondage: 1,\n  boner: 2,\n  bong: 2,\n  boob: 1,\n  boobies: 2,\n  boobs: 1,\n  booby: 2,\n  boody: 2,\n  boom: 0,\n  boong: 2,\n  boonga: 2,\n  boongas: 2,\n  boongs: 2,\n  boonie: 2,\n  boonies: 2,\n  bootlip: 2,\n  bootlips: 2,\n  booty: 2,\n  bootycall: 2,\n  bosch: 0,\n  bosche: 2,\n  bosches: 2,\n  boschs: 2,\n  'bounty bar': 1,\n  'bounty bars': 1,\n  bountybar: 1,\n  bra: 0,\n  brea5t: 2,\n  breast: 0,\n  breastjob: 2,\n  breastlover: 2,\n  breastman: 2,\n  brothel: 1,\n  brownie: 0,\n  brownies: 0,\n  buddhahead: 2,\n  buddhaheads: 2,\n  buffies: 2,\n  buffy: 0,\n  bugger: 2,\n  buggered: 2,\n  buggery: 2,\n  bule: 2,\n  bules: 2,\n  bullcrap: 2,\n  bulldike: 2,\n  bulldyke: 2,\n  bullshit: 2,\n  bumblefuck: 2,\n  bumfuck: 2,\n  bung: 2,\n  bunga: 2,\n  bungas: 2,\n  bunghole: 2,\n  buried: 0,\n  burn: 0,\n  'burr head': 2,\n  'burr heads': 2,\n  burrhead: 2,\n  burrheads: 2,\n  butchbabes: 2,\n  butchdike: 2,\n  butchdyke: 2,\n  butt: 0,\n  buttbang: 2,\n  buttface: 2,\n  buttfuck: 2,\n  buttfucker: 2,\n  buttfuckers: 2,\n  butthead: 2,\n  buttman: 2,\n  buttmunch: 2,\n  buttmuncher: 2,\n  buttpirate: 2,\n  buttplug: 1,\n  buttstain: 2,\n  byatch: 2,\n  cacker: 2,\n  'camel jockey': 2,\n  'camel jockeys': 2,\n  cameljockey: 2,\n  cameltoe: 2,\n  canadian: 0,\n  cancer: 0,\n  carpetmuncher: 2,\n  carruth: 2,\n  catholic: 0,\n  catholics: 0,\n  cemetery: 0,\n  chav: 2,\n  'cheese eating surrender monkey': 2,\n  'cheese eating surrender monkies': 2,\n  'cheeseeating surrender monkey': 2,\n  'cheeseeating surrender monkies': 2,\n  cheesehead: 2,\n  cheeseheads: 2,\n  cherrypopper: 2,\n  chickslick: 2,\n  childrens: 0,\n  chin: 0,\n  'china swede': 2,\n  'china swedes': 2,\n  chinaman: 2,\n  chinamen: 2,\n  chinaswede: 2,\n  chinaswedes: 2,\n  chinese: 0,\n  'ching chong': 2,\n  'ching chongs': 2,\n  chingchong: 2,\n  chingchongs: 2,\n  chink: 2,\n  chinks: 2,\n  chinky: 2,\n  choad: 2,\n  chode: 2,\n  chonkies: 2,\n  chonky: 2,\n  chonkys: 2,\n  christ: 0,\n  'christ killer': 2,\n  'christ killers': 2,\n  christian: 0,\n  chug: 2,\n  chugs: 2,\n  chunger: 2,\n  chungers: 2,\n  chunkies: 2,\n  chunky: 2,\n  chunkys: 2,\n  church: 0,\n  cigarette: 0,\n  cigs: 0,\n  clamdigger: 2,\n  clamdiver: 2,\n  clansman: 2,\n  clansmen: 2,\n  clanswoman: 2,\n  clanswomen: 2,\n  clit: 1,\n  clitoris: 1,\n  clogwog: 2,\n  cocaine: 1,\n  cock: 1,\n  cockblock: 2,\n  cockblocker: 2,\n  cockcowboy: 2,\n  cockfight: 2,\n  cockhead: 2,\n  cockknob: 2,\n  cocklicker: 2,\n  cocklover: 2,\n  cocknob: 2,\n  cockqueen: 2,\n  cockrider: 2,\n  cocksman: 2,\n  cocksmith: 2,\n  cocksmoker: 2,\n  cocksucer: 2,\n  cocksuck: 2,\n  cocksucked: 2,\n  cocksucker: 2,\n  cocksucking: 2,\n  cocktail: 0,\n  cocktease: 2,\n  cocky: 2,\n  coconut: 0,\n  coconuts: 0,\n  cohee: 2,\n  coitus: 1,\n  color: 0,\n  colored: 0,\n  coloured: 0,\n  commie: 2,\n  communist: 0,\n  condom: 1,\n  conservative: 0,\n  conspiracy: 0,\n  coolie: 2,\n  coolies: 2,\n  cooly: 2,\n  coon: 2,\n  'coon ass': 2,\n  'coon asses': 2,\n  coonass: 2,\n  coonasses: 2,\n  coondog: 2,\n  coons: 2,\n  copulate: 1,\n  cornhole: 2,\n  corruption: 0,\n  cra5h: 1,\n  crabs: 0,\n  crack: 1,\n  cracka: 2,\n  cracker: 1,\n  crackpipe: 1,\n  crackwhore: 2,\n  crap: 2,\n  crapola: 2,\n  crapper: 2,\n  crappy: 2,\n  crash: 0,\n  creamy: 0,\n  crime: 0,\n  crimes: 0,\n  criminal: 0,\n  criminals: 0,\n  crotch: 1,\n  crotchjockey: 2,\n  crotchmonkey: 2,\n  crotchrot: 2,\n  cum: 2,\n  cumbubble: 2,\n  cumfest: 2,\n  cumjockey: 2,\n  cumm: 2,\n  cummer: 2,\n  cumming: 2,\n  cummings: 1,\n  cumquat: 2,\n  cumqueen: 2,\n  cumshot: 2,\n  cunilingus: 1,\n  cunillingus: 1,\n  cunn: 2,\n  cunnilingus: 1,\n  cunntt: 2,\n  cunt: 2,\n  cunteyed: 2,\n  cuntfuck: 2,\n  cuntfucker: 2,\n  cuntlick: 2,\n  cuntlicker: 2,\n  cuntlicking: 2,\n  cuntsucker: 2,\n  'curry muncher': 2,\n  'curry munchers': 2,\n  currymuncher: 2,\n  currymunchers: 2,\n  cushi: 2,\n  cushis: 2,\n  cybersex: 1,\n  cyberslimer: 2,\n  dago: 2,\n  dagos: 2,\n  dahmer: 2,\n  dammit: 2,\n  damn: 1,\n  damnation: 1,\n  damnit: 2,\n  darkey: 2,\n  darkeys: 2,\n  darkie: 2,\n  darkies: 2,\n  darky: 2,\n  datnigga: 2,\n  dead: 0,\n  deapthroat: 2,\n  death: 0,\n  deepthroat: 2,\n  defecate: 1,\n  dego: 2,\n  degos: 2,\n  demon: 1,\n  deposit: 0,\n  desire: 0,\n  destroy: 0,\n  deth: 0,\n  devil: 1,\n  devilworshipper: 1,\n  'diaper head': 2,\n  'diaper heads': 2,\n  diaperhead: 2,\n  diaperheads: 2,\n  dick: 1,\n  dickbrain: 2,\n  dickforbrains: 2,\n  dickhead: 2,\n  dickless: 2,\n  dicklick: 2,\n  dicklicker: 2,\n  dickman: 2,\n  dickwad: 2,\n  dickweed: 2,\n  diddle: 2,\n  die: 0,\n  died: 0,\n  dies: 0,\n  dike: 1,\n  dildo: 1,\n  dingleberry: 2,\n  dink: 2,\n  dinks: 2,\n  dipshit: 2,\n  dipstick: 2,\n  dirty: 0,\n  disease: 0,\n  diseases: 0,\n  disturbed: 0,\n  dive: 0,\n  dix: 2,\n  dixiedike: 2,\n  dixiedyke: 2,\n  doggiestyle: 2,\n  doggystyle: 2,\n  dong: 2,\n  doodoo: 2,\n  doom: 0,\n  dope: 2,\n  'dot head': 2,\n  'dot heads': 2,\n  dothead: 2,\n  dotheads: 2,\n  dragqueen: 2,\n  dragqween: 2,\n  dripdick: 2,\n  drug: 1,\n  drunk: 1,\n  drunken: 1,\n  dumb: 2,\n  dumbass: 2,\n  dumbbitch: 2,\n  dumbfuck: 2,\n  'dune coon': 2,\n  'dune coons': 2,\n  dyefly: 2,\n  dyke: 1,\n  easyslut: 2,\n  eatballs: 2,\n  eatme: 2,\n  eatpussy: 2,\n  ecstacy: 0,\n  'eight ball': 2,\n  'eight balls': 2,\n  ejaculate: 1,\n  ejaculated: 1,\n  ejaculating: 1,\n  ejaculation: 1,\n  enema: 1,\n  enemy: 0,\n  erect: 0,\n  erection: 1,\n  ero: 2,\n  escort: 0,\n  esqua: 2,\n  ethiopian: 0,\n  ethnic: 0,\n  european: 0,\n  evl: 2,\n  excrement: 1,\n  execute: 0,\n  executed: 0,\n  execution: 0,\n  executioner: 0,\n  exkwew: 2,\n  explosion: 0,\n  facefucker: 2,\n  faeces: 2,\n  fag: 1,\n  fagging: 2,\n  faggot: 2,\n  fagot: 2,\n  failed: 0,\n  failure: 0,\n  fairies: 0,\n  fairy: 0,\n  faith: 0,\n  fannyfucker: 2,\n  fart: 1,\n  farted: 1,\n  farting: 1,\n  farty: 2,\n  fastfuck: 2,\n  fat: 0,\n  fatah: 2,\n  fatass: 2,\n  fatfuck: 2,\n  fatfucker: 2,\n  fatso: 2,\n  fckcum: 2,\n  fear: 0,\n  feces: 1,\n  felatio: 1,\n  felch: 2,\n  felcher: 2,\n  felching: 2,\n  fellatio: 2,\n  feltch: 2,\n  feltcher: 2,\n  feltching: 2,\n  fetish: 1,\n  fight: 0,\n  filipina: 0,\n  filipino: 0,\n  fingerfood: 1,\n  fingerfuck: 2,\n  fingerfucked: 2,\n  fingerfucker: 2,\n  fingerfuckers: 2,\n  fingerfucking: 2,\n  fire: 0,\n  firing: 0,\n  fister: 2,\n  fistfuck: 2,\n  fistfucked: 2,\n  fistfucker: 2,\n  fistfucking: 2,\n  fisting: 2,\n  flange: 2,\n  flasher: 1,\n  flatulence: 1,\n  floo: 2,\n  flydie: 2,\n  flydye: 2,\n  fok: 2,\n  fondle: 1,\n  footaction: 1,\n  footfuck: 2,\n  footfucker: 2,\n  footlicker: 2,\n  footstar: 2,\n  fore: 0,\n  foreskin: 1,\n  forni: 2,\n  fornicate: 1,\n  foursome: 1,\n  fourtwenty: 1,\n  fraud: 0,\n  freakfuck: 2,\n  freakyfucker: 2,\n  freefuck: 2,\n  fruitcake: 1,\n  fu: 2,\n  fubar: 2,\n  fuc: 2,\n  fucck: 2,\n  fuck: 2,\n  fucka: 2,\n  fuckable: 2,\n  fuckbag: 2,\n  fuckbook: 2,\n  fuckbuddy: 2,\n  fucked: 2,\n  fuckedup: 2,\n  fucker: 2,\n  fuckers: 2,\n  fuckface: 2,\n  fuckfest: 2,\n  fuckfreak: 2,\n  fuckfriend: 2,\n  fuckhead: 2,\n  fuckher: 2,\n  fuckin: 2,\n  fuckina: 2,\n  fucking: 2,\n  fuckingbitch: 2,\n  fuckinnuts: 2,\n  fuckinright: 2,\n  fuckit: 2,\n  fuckknob: 2,\n  fuckme: 2,\n  fuckmehard: 2,\n  fuckmonkey: 2,\n  fuckoff: 2,\n  fuckpig: 2,\n  fucks: 2,\n  fucktard: 2,\n  fuckwhore: 2,\n  fuckyou: 2,\n  fudgepacker: 2,\n  fugly: 2,\n  fuk: 2,\n  fuks: 2,\n  funeral: 0,\n  funfuck: 2,\n  fungus: 0,\n  fuuck: 2,\n  gable: 1,\n  gables: 2,\n  gangbang: 2,\n  gangbanged: 2,\n  gangbanger: 2,\n  gangsta: 2,\n  'gator bait': 2,\n  gatorbait: 2,\n  gay: 0,\n  gaymuthafuckinwhore: 2,\n  gaysex: 2,\n  geez: 2,\n  geezer: 2,\n  geni: 2,\n  genital: 1,\n  german: 0,\n  getiton: 2,\n  gin: 0,\n  ginzo: 2,\n  ginzos: 2,\n  gipp: 2,\n  gippo: 2,\n  gippos: 2,\n  gipps: 2,\n  girls: 0,\n  givehead: 2,\n  glazeddonut: 2,\n  gob: 1,\n  god: 1,\n  godammit: 2,\n  goddamit: 2,\n  goddammit: 2,\n  goddamn: 2,\n  goddamned: 2,\n  goddamnes: 2,\n  goddamnit: 2,\n  goddamnmuthafucker: 2,\n  goldenshower: 2,\n  golliwog: 2,\n  golliwogs: 2,\n  gonorrehea: 2,\n  gonzagas: 1,\n  gook: 2,\n  'gook eye': 2,\n  'gook eyes': 2,\n  gookeye: 2,\n  gookeyes: 2,\n  gookies: 2,\n  gooks: 2,\n  gooky: 2,\n  gora: 2,\n  goras: 2,\n  gotohell: 2,\n  goy: 1,\n  goyim: 1,\n  greaseball: 2,\n  greaseballs: 2,\n  greaser: 2,\n  greasers: 2,\n  gringo: 2,\n  gringos: 2,\n  groe: 1,\n  groid: 2,\n  groids: 2,\n  gross: 1,\n  grostulation: 1,\n  gub: 1,\n  gubba: 2,\n  gubbas: 2,\n  gubs: 2,\n  guinea: 1,\n  guineas: 1,\n  guizi: 1,\n  gummer: 2,\n  gun: 0,\n  gwailo: 2,\n  gwailos: 2,\n  gweilo: 2,\n  gweilos: 2,\n  gyopo: 2,\n  gyopos: 2,\n  gyp: 2,\n  gyped: 2,\n  gypo: 2,\n  gypos: 2,\n  gypp: 2,\n  gypped: 2,\n  gyppie: 2,\n  gyppies: 2,\n  gyppo: 2,\n  gyppos: 2,\n  gyppy: 2,\n  gyppys: 2,\n  gypsies: 2,\n  gypsy: 2,\n  gypsys: 2,\n  hadji: 2,\n  hadjis: 2,\n  hairyback: 2,\n  hairybacks: 2,\n  haji: 2,\n  hajis: 2,\n  hajji: 2,\n  hajjis: 2,\n  'half breed': 2,\n  'half caste': 2,\n  halfbreed: 2,\n  halfcaste: 2,\n  hamas: 1,\n  handjob: 2,\n  haole: 2,\n  haoles: 2,\n  hapa: 2,\n  harder: 0,\n  hardon: 2,\n  harem: 0,\n  headfuck: 2,\n  headlights: 0,\n  hebe: 2,\n  hebephila: 1,\n  hebephile: 1,\n  hebephiles: 1,\n  hebephilia: 1,\n  hebephilic: 1,\n  hebes: 2,\n  heeb: 2,\n  heebs: 2,\n  hell: 0,\n  henhouse: 0,\n  heroin: 1,\n  herpes: 1,\n  heterosexual: 0,\n  hijack: 0,\n  hijacker: 0,\n  hijacking: 0,\n  hillbillies: 2,\n  hillbilly: 2,\n  hindoo: 2,\n  hiscock: 2,\n  hitler: 1,\n  hitlerism: 2,\n  hitlerist: 2,\n  hiv: 1,\n  ho: 2,\n  hobo: 2,\n  hodgie: 2,\n  hoes: 2,\n  hole: 0,\n  holestuffer: 2,\n  homicide: 1,\n  homo: 2,\n  homobangers: 2,\n  homosexual: 1,\n  honger: 2,\n  honk: 0,\n  honkers: 2,\n  honkey: 2,\n  honkeys: 2,\n  honkie: 2,\n  honkies: 2,\n  honky: 2,\n  hook: 0,\n  hooker: 2,\n  hookers: 2,\n  hooters: 2,\n  hore: 2,\n  hori: 2,\n  horis: 2,\n  hork: 2,\n  horn: 0,\n  horney: 2,\n  horniest: 2,\n  horny: 1,\n  horseshit: 2,\n  hosejob: 2,\n  hoser: 2,\n  hostage: 0,\n  hotdamn: 2,\n  hotpussy: 2,\n  hottotrot: 2,\n  hummer: 0,\n  hun: 0,\n  huns: 0,\n  husky: 0,\n  hussy: 2,\n  hustler: 0,\n  hymen: 1,\n  hymie: 2,\n  hymies: 2,\n  iblowu: 2,\n  idiot: 2,\n  ike: 1,\n  ikes: 1,\n  ikey: 1,\n  ikeymo: 2,\n  ikeymos: 2,\n  ikwe: 2,\n  illegal: 0,\n  illegals: 1,\n  incest: 1,\n  indon: 2,\n  indons: 2,\n  injun: 2,\n  injuns: 2,\n  insest: 2,\n  intercourse: 1,\n  interracial: 1,\n  intheass: 2,\n  inthebuff: 2,\n  israel: 0,\n  israeli: 0,\n  israels: 0,\n  italiano: 1,\n  itch: 0,\n  jackass: 2,\n  jackoff: 2,\n  jackshit: 2,\n  jacktheripper: 2,\n  jade: 0,\n  jap: 2,\n  japanese: 0,\n  japcrap: 2,\n  japie: 2,\n  japies: 2,\n  japs: 2,\n  jebus: 2,\n  jeez: 2,\n  jerkoff: 2,\n  jerries: 1,\n  jerry: 0,\n  jesus: 1,\n  jesuschrist: 1,\n  jew: 0,\n  jewboy: 2,\n  jewed: 2,\n  jewess: 2,\n  jewish: 0,\n  jig: 2,\n  jiga: 2,\n  jigaboo: 2,\n  jigaboos: 2,\n  jigarooni: 2,\n  jigaroonis: 2,\n  jigg: 2,\n  jigga: 2,\n  jiggabo: 2,\n  jiggabos: 2,\n  jiggas: 2,\n  jigger: 2,\n  jiggers: 2,\n  jiggs: 2,\n  jiggy: 2,\n  jigs: 2,\n  jihad: 1,\n  jijjiboo: 2,\n  jijjiboos: 2,\n  jimfish: 2,\n  jism: 2,\n  jiz: 2,\n  jizim: 2,\n  jizjuice: 2,\n  jizm: 2,\n  jizz: 2,\n  jizzim: 2,\n  jizzum: 2,\n  joint: 0,\n  juggalo: 2,\n  jugs: 0,\n  'jungle bunnies': 2,\n  'jungle bunny': 2,\n  junglebunny: 2,\n  kacap: 2,\n  kacapas: 2,\n  kacaps: 2,\n  kaffer: 2,\n  kaffir: 2,\n  kaffre: 2,\n  kafir: 2,\n  kanake: 2,\n  katsap: 2,\n  katsaps: 2,\n  khokhol: 2,\n  khokhols: 2,\n  kid: 0,\n  kigger: 2,\n  kike: 2,\n  kikes: 2,\n  kill: 0,\n  killed: 0,\n  killer: 0,\n  killing: 0,\n  kills: 0,\n  kimchi: 0,\n  kimchis: 2,\n  kink: 1,\n  kinky: 1,\n  kissass: 2,\n  kkk: 2,\n  klansman: 2,\n  klansmen: 2,\n  klanswoman: 2,\n  klanswomen: 2,\n  knife: 0,\n  knockers: 1,\n  kock: 1,\n  kondum: 2,\n  koon: 2,\n  kotex: 1,\n  krap: 2,\n  krappy: 2,\n  kraut: 1,\n  krauts: 2,\n  kuffar: 2,\n  kum: 2,\n  kumbubble: 2,\n  kumbullbe: 2,\n  kummer: 2,\n  kumming: 2,\n  kumquat: 2,\n  kums: 2,\n  kunilingus: 2,\n  kunnilingus: 2,\n  kunt: 2,\n  kushi: 2,\n  kushis: 2,\n  kwa: 2,\n  'kwai lo': 2,\n  'kwai los': 2,\n  ky: 1,\n  kyke: 2,\n  kykes: 2,\n  kyopo: 2,\n  kyopos: 2,\n  lactate: 1,\n  laid: 0,\n  lapdance: 1,\n  latin: 0,\n  lebo: 2,\n  lebos: 2,\n  lesbain: 2,\n  lesbayn: 2,\n  lesbian: 0,\n  lesbin: 2,\n  lesbo: 2,\n  lez: 2,\n  lezbe: 2,\n  lezbefriends: 2,\n  lezbo: 2,\n  lezz: 2,\n  lezzo: 2,\n  liberal: 0,\n  libido: 1,\n  licker: 1,\n  lickme: 2,\n  lies: 0,\n  limey: 2,\n  limpdick: 2,\n  limy: 2,\n  lingerie: 0,\n  liquor: 1,\n  livesex: 2,\n  loadedgun: 2,\n  lolita: 1,\n  looser: 2,\n  loser: 2,\n  lotion: 0,\n  lovebone: 2,\n  lovegoo: 2,\n  lovegun: 2,\n  lovejuice: 2,\n  lovemuscle: 2,\n  lovepistol: 2,\n  loverocket: 2,\n  lowlife: 2,\n  lsd: 1,\n  lubejob: 2,\n  lubra: 2,\n  lucifer: 0,\n  luckycammeltoe: 2,\n  lugan: 2,\n  lugans: 2,\n  lynch: 1,\n  mabuno: 2,\n  mabunos: 2,\n  macaca: 2,\n  macacas: 2,\n  mad: 0,\n  mafia: 1,\n  magicwand: 2,\n  mahbuno: 2,\n  mahbunos: 2,\n  mams: 2,\n  manhater: 2,\n  manpaste: 2,\n  marijuana: 1,\n  mastabate: 2,\n  mastabater: 2,\n  masterbate: 2,\n  masterblaster: 2,\n  mastrabator: 2,\n  masturbate: 2,\n  masturbating: 2,\n  mattressprincess: 2,\n  'mau mau': 2,\n  'mau maus': 2,\n  maumau: 2,\n  maumaus: 2,\n  meatbeatter: 2,\n  meatrack: 2,\n  meth: 1,\n  mexican: 0,\n  mgger: 2,\n  mggor: 2,\n  mick: 1,\n  mickeyfinn: 2,\n  mideast: 0,\n  milf: 2,\n  minority: 0,\n  mockey: 2,\n  mockie: 2,\n  mocky: 2,\n  mofo: 2,\n  moky: 2,\n  moles: 0,\n  molest: 1,\n  molestation: 1,\n  molester: 1,\n  molestor: 1,\n  moneyshot: 2,\n  'moon cricket': 2,\n  'moon crickets': 2,\n  mooncricket: 2,\n  mooncrickets: 2,\n  mormon: 0,\n  moron: 2,\n  moskal: 2,\n  moskals: 2,\n  moslem: 2,\n  mosshead: 2,\n  mothafuck: 2,\n  mothafucka: 2,\n  mothafuckaz: 2,\n  mothafucked: 2,\n  mothafucker: 2,\n  mothafuckin: 2,\n  mothafucking: 2,\n  mothafuckings: 2,\n  motherfuck: 2,\n  motherfucked: 2,\n  motherfucker: 2,\n  motherfuckin: 2,\n  motherfucking: 2,\n  motherfuckings: 2,\n  motherlovebone: 2,\n  muff: 2,\n  muffdive: 2,\n  muffdiver: 2,\n  muffindiver: 2,\n  mufflikcer: 2,\n  mulatto: 2,\n  muncher: 2,\n  munt: 2,\n  murder: 1,\n  murderer: 1,\n  muslim: 0,\n  mzungu: 2,\n  mzungus: 2,\n  naked: 0,\n  narcotic: 1,\n  nasty: 0,\n  nastybitch: 2,\n  nastyho: 2,\n  nastyslut: 2,\n  nastywhore: 2,\n  nazi: 1,\n  necro: 1,\n  negres: 2,\n  negress: 2,\n  negro: 2,\n  negroes: 2,\n  negroid: 2,\n  negros: 2,\n  nig: 2,\n  nigar: 2,\n  nigars: 2,\n  niger: 0,\n  nigerian: 1,\n  nigerians: 1,\n  nigers: 2,\n  nigette: 2,\n  nigettes: 2,\n  nigg: 2,\n  nigga: 2,\n  niggah: 2,\n  niggahs: 2,\n  niggar: 2,\n  niggaracci: 2,\n  niggard: 2,\n  niggarded: 2,\n  niggarding: 2,\n  niggardliness: 2,\n  niggardlinesss: 2,\n  niggardly: 0,\n  niggards: 2,\n  niggars: 2,\n  niggas: 2,\n  niggaz: 2,\n  nigger: 2,\n  niggerhead: 2,\n  niggerhole: 2,\n  niggers: 2,\n  niggle: 2,\n  niggled: 2,\n  niggles: 2,\n  niggling: 2,\n  nigglings: 2,\n  niggor: 2,\n  niggress: 2,\n  niggresses: 2,\n  nigguh: 2,\n  nigguhs: 2,\n  niggur: 2,\n  niggurs: 2,\n  niglet: 2,\n  nignog: 2,\n  nigor: 2,\n  nigors: 2,\n  nigr: 2,\n  nigra: 2,\n  nigras: 2,\n  nigre: 2,\n  nigres: 2,\n  nigress: 2,\n  nigs: 2,\n  nip: 2,\n  nipple: 1,\n  nipplering: 1,\n  nittit: 2,\n  nlgger: 2,\n  nlggor: 2,\n  nofuckingway: 2,\n  nook: 1,\n  nookey: 2,\n  nookie: 2,\n  noonan: 2,\n  nooner: 1,\n  nude: 1,\n  nudger: 2,\n  nuke: 1,\n  nutfucker: 2,\n  nymph: 1,\n  ontherag: 2,\n  oral: 1,\n  oreo: 0,\n  oreos: 0,\n  orga: 2,\n  orgasim: 2,\n  orgasm: 1,\n  orgies: 1,\n  orgy: 1,\n  osama: 0,\n  paddy: 1,\n  paederastic: 1,\n  paederasts: 1,\n  paederasty: 1,\n  paki: 2,\n  pakis: 2,\n  palesimian: 2,\n  palestinian: 0,\n  'pancake face': 2,\n  'pancake faces': 2,\n  pansies: 2,\n  pansy: 2,\n  panti: 2,\n  panties: 0,\n  payo: 2,\n  pearlnecklace: 1,\n  peck: 1,\n  pecker: 1,\n  peckerwood: 2,\n  pederastic: 1,\n  pederasts: 1,\n  pederasty: 1,\n  pedo: 2,\n  pedophile: 1,\n  pedophiles: 1,\n  pedophilia: 1,\n  pedophilic: 1,\n  pee: 1,\n  peehole: 2,\n  peepee: 2,\n  peepshow: 1,\n  peepshpw: 2,\n  pendy: 1,\n  penetration: 1,\n  peni5: 2,\n  penile: 1,\n  penis: 1,\n  penises: 1,\n  penthouse: 0,\n  period: 0,\n  perv: 2,\n  phonesex: 1,\n  phuk: 2,\n  phuked: 2,\n  phuking: 2,\n  phukked: 2,\n  phukking: 2,\n  phungky: 2,\n  phuq: 2,\n  pi55: 2,\n  picaninny: 2,\n  piccaninny: 2,\n  pickaninnies: 2,\n  pickaninny: 2,\n  piefke: 2,\n  piefkes: 2,\n  piker: 2,\n  pikey: 2,\n  piky: 2,\n  pimp: 2,\n  pimped: 2,\n  pimper: 2,\n  pimpjuic: 2,\n  pimpjuice: 2,\n  pimpsimp: 2,\n  pindick: 2,\n  piss: 2,\n  pissed: 2,\n  pisser: 2,\n  pisses: 2,\n  pisshead: 2,\n  pissin: 2,\n  pissing: 2,\n  pissoff: 2,\n  pistol: 1,\n  pixie: 1,\n  pixy: 1,\n  playboy: 1,\n  playgirl: 1,\n  pocha: 2,\n  pochas: 2,\n  pocho: 2,\n  pochos: 2,\n  pocketpool: 2,\n  pohm: 2,\n  pohms: 2,\n  polack: 2,\n  polacks: 2,\n  pollock: 2,\n  pollocks: 2,\n  pom: 2,\n  pommie: 2,\n  'pommie grant': 2,\n  'pommie grants': 2,\n  pommies: 2,\n  pommy: 2,\n  poms: 2,\n  poo: 2,\n  poon: 2,\n  poontang: 2,\n  poop: 2,\n  pooper: 2,\n  pooperscooper: 2,\n  pooping: 2,\n  poorwhitetrash: 2,\n  popimp: 2,\n  'porch monkey': 2,\n  'porch monkies': 2,\n  porchmonkey: 2,\n  porn: 1,\n  pornflick: 1,\n  pornking: 2,\n  porno: 1,\n  pornography: 1,\n  pornprincess: 2,\n  pot: 0,\n  poverty: 0,\n  'prairie nigger': 2,\n  'prairie niggers': 2,\n  premature: 0,\n  pric: 2,\n  prick: 2,\n  prickhead: 2,\n  primetime: 0,\n  propaganda: 0,\n  pros: 0,\n  prostitute: 1,\n  protestant: 1,\n  pu55i: 2,\n  pu55y: 2,\n  pube: 1,\n  pubic: 1,\n  pubiclice: 2,\n  pud: 2,\n  pudboy: 2,\n  pudd: 2,\n  puddboy: 2,\n  puke: 2,\n  puntang: 2,\n  purinapricness: 2,\n  puss: 2,\n  pussie: 2,\n  pussies: 2,\n  pussy: 1,\n  pussycat: 1,\n  pussyeater: 2,\n  pussyfucker: 2,\n  pussylicker: 2,\n  pussylips: 2,\n  pussylover: 2,\n  pussypounder: 2,\n  pusy: 2,\n  quashie: 2,\n  que: 0,\n  queef: 2,\n  queer: 1,\n  quickie: 2,\n  quim: 2,\n  ra8s: 2,\n  rabbi: 0,\n  racial: 0,\n  racist: 1,\n  radical: 1,\n  radicals: 1,\n  raghead: 2,\n  ragheads: 2,\n  randy: 1,\n  rape: 1,\n  raped: 1,\n  raper: 2,\n  rapist: 1,\n  rearend: 2,\n  rearentry: 2,\n  rectum: 1,\n  redleg: 2,\n  redlegs: 2,\n  redlight: 0,\n  redneck: 2,\n  rednecks: 2,\n  redskin: 2,\n  redskins: 2,\n  reefer: 2,\n  reestie: 2,\n  refugee: 0,\n  reject: 0,\n  remains: 0,\n  rentafuck: 2,\n  republican: 0,\n  rere: 2,\n  retard: 2,\n  retarded: 2,\n  ribbed: 1,\n  rigger: 2,\n  rimjob: 2,\n  rimming: 2,\n  roach: 0,\n  robber: 0,\n  'round eyes': 2,\n  roundeye: 2,\n  rump: 0,\n  russki: 2,\n  russkie: 2,\n  sadis: 2,\n  sadom: 2,\n  sambo: 2,\n  sambos: 2,\n  samckdaddy: 2,\n  'sand nigger': 2,\n  'sand niggers': 2,\n  sandm: 2,\n  sandnigger: 2,\n  satan: 1,\n  scag: 1,\n  scallywag: 2,\n  scat: 1,\n  schlong: 2,\n  schvartse: 2,\n  schvartsen: 2,\n  schwartze: 2,\n  schwartzen: 2,\n  screw: 1,\n  screwyou: 2,\n  scrotum: 1,\n  scum: 1,\n  semen: 1,\n  seppo: 2,\n  seppos: 2,\n  septic: 1,\n  septics: 1,\n  servant: 0,\n  sex: 1,\n  sexed: 2,\n  sexfarm: 2,\n  sexhound: 2,\n  sexhouse: 1,\n  sexing: 2,\n  sexkitten: 2,\n  sexpot: 2,\n  sexslave: 2,\n  sextogo: 2,\n  sextoy: 1,\n  sextoys: 1,\n  sexual: 1,\n  sexually: 1,\n  sexwhore: 2,\n  sexy: 1,\n  sexymoma: 2,\n  sexyslim: 2,\n  shag: 1,\n  shaggin: 2,\n  shagging: 2,\n  shat: 2,\n  shav: 2,\n  shawtypimp: 2,\n  sheeney: 2,\n  shhit: 2,\n  shiksa: 2,\n  shinola: 1,\n  shit: 1,\n  shitcan: 2,\n  shitdick: 2,\n  shite: 2,\n  shiteater: 2,\n  shited: 2,\n  shitface: 2,\n  shitfaced: 2,\n  shitfit: 2,\n  shitforbrains: 2,\n  shitfuck: 2,\n  shitfucker: 2,\n  shitfull: 2,\n  shithapens: 2,\n  shithappens: 2,\n  shithead: 2,\n  shithouse: 2,\n  shiting: 2,\n  shitlist: 2,\n  shitola: 2,\n  shitoutofluck: 2,\n  shits: 2,\n  shitstain: 2,\n  shitted: 2,\n  shitter: 2,\n  shitting: 2,\n  shitty: 2,\n  shoot: 0,\n  shooting: 0,\n  shortfuck: 2,\n  showtime: 0,\n  shylock: 2,\n  shylocks: 2,\n  sick: 0,\n  sissy: 2,\n  sixsixsix: 2,\n  sixtynine: 2,\n  sixtyniner: 2,\n  skank: 2,\n  skankbitch: 2,\n  skankfuck: 2,\n  skankwhore: 2,\n  skanky: 2,\n  skankybitch: 2,\n  skankywhore: 2,\n  skinflute: 2,\n  skum: 2,\n  skumbag: 2,\n  skwa: 2,\n  skwe: 2,\n  slant: 0,\n  slanteye: 2,\n  slanty: 2,\n  slapper: 2,\n  slaughter: 1,\n  slav: 0,\n  slave: 2,\n  slavedriver: 2,\n  sleezebag: 2,\n  sleezeball: 2,\n  slideitin: 2,\n  slime: 0,\n  slimeball: 2,\n  slimebucket: 2,\n  slope: 0,\n  slopehead: 2,\n  slopeheads: 2,\n  sloper: 2,\n  slopers: 2,\n  slopes: 0,\n  slopey: 2,\n  slopeys: 2,\n  slopies: 2,\n  slopy: 2,\n  slut: 2,\n  sluts: 2,\n  slutt: 2,\n  slutting: 2,\n  slutty: 2,\n  slutwear: 2,\n  slutwhore: 2,\n  smack: 1,\n  smackthemonkey: 2,\n  smut: 2,\n  snatch: 1,\n  snatchpatch: 2,\n  snigger: 0,\n  sniggered: 0,\n  sniggering: 0,\n  sniggers: 1,\n  sniper: 0,\n  snot: 0,\n  snowback: 2,\n  snownigger: 2,\n  sob: 0,\n  sodom: 1,\n  sodomise: 2,\n  sodomite: 1,\n  sodomize: 2,\n  sodomy: 2,\n  sonofabitch: 2,\n  sonofbitch: 2,\n  sooties: 2,\n  sooty: 2,\n  sos: 0,\n  soviet: 0,\n  spa: 0,\n  spade: 1,\n  spades: 1,\n  spaghettibender: 2,\n  spaghettinigger: 2,\n  spank: 1,\n  spankthemonkey: 2,\n  spearchucker: 2,\n  spearchuckers: 2,\n  sperm: 1,\n  spermacide: 2,\n  spermbag: 2,\n  spermhearder: 2,\n  spermherder: 2,\n  spic: 2,\n  spick: 2,\n  spicks: 2,\n  spics: 2,\n  spig: 2,\n  spigotty: 2,\n  spik: 2,\n  spit: 2,\n  spitter: 2,\n  splittail: 2,\n  spooge: 2,\n  spreadeagle: 2,\n  spunk: 2,\n  spunky: 2,\n  sqeh: 2,\n  squa: 2,\n  squarehead: 2,\n  squareheads: 2,\n  squaw: 2,\n  squinty: 2,\n  stagg: 1,\n  stiffy: 1,\n  strapon: 1,\n  stringer: 2,\n  stripclub: 2,\n  stroke: 0,\n  stroking: 1,\n  stuinties: 2,\n  stupid: 2,\n  stupidfuck: 2,\n  stupidfucker: 2,\n  suck: 1,\n  suckdick: 2,\n  sucker: 2,\n  suckme: 2,\n  suckmyass: 2,\n  suckmydick: 2,\n  suckmytit: 2,\n  suckoff: 2,\n  suicide: 1,\n  swallow: 1,\n  swallower: 2,\n  swalow: 2,\n  'swamp guinea': 2,\n  'swamp guineas': 2,\n  swastika: 1,\n  sweetness: 0,\n  syphilis: 1,\n  taboo: 0,\n  tacohead: 2,\n  tacoheads: 2,\n  taff: 2,\n  tampon: 0,\n  tang: 2,\n  tantra: 1,\n  'tar babies': 2,\n  'tar baby': 2,\n  tarbaby: 2,\n  tard: 2,\n  teat: 1,\n  terror: 0,\n  terrorist: 1,\n  teste: 2,\n  testicle: 1,\n  testicles: 1,\n  thicklip: 2,\n  thicklips: 2,\n  thirdeye: 2,\n  thirdleg: 2,\n  threesome: 1,\n  threeway: 2,\n  'timber nigger': 2,\n  'timber niggers': 2,\n  timbernigger: 2,\n  tinker: 2,\n  tinkers: 2,\n  tinkle: 1,\n  tit: 1,\n  titbitnipply: 2,\n  titfuck: 2,\n  titfucker: 2,\n  titfuckin: 2,\n  titjob: 2,\n  titlicker: 2,\n  titlover: 2,\n  tits: 1,\n  tittie: 2,\n  titties: 2,\n  titty: 2,\n  tnt: 1,\n  toilet: 0,\n  tongethruster: 2,\n  tongue: 0,\n  tonguethrust: 2,\n  tonguetramp: 2,\n  tortur: 2,\n  torture: 1,\n  tosser: 2,\n  'towel head': 2,\n  'towel heads': 2,\n  towelhead: 2,\n  trailertrash: 2,\n  tramp: 1,\n  trannie: 2,\n  tranny: 2,\n  transexual: 0,\n  transsexual: 0,\n  transvestite: 2,\n  trap: 1,\n  triplex: 2,\n  trisexual: 1,\n  trojan: 0,\n  trots: 1,\n  tuckahoe: 2,\n  tunneloflove: 2,\n  turd: 1,\n  turnon: 2,\n  twat: 2,\n  twink: 2,\n  twinkie: 2,\n  twobitwhore: 2,\n  uck: 2,\n  uk: 0,\n  ukrop: 2,\n  'uncle tom': 2,\n  unfuckable: 2,\n  upskirt: 2,\n  uptheass: 2,\n  upthebutt: 2,\n  urinary: 0,\n  urinate: 0,\n  urine: 0,\n  usama: 2,\n  uterus: 1,\n  vagina: 1,\n  vaginal: 1,\n  vatican: 0,\n  vibr: 2,\n  vibrater: 2,\n  vibrator: 1,\n  vietcong: 0,\n  violence: 0,\n  virgin: 0,\n  virginbreaker: 2,\n  vomit: 2,\n  vulva: 1,\n  wab: 2,\n  wank: 2,\n  wanker: 2,\n  wanking: 2,\n  waysted: 2,\n  weapon: 0,\n  weenie: 2,\n  weewee: 2,\n  welcher: 2,\n  welfare: 2,\n  wetb: 2,\n  wetback: 2,\n  wetbacks: 2,\n  wetspot: 2,\n  whacker: 2,\n  whash: 2,\n  whigger: 2,\n  whiggers: 2,\n  whiskey: 0,\n  whiskeydick: 2,\n  whiskydick: 2,\n  whit: 1,\n  'white trash': 2,\n  whitenigger: 2,\n  whites: 1,\n  whitetrash: 2,\n  whitey: 2,\n  whiteys: 2,\n  whities: 2,\n  whiz: 2,\n  whop: 2,\n  whore: 2,\n  whorefucker: 2,\n  whorehouse: 2,\n  wigga: 2,\n  wiggas: 2,\n  wigger: 2,\n  wiggers: 2,\n  willie: 2,\n  williewanker: 2,\n  willy: 1,\n  wn: 2,\n  wog: 2,\n  wogs: 2,\n  womens: 0,\n  wop: 2,\n  wtf: 2,\n  wuss: 2,\n  wuzzie: 2,\n  xkwe: 2,\n  xtc: 1,\n  xxx: 1,\n  yank: 2,\n  yankee: 1,\n  yankees: 1,\n  yanks: 2,\n  yarpie: 2,\n  yarpies: 2,\n  yellowman: 2,\n  yid: 2,\n  yids: 2,\n  zigabo: 2,\n  zigabos: 2,\n  zipperhead: 2,\n  zipperheads: 2\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","function Diff() {}\nDiff.prototype = {\n  diff: function diff(oldString, newString) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = options.callback;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    this.options = options;\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    } // Allow subclasses to massage the input prior to running\n\n\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{\n      newPos: -1,\n      components: []\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{\n        value: this.join(newString),\n        count: newString.length\n      }]);\n    } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n    function execEditLength() {\n      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        var basePath = void 0;\n\n        var addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        } // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n\n\n        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n\n\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          // This should not happen, but we want to be safe.\n\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n  pushComponent: function pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {\n        count: last.count + 1,\n        added: added,\n        removed: removed\n      };\n    } else {\n      components.push({\n        count: 1,\n        added: added,\n        removed: removed\n      });\n    }\n  },\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n        commonCount = 0;\n\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({\n        count: commonCount\n      });\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n  equals: function equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n    }\n  },\n  removeEmpty: function removeEmpty(array) {\n    var ret = [];\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n\n    return ret;\n  },\n  castInput: function castInput(value) {\n    return value;\n  },\n  tokenize: function tokenize(value) {\n    return value.split('');\n  },\n  join: function join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n\n      newPos += component.count; // Common case\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n\n\n  var lastComponent = components[componentLen - 1];\n\n  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n\nvar characterDiff = new Diff();\nfunction diffChars(oldStr, newStr, options) {\n  return characterDiff.diff(oldStr, newStr, options);\n}\n\nfunction generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (var name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n\n  return defaults;\n}\n\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\n\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new Diff();\n\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  // All whitespace symbols except newline group into one token, each newline - in separate token\n  var tokens = value.split(/([^\\S\\r\\n]+|[()[\\]{}'\"\\r\\n]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nvar lineDiff = new Diff();\n\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options = generateOptions(callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}\n\nvar sentenceDiff = new Diff();\n\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nfunction diffSentences(oldStr, newStr, callback) {\n  return sentenceDiff.diff(oldStr, newStr, callback);\n}\n\nvar cssDiff = new Diff();\n\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction diffCss(oldStr, newStr, callback) {\n  return cssDiff.diff(oldStr, newStr, callback);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\njsonDiff.useLongestToken = true;\njsonDiff.tokenize = lineDiff.tokenize;\n\njsonDiff.castInput = function (value) {\n  var _this$options = this.options,\n      undefinedReplacement = _this$options.undefinedReplacement,\n      _this$options$stringi = _this$options.stringifyReplacer,\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n    return typeof v === 'undefined' ? undefinedReplacement : v;\n  } : _this$options$stringi;\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\n\njsonDiff.equals = function (left, right) {\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n\nfunction diffJson(oldObj, newObj, options) {\n  return jsonDiff.diff(oldObj, newObj, options);\n} // This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  var i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (_typeof(obj) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n\n    var sortedKeys = [],\n        _key;\n\n    for (_key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(_key)) {\n        sortedKeys.push(_key);\n      }\n    }\n\n    sortedKeys.sort();\n\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      _key = sortedKeys[i];\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n}\n\nvar arrayDiff = new Diff();\n\narrayDiff.tokenize = function (value) {\n  return value.slice();\n};\n\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\n  return value;\n};\n\nfunction diffArrays(oldArr, newArr, callback) {\n  return arrayDiff.diff(oldArr, newArr, callback);\n}\n\nfunction parsePatch(uniDiff) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    var index = {};\n    list.push(index); // Parse diff metadata\n\n    while (i < diffstr.length) {\n      var line = diffstr[i]; // File header found, end parsing diff metadata\n\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      } // Diff index\n\n\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    } // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n\n\n    parseFileHeader(index);\n    parseFileHeader(index); // Parse hunks\n\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      var _line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n        break;\n      } else if (/^@@/.test(_line)) {\n        index.hunks.push(parseHunk());\n      } else if (_line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n      } else {\n        i++;\n      }\n    }\n  } // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n\n\n  function parseFileHeader(index) {\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n    if (fileHeader) {\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      var data = fileHeader[2].split('\\t', 2);\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n      if (/^\".*\"$/.test(fileName)) {\n        fileName = fileName.substr(1, fileName.length - 2);\n      }\n\n      index[keyPrefix + 'FileName'] = fileName;\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n      i++;\n    }\n  } // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n\n\n  function parseHunk() {\n    var chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n    var hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],\n      newStart: +chunkHeader[3],\n      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],\n      lines: [],\n      linedelimiters: []\n    }; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart += 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart += 1;\n    }\n\n    var addCount = 0,\n        removeCount = 0;\n\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n        break;\n      }\n\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    } // Handle the empty block count case\n\n\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    } // Perform optional sanity checking\n\n\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nfunction distanceIterator (start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      } // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n\n\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      } // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n\n\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n\n  };\n}\n\nfunction applyPatch(source, uniDiff) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  } // Apply the diff to the input\n\n\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\n    return line === patchContent;\n  },\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n      removeEOFNL,\n      addEOFNL;\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n\n\n  function hunkFits(hunk, toPos) {\n    for (var j = 0; j < hunk.lines.length; j++) {\n      var line = hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line;\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n\n        toPos++;\n      }\n    }\n\n    return true;\n  } // Search best fit offsets for each hunk based on the previous ones\n\n\n  for (var i = 0; i < hunks.length; i++) {\n    var hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n    var iterator = distanceIterator(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    } // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n\n\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  } // Apply patch hunks\n\n\n  var diffOffset = 0;\n\n  for (var _i = 0; _i < hunks.length; _i++) {\n    var _hunk = hunks[_i],\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n    diffOffset += _hunk.newLines - _hunk.oldLines;\n\n    for (var j = 0; j < _hunk.lines.length; j++) {\n      var line = _hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line,\n          delimiter = _hunk.linedelimiters[j];\n\n      if (operation === ' ') {\n        _toPos++;\n      } else if (operation === '-') {\n        lines.splice(_toPos, 1);\n        delimiters.splice(_toPos, 1);\n        /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(_toPos, 0, content);\n        delimiters.splice(_toPos, 0, delimiter);\n        _toPos++;\n      } else if (operation === '\\\\') {\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  } // Handle EOFNL insertion/removal\n\n\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n\n  for (var _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n\n  return lines.join('');\n} // Wrapper that supports multiple file patches via callbacks.\n\nfunction applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  var currentIndex = 0;\n\n  function processIndex() {\n    var index = uniDiff[currentIndex++];\n\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function (err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      var updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function (err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n\n  processIndex();\n}\n\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  var diff = diffLines(oldStr, newStr, options);\n  diff.push({\n    value: '',\n    lines: []\n  }); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function (entry) {\n      return ' ' + entry;\n    });\n  }\n\n  var hunks = [];\n  var oldRangeStart = 0,\n      newRangeStart = 0,\n      curRange = [],\n      oldLine = 1,\n      newLine = 1;\n\n  var _loop = function _loop(i) {\n    var current = diff[i],\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      var _curRange;\n\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        var prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      } // Output our changes\n\n\n      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\n        return (current.added ? '+' : '-') + entry;\n      }))); // Track the updated file position\n\n\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          var _curRange2;\n\n          // Overlapping\n          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\n        } else {\n          var _curRange3;\n\n          // end the range and output\n          var contextSize = Math.min(lines.length, options.context);\n\n          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\n\n          var hunk = {\n            oldStart: oldRangeStart,\n            oldLines: oldLine - oldRangeStart + contextSize,\n            newStart: newRangeStart,\n            newLines: newLine - newRangeStart + contextSize,\n            lines: curRange\n          };\n\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            var oldEOFNewline = /\\n$/.test(oldStr);\n            var newEOFNewline = /\\n$/.test(newStr);\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              // however, if the old file is empty, do not output the no-nl line\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            }\n\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n\n          hunks.push(hunk);\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  };\n\n  for (var i = 0; i < diff.length; i++) {\n    _loop(i);\n  }\n\n  return {\n    oldFileName: oldFileName,\n    newFileName: newFileName,\n    oldHeader: oldHeader,\n    newHeader: newHeader,\n    hunks: hunks\n  };\n}\nfunction formatPatch(diff) {\n  var ret = [];\n\n  if (diff.oldFileName == diff.newFileName) {\n    ret.push('Index: ' + diff.oldFileName);\n  }\n\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (var i = 0; i < diff.hunks.length; i++) {\n    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,\n    // the first number is one lower than one would expect.\n    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293\n\n    if (hunk.oldLines === 0) {\n      hunk.oldStart -= 1;\n    }\n\n    if (hunk.newLines === 0) {\n      hunk.newStart -= 1;\n    }\n\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));\n}\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n\nfunction arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return arrayStartsWith(a, b);\n}\nfunction arrayStartsWith(array, start) {\n  if (start.length > array.length) {\n    return false;\n  }\n\n  for (var i = 0; i < start.length; i++) {\n    if (start[i] !== array[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction calcLineCount(hunk) {\n  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\n      oldLines = _calcOldNewLineCount.oldLines,\n      newLines = _calcOldNewLineCount.newLines;\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\nfunction merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n  var mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    var mineCurrent = mine.hunks[mineIndex] || {\n      oldStart: Infinity\n    },\n        theirsCurrent = theirs.hunks[theirsIndex] || {\n      oldStart: Infinity\n    };\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      var mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n      return parsePatch(param)[0];\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n\n    return structuredPatch(undefined, undefined, base, param);\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {\n      mine: mine,\n      theirs: theirs\n    };\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart,\n    oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset,\n    newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  var mine = {\n    offset: mineOffset,\n    lines: mineLines,\n    index: 0\n  },\n      their = {\n    offset: theirOffset,\n    lines: theirLines,\n    index: 0\n  }; // Handle any leading content\n\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    var mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      var _hunk$lines;\n\n      // Mine inserted\n      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      var _hunk$lines2;\n\n      // Theirs inserted\n      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  } // Now push anything that may be remaining\n\n\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      var _hunk$lines3;\n\n      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\n\n      return;\n    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      var _hunk$lines4;\n\n      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\n\n      return;\n    }\n  } else if (arrayEqual(myChanges, theirChanges)) {\n    var _hunk$lines5;\n\n    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\n\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n\n  if (theirChanges.merged) {\n    var _hunk$lines6;\n\n    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\n\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  var ret = [],\n      operation = state.lines[state.index][0];\n\n  while (state.index < state.lines.length) {\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\n\nfunction collectContext(state, matchChanges) {\n  var changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n    var change = state.lines[state.index],\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n    merged.push(match);\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged: merged,\n    changes: changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function (prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\n\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (var i = 0; i < delta; i++) {\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  var oldLines = 0;\n  var newLines = 0;\n  lines.forEach(function (line) {\n    if (typeof line !== 'string') {\n      var myCount = calcOldNewLineCount(line.mine);\n      var theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n  return {\n    oldLines: oldLines,\n    newLines: newLines\n  };\n}\n\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n  var ret = [],\n      change,\n      operation;\n\n  for (var i = 0; i < changes.length; i++) {\n    change = changes[i];\n\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n\n  return ret;\n}\n\nfunction convertChangesToXML(changes) {\n  var ret = [];\n\n  for (var i = 0; i < changes.length; i++) {\n    var change = changes[i];\n\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  var n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n  return n;\n}\n\nexport { Diff, applyPatch, applyPatches, canonicalize, convertChangesToDMP, convertChangesToXML, createPatch, createTwoFilesPatch, diffArrays, diffChars, diffCss, diffJson, diffLines, diffSentences, diffTrimmedLines, diffWords, diffWordsWithSpace, merge, parsePatch, structuredPatch };\n","import {start as startRe, cont as contRe} from './regex.js'\n\n/**\n * Checks if the given character code can start an identifier.\n *\n * @param {number} code\n */\n// To do: support astrals.\nexport function start(code) {\n  return startRe.test(String.fromCharCode(code))\n}\n\n/**\n * Checks if the given character code can continue an identifier.\n *\n * @param {number} code\n */\n// To do: support astrals.\nexport function cont(code) {\n  var character = String.fromCharCode(code)\n  return startRe.test(character) || contRe.test(character)\n}\n\n/**\n * Checks if the given string is a valid identifier name.\n *\n * @param {string} name\n */\nexport function name(name) {\n  var index = -1\n\n  while (++index < name.length) {\n    if (!(index ? cont : start)(name.charCodeAt(index))) return false\n  }\n\n  // `false` if `name` is empty.\n  return index > 0\n}\n","// This module is generated by `build.js`.\nexport var start = /[$A-Z_a-z\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/\nexport var cont = /[\\d\\u00B7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]/\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('estree-jsx').Node} EstreeNode\n * @typedef {import('unist').Node} UnistNode\n * @typedef {EstreeNode|UnistNode} Node\n *\n * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types\n * @typedef {number} Index Move to the sibling at index next (after node itself\n *   is completely traversed).\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent\n * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n */\n\n/**\n * @callback Visitor\n * @param {Node} node Found node\n * @param {string?} key Field at which `node` lives\n * @param {number?} index Position at which `node` lives\n * @param {Array.<Node>} ancestors Ancestors of node\n * @returns {null|undefined|Action|Index|ActionTuple|void}\n */\n\n/**\n * @typedef Visitors\n * @property {Visitor} [enter]\n * @property {Visitor} [leave]\n */\n\nimport {color} from './color.js'\n\nvar own = {}.hasOwnProperty\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = Symbol('continue')\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = Symbol('skip')\n/**\n * Stop traversing immediately\n */\nexport const EXIT = Symbol('exit')\n\n/**\n * Visit children of tree which pass a test\n *\n * @param {Node} tree Abstract syntax tree to walk\n * @param {Visitor|Visitors} [visitor] Function to run for each node\n */\nexport function visit(tree, visitor) {\n  /** @type {Visitor} */\n  var enter\n  /** @type {Visitor} */\n  var leave\n\n  if (typeof visitor === 'function') {\n    enter = visitor\n  } else if (visitor && typeof visitor === 'object') {\n    enter = visitor.enter\n    leave = visitor.leave\n  }\n\n  build(tree, null, null, [])()\n\n  /**\n   * @param {Node} node\n   * @param {string?} key\n   * @param {number?} index\n   * @param {Array.<Node>} parents\n   */\n  function build(node, key, index, parents) {\n    if (nodelike(node)) {\n      visit.displayName = 'node (' + color(node.type) + ')'\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {ActionTuple} */\n      var result = enter ? toResult(enter(node, key, index, parents)) : []\n      /** @type {string} */\n      var cKey\n      /** @type {number} */\n      var cIndex\n      /** @type {Array.<Node>} */\n      var grandparents\n      /** @type {ActionTuple} */\n      var subresult\n      /** @type {unknown} */\n      var value\n      /** @type {unknown} */\n      var subvalue\n\n      if (result[0] === EXIT) {\n        return result\n      }\n\n      if (result[0] !== SKIP) {\n        for (cKey in node) {\n          if (\n            own.call(node, cKey) &&\n            node[cKey] &&\n            typeof node[cKey] === 'object' &&\n            cKey !== 'data' &&\n            cKey !== 'position'\n          ) {\n            value = node[cKey]\n\n            grandparents = parents.concat(node)\n\n            if (Array.isArray(value)) {\n              cIndex = 0\n\n              // type-coverage:ignore-next-line Looks like `unknown[]`.\n              while (cIndex > -1 && cIndex < value.length) {\n                // type-coverage:ignore-next-line Looks like `unknown[]`.\n                subvalue = value[cIndex]\n\n                if (nodelike(subvalue)) {\n                  subresult = build(subvalue, cKey, cIndex, grandparents)()\n                  if (subresult[0] === EXIT) return subresult\n                  cIndex =\n                    typeof subresult[1] === 'number' ? subresult[1] : cIndex + 1\n                } else {\n                  cIndex++\n                }\n              }\n            } else if (nodelike(value)) {\n              subresult = build(value, cKey, null, grandparents)()\n              if (subresult[0] === EXIT) return subresult\n            }\n          }\n        }\n      }\n\n      return leave ? toResult(leave(node, key, index, parents)) : result\n    }\n  }\n}\n\n/**\n * @param {null|undefined|void|Action|Index|ActionTuple} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction nodelike(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      // @ts-ignore Looks like a node.\n      typeof value.type === 'string' &&\n      // @ts-ignore Looks like a node.\n      value.type.length > 0\n  )\n}\n","// @ts-expect-error\nimport formatter from 'format'\n\nexport const fault = Object.assign(create(Error), {\n  eval: create(EvalError),\n  range: create(RangeError),\n  reference: create(ReferenceError),\n  syntax: create(SyntaxError),\n  type: create(TypeError),\n  uri: create(URIError)\n})\n\n/**\n * Create a new `EConstructor`, with the formatted `format` as a first argument.\n *\n * @template {Error} Fault\n * @template {new (reason: string) => Fault} Class\n * @param {Class} Constructor\n */\nexport function create(Constructor) {\n  /** @type {string} */\n  // @ts-expect-error\n  FormattedError.displayName = Constructor.displayName || Constructor.name\n\n  return FormattedError\n\n  /**\n   * Create an error with a printf-like formatted message.\n   *\n   * @param {string|null} [format]\n   *   Template string.\n   * @param {...unknown} values\n   *   Values to render in `format`.\n   * @returns {Fault}\n   */\n  function FormattedError(format, ...values) {\n    /** @type {string} */\n    const reason = format ? formatter(format, ...values) : format\n    return new Constructor(reason)\n  }\n}\n","/**\n * @typedef {import('hast').Element & {tagName: 'audio'|'canvas'|'embed'|'iframe'|'img'|'math'|'object'|'picture'|'svg'|'video'}} Embedded\n * @typedef {import('hast-util-is-element').AssertPredicate<Embedded>} AssertEmbedded\n */\n\nimport {convertElement} from 'hast-util-is-element'\n\n/**\n * Check if a node is an embedded element.\n * @type {AssertEmbedded}\n */\n// @ts-ignore Sure, the assertion matches.\nexport const embedded = convertElement([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n])\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {Parent['children'][number]} Child\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {Child|Root} Node\n * @typedef {import('parse5').Document} P5Document\n * @typedef {import('parse5').DocumentType} P5Doctype\n * @typedef {import('parse5').CommentNode} P5Comment\n * @typedef {import('parse5').TextNode} P5Text\n * @typedef {import('parse5').Element} P5Element\n * @typedef {import('parse5').ElementLocation} P5ElementLocation\n * @typedef {import('parse5').Location} P5Location\n * @typedef {import('parse5').Attribute} P5Attribute\n * @typedef {import('parse5').Node} P5Node\n *\n * @typedef {'html'|'svg'} Space\n *\n * @callback Handler\n * @param {Context} ctx\n * @param {P5Node} node\n * @param {Array.<Child>} [children]\n * @returns {Node}\n *\n * @typedef Options\n * @property {Space} [space='html'] Whether the root of the tree is in the `'html'` or `'svg'` space. If an element in with the SVG namespace is found in `ast`, `fromParse5` automatically switches to the SVG space when entering the element, and switches back when leaving\n * @property {VFile} [file] `VFile`, used to add positional information to nodes. If given, the file should have the original HTML source as its contents\n * @property {boolean} [verbose=false] Whether to add extra positional information about starting tags, closing tags, and attributes to elements. Note: not used without `file`\n *\n * @typedef Context\n * @property {Schema} schema\n * @property {VFile|undefined} file\n * @property {boolean|undefined} verbose\n * @property {boolean} location\n */\n\nimport {h, s} from 'hastscript'\nimport {html, svg, find} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n\n// Handlers.\nconst map = {\n  '#document': root,\n  '#document-fragment': root,\n  '#text': text,\n  '#comment': comment,\n  '#documentType': doctype\n}\n\n/**\n * Transform Parse5’s AST to a hast tree.\n *\n * @param {P5Node} ast\n * @param {Options|VFile} [options]\n */\nexport function fromParse5(ast, options = {}) {\n  /** @type {Options} */\n  let settings\n  /** @type {VFile|undefined} */\n  let file\n\n  if (isFile(options)) {\n    file = options\n    settings = {}\n  } else {\n    file = options.file\n    settings = options\n  }\n\n  return transform(\n    {\n      schema: settings.space === 'svg' ? svg : html,\n      file,\n      verbose: settings.verbose,\n      location: false\n    },\n    ast\n  )\n}\n\n/**\n * Transform children.\n *\n * @param {Context} ctx\n * @param {P5Node} ast\n * @returns {Node}\n */\nfunction transform(ctx, ast) {\n  const schema = ctx.schema\n  /** @type {Handler} */\n  // @ts-expect-error: index is fine.\n  const fn = own.call(map, ast.nodeName) ? map[ast.nodeName] : element\n  /** @type {Array.<Child>|undefined} */\n  let children\n\n  // Element.\n  if ('tagName' in ast) {\n    ctx.schema = ast.namespaceURI === webNamespaces.svg ? svg : html\n  }\n\n  if ('childNodes' in ast) {\n    children = nodes(ctx, ast.childNodes)\n  }\n\n  const result = fn(ctx, ast, children)\n\n  if ('sourceCodeLocation' in ast && ast.sourceCodeLocation && ctx.file) {\n    // @ts-expect-error It’s fine.\n    const position = createLocation(ctx, result, ast.sourceCodeLocation)\n\n    if (position) {\n      ctx.location = true\n      result.position = position\n    }\n  }\n\n  ctx.schema = schema\n\n  return result\n}\n\n/**\n * Transform children.\n *\n * @param {Context} ctx\n * @param {Array.<P5Node>} children\n * @returns {Array.<Child>}\n */\nfunction nodes(ctx, children) {\n  let index = -1\n  /** @type {Array.<Child>} */\n  const result = []\n\n  while (++index < children.length) {\n    // @ts-expect-error Assume no roots in children.\n    result[index] = transform(ctx, children[index])\n  }\n\n  return result\n}\n\n/**\n * Transform a document.\n * Stores `ast.quirksMode` in `node.data.quirksMode`.\n *\n * @type {Handler}\n * @param {P5Document} ast\n * @param {Array.<Child>} children\n * @returns {Root}\n */\nfunction root(ctx, ast, children) {\n  /** @type {Root} */\n  const result = {\n    type: 'root',\n    children,\n    data: {quirksMode: ast.mode === 'quirks' || ast.mode === 'limited-quirks'}\n  }\n\n  if (ctx.file && ctx.location) {\n    const doc = String(ctx.file)\n    const loc = location(doc)\n    result.position = {\n      start: loc.toPoint(0),\n      end: loc.toPoint(doc.length)\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform a doctype.\n *\n * @type {Handler}\n * @returns {Doctype}\n */\nfunction doctype() {\n  // @ts-expect-error Types are out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @type {Handler}\n * @param {P5Text} ast\n * @returns {Text}\n */\nfunction text(_, ast) {\n  return {type: 'text', value: ast.value}\n}\n\n/**\n * Transform a comment.\n *\n * @type {Handler}\n * @param {P5Comment} ast\n * @returns {Comment}\n */\nfunction comment(_, ast) {\n  return {type: 'comment', value: ast.data}\n}\n\n/**\n * Transform an element.\n *\n * @type {Handler}\n * @param {P5Element} ast\n * @param {Array.<ElementChild>} children\n * @returns {Element}\n */\nfunction element(ctx, ast, children) {\n  const fn = ctx.schema.space === 'svg' ? s : h\n  let index = -1\n  /** @type {Object.<string, string>} */\n  const props = {}\n\n  while (++index < ast.attrs.length) {\n    const attribute = ast.attrs[index]\n    props[(attribute.prefix ? attribute.prefix + ':' : '') + attribute.name] =\n      attribute.value\n  }\n\n  const result = fn(ast.tagName, props, children)\n\n  if (result.tagName === 'template' && 'content' in ast) {\n    const pos = ast.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    /** @type {Root} */\n    // @ts-expect-error Types are wrong.\n    const content = transform(ctx, ast.content)\n\n    if (startTag && endTag && ctx.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  return result\n}\n\n/**\n * Create clean positional information.\n *\n * @param {Context} ctx\n * @param {Node} node\n * @param {P5ElementLocation} location\n * @returns {Position|null}\n */\nfunction createLocation(ctx, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (ctx.verbose) {\n      /** @type {Object.<string, Position|null>} */\n      const props = {}\n      /** @type {string} */\n      let key\n\n      for (key in location.attrs) {\n        if (own.call(location.attrs, key)) {\n          props[find(ctx.schema, key).property] = position(location.attrs[key])\n        }\n      }\n\n      node.data = {\n        position: {\n          opening: position(location.startTag),\n          closing: location.endTag ? position(location.endTag) : null,\n          properties: props\n        }\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {P5Location} loc\n * @returns {Position|null}\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n  // @ts-expect-error `null` is fine.\n  return start || end ? {start, end} : null\n}\n\n/**\n * @param {Point} point\n * @returns {Point|null}\n */\nfunction point(point) {\n  return point.line && point.column ? point : null\n}\n\n/**\n * @param {VFile|Options} value\n * @returns {value is VFile}\n */\nfunction isFile(value) {\n  return 'messages' in value\n}\n","var own = {}.hasOwnProperty\n\n/**\n * Check if `node` has a set `name` property.\n *\n * @param {unknown} node\n * @param {string} name\n * @returns {boolean}\n */\nexport function hasProperty(node, name) {\n  /** @type {unknown} */\n  var value =\n    name &&\n    node &&\n    typeof node === 'object' &&\n    // @ts-ignore Looks like a node.\n    node.type === 'element' &&\n    // @ts-ignore Looks like an element.\n    node.properties &&\n    // @ts-ignore Looks like an element.\n    own.call(node.properties, name) &&\n    // @ts-ignore Looks like an element.\n    node.properties[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n *\n * @typedef {string} TagName\n * @typedef {null|undefined|TagName|TestFunctionAnything|Array.<TagName|TestFunctionAnything>} Test\n */\n\n/**\n * @template {Element} T\n * @typedef {null|undefined|T['tagName']|TestFunctionPredicate<T>|Array.<T['tagName']|TestFunctionPredicate<T>>} PredicateTest\n */\n\n/**\n * Check if an element passes a test\n *\n * @callback TestFunctionAnything\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if an element passes a certain node test\n *\n * @template {Element} X\n * @callback TestFunctionPredicate\n * @param {Element} element\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {element is X}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node is an element and passes a certain node test\n *\n * @template {Element} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\n// Check if `node` is an `element` and whether it passes the given test.\nexport const isElement =\n  /**\n   * Check if a node is an element and passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (() => false) &\n   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &\n   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test] When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number} [index] Position of `node` in `parent`\n     * @param {Parent} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is an `Element` (object with `type` set to `element` and `tagName` set to a non-empty string).\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convertElement(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index for child node')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!parent.type || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      // @ts-expect-error Looks like a node.\n      if (!node || !node.type || typeof node.type !== 'string') {\n        return false\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return check.call(context, node, index, parent)\n    }\n  )\n\nexport const convertElement =\n  /**\n   * @type {(\n   *   (<T extends Element>(test: T['tagName']|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return element\n      }\n\n      if (typeof test === 'string') {\n        return tagNameFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return anyFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or array as test')\n    }\n  )\n\n/**\n * @param {Array.<TagName|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convertElement(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s tag\n * name for said string.\n *\n * @param {TagName} check\n * @returns {AssertAnything}\n */\nfunction tagNameFactory(check) {\n  return tagName\n\n  /**\n   * @param {unknown} node\n   * @returns {boolean}\n   */\n  function tagName(node) {\n    return element(node) && node.tagName === check\n  }\n}\n\n/**\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    // @ts-expect-error: fine.\n    return element(node) && Boolean(check.call(this, node, ...parameters))\n  }\n}\n\n/**\n * Utility to return true if this is an element.\n * @param {unknown} node\n * @returns {node is Element}\n */\nfunction element(node) {\n  return Boolean(\n    node &&\n      typeof node === 'object' &&\n      // @ts-expect-error Looks like a node.\n      node.type === 'element' &&\n      // @ts-expect-error Looks like an element.\n      typeof node.tagName === 'string'\n  )\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nvar search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @param selector A simple CSS selector.\n *   Can contain a tag-name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param [defaultTagName='div'] Tag name to use if `selector` does not specify one.\n */\nexport const parseSelector =\n  /**\n   * @type {(\n   *  <Selector extends string, DefaultTagName extends string = 'div'>(selector?: Selector, defaultTagName?: DefaultTagName) => Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}\n   * )}\n   */\n  (\n    /**\n     * @param {string} [selector]\n     * @param {string} [defaultTagName='div']\n     * @returns {Element}\n     */\n    function (selector, defaultTagName = 'div') {\n      var value = selector || ''\n      /** @type {Properties} */\n      var props = {}\n      var start = 0\n      /** @type {string} */\n      var subvalue\n      /** @type {string} */\n      var previous\n      /** @type {RegExpMatchArray} */\n      var match\n\n      while (start < value.length) {\n        search.lastIndex = start\n        match = search.exec(value)\n        subvalue = value.slice(start, match ? match.index : value.length)\n\n        if (subvalue) {\n          if (!previous) {\n            defaultTagName = subvalue\n          } else if (previous === '#') {\n            props.id = subvalue\n          } else if (Array.isArray(props.className)) {\n            props.className.push(subvalue)\n          } else {\n            props.className = [subvalue]\n          }\n\n          start += subvalue.length\n        }\n\n        if (match) {\n          previous = match[0]\n          start++\n        }\n      }\n\n      return {\n        type: 'element',\n        tagName: defaultTagName,\n        properties: props,\n        children: []\n      }\n    }\n  )\n","import {convertElement} from 'hast-util-is-element'\nimport {hasProperty} from 'hast-util-has-property'\nimport {embedded} from 'hast-util-embedded'\nimport bodyOkLink from 'hast-util-is-body-ok-link'\n\nvar basic = convertElement([\n  'a',\n  'abbr',\n  // `area` is in fact only phrasing if it is inside a `map` element.\n  // However, since `area`s are required to be inside a `map` element, and it’s\n  // a rather involved check, it’s ignored here for now.\n  'area',\n  'b',\n  'bdi',\n  'bdo',\n  'br',\n  'button',\n  'cite',\n  'code',\n  'data',\n  'datalist',\n  'del',\n  'dfn',\n  'em',\n  'i',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'map',\n  'mark',\n  'meter',\n  'noscript',\n  'output',\n  'progress',\n  'q',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'select',\n  'small',\n  'span',\n  'strong',\n  'sub',\n  'sup',\n  'template',\n  'textarea',\n  'time',\n  'u',\n  'var',\n  'wbr'\n])\n\nvar meta = convertElement('meta')\n\n/**\n * @param {unknown} node\n * @returns {boolean}\n */\nexport function phrasing(node) {\n  return (\n    // @ts-ignore Looks like a text.\n    (node && node.type === 'text') ||\n    basic(node) ||\n    embedded(node) ||\n    bodyOkLink(node) ||\n    (meta(node) && hasProperty(node, 'itemProp'))\n  )\n}\n","/**\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('nlcst').Root} NlcstRoot\n * @typedef {import('nlcst').Paragraph} NlcstParagraph\n * @typedef {import('nlcst').WhiteSpace} NlcstWhiteSpace\n * @typedef {import('nlcst').Source} NlcstSource\n * @typedef {import('nlcst').Content} NlcstContent\n * @typedef {import('nlcst').SentenceContent} NlcstSentenceContent\n * @typedef {NlcstRoot|NlcstContent} NlcstNode\n *\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {HastRoot|HastContent} HastNode\n * @typedef {Extract<HastNode, import('unist').Parent>} HastParent\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {{\n *   parse(nodes: NlcstContent[]): NlcstRoot\n *   tokenizeSource(value: string): NlcstSource\n *   tokenizeWhiteSpace(value: string): NlcstWhiteSpace\n *   tokenizeParagraph(nodes: NlcstSentenceContent[]): NlcstParagraph\n *   tokenize(value: string): NlcstSentenceContent[]\n * }} ParserInstance\n * @typedef {new () => ParserInstance} ParserConstructor\n */\n\nimport {embedded} from 'hast-util-embedded'\nimport {convertElement} from 'hast-util-is-element'\nimport {phrasing} from 'hast-util-phrasing'\nimport {toString} from 'hast-util-to-string'\nimport {whitespace} from 'hast-util-whitespace'\nimport {toString as nlcstToString} from 'nlcst-to-string'\nimport {pointStart} from 'unist-util-position'\nimport {location} from 'vfile-location'\n\nconst source = convertElement(['code', dataNlcstSourced])\nconst ignore = convertElement([\n  'script',\n  'style',\n  'svg',\n  'math',\n  'del',\n  dataNlcstIgnore\n])\nconst explicit = convertElement(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n\nconst flowAccepting = convertElement([\n  'body',\n  'article',\n  'section',\n  'blockquote',\n  'nav',\n  'aside',\n  'header',\n  'footer',\n  'address',\n  'li',\n  'dt',\n  'dd',\n  'figure',\n  'figcaption',\n  'div',\n  'main',\n  'caption',\n  'td',\n  'th',\n  'form',\n  'fieldset',\n  'details',\n  'dialog'\n])\n\n/**\n * Transform `tree` to nlcst.\n *\n * @param {HastNode} tree\n * @param {VFile} file\n * @param {ParserInstance|ParserConstructor} Parser\n * @returns {NlcstRoot}\n */\nexport function toNlcst(tree, file, Parser) {\n  // Warn for invalid parameters.\n  if (!tree || !tree.type) {\n    throw new Error('hast-util-to-nlcst expected node')\n  }\n\n  if (!file || !file.messages) {\n    throw new Error('hast-util-to-nlcst expected file')\n  }\n\n  // Construct parser.\n  if (!Parser) {\n    throw new Error('hast-util-to-nlcst expected parser')\n  }\n\n  if (!pointStart(tree).line || !pointStart(tree).column) {\n    throw new Error('hast-util-to-nlcst expected position on nodes')\n  }\n\n  const doc = String(file)\n  const loc = location(doc)\n  const parser = 'parse' in Parser ? Parser : new Parser()\n  /** @type {NlcstContent[]} */\n  const results = []\n\n  find(tree)\n\n  return {\n    type: 'RootNode',\n    children: results,\n    position: {start: loc.toPoint(0), end: loc.toPoint(doc.length)}\n  }\n\n  /**\n   * @param {HastNode} node\n   */\n  function find(node) {\n    if (node.type === 'root') {\n      findAll(node.children)\n    } else if (node.type === 'element' && !ignore(node)) {\n      if (explicit(node)) {\n        // Explicit paragraph.\n        add(node)\n      } else if (flowAccepting(node)) {\n        // Slightly simplified version of: <https://html.spec.whatwg.org/#paragraphs>.\n        implicit(flattenAll(node.children))\n      } else {\n        // Dig deeper.\n        findAll(node.children)\n      }\n    }\n  }\n\n  /**\n   * @param {HastContent[]} children\n   */\n  function findAll(children) {\n    let index = -1\n\n    while (++index < children.length) {\n      find(children[index])\n    }\n  }\n\n  /**\n   * @param {HastElementContent[]} children\n   * @returns {HastElementContent[]}\n   */\n  function flattenAll(children) {\n    /** @type {HastElementContent[]} */\n    const results = []\n    let index = -1\n\n    while (++index < children.length) {\n      const child = children[index]\n\n      // See: <https://html.spec.whatwg.org/multipage/dom.html#paragraphs>\n      if (\n        child.type === 'element' &&\n        (child.tagName === 'a' ||\n          child.tagName === 'ins' ||\n          child.tagName === 'del' ||\n          child.tagName === 'map')\n      ) {\n        results.push(...flattenAll(child.children))\n      } else {\n        results.push(child)\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * @param {HastElementContent|HastElementContent[]} node\n   */\n  function add(node) {\n    /** @type {NlcstSentenceContent[]|undefined} */\n    const result = Array.isArray(node) ? all(node) : one(node)\n\n    if (result && result.length > 0) {\n      results.push(parser.tokenizeParagraph(result))\n    }\n  }\n\n  /**\n   * @param {HastElementContent[]} children\n   */\n  function implicit(children) {\n    let index = -1\n    let start = -1\n    /** @type {boolean|undefined} */\n    let viable\n\n    while (++index <= children.length) {\n      const child = children[index]\n\n      if (child && phrasing(child)) {\n        if (start === -1) start = index\n\n        if (!viable && !embedded(child) && !whitespace(child)) {\n          viable = true\n        }\n      } else if (child && start === -1) {\n        find(child)\n        start = index + 1\n      } else if (start !== -1) {\n        ;(viable ? add : findAll)(children.slice(start, index))\n\n        if (child) {\n          find(child)\n        }\n\n        viable = undefined\n        start = -1\n      }\n    }\n  }\n\n  /**\n   * Convert `node` (hast) to nlcst.\n   *\n   * @param {HastContent} node\n   * @returns {NlcstSentenceContent[]|undefined}\n   */\n  function one(node) {\n    /** @type {NlcstSentenceContent[]|undefined} */\n    let replacement\n    /** @type {boolean|undefined} */\n    let change\n\n    if (node.type === 'text') {\n      replacement = parser.tokenize(node.value)\n      change = true\n    } else if (node.type === 'element' && !ignore(node)) {\n      if (node.tagName === 'wbr') {\n        replacement = [parser.tokenizeWhiteSpace(' ')]\n        change = true\n      } else if (node.tagName === 'br') {\n        replacement = [parser.tokenizeWhiteSpace('\\n')]\n        change = true\n      } else if (source(node)) {\n        replacement = [parser.tokenizeSource(toString(node))]\n        change = true\n      } else {\n        replacement = all(node.children)\n      }\n    }\n\n    return change && replacement\n      ? patch(replacement, loc, loc.toOffset(pointStart(node)))\n      : replacement\n  }\n\n  /**\n   * Convert all `children` (hast) to nlcst.\n   *\n   * @param {HastContent[]} children\n   * @returns {NlcstSentenceContent[]}\n   */\n  function all(children) {\n    /** @type {NlcstSentenceContent[]} */\n    const results = []\n    let index = -1\n\n    while (++index < children.length) {\n      results.push(...(one(children[index]) || []))\n    }\n\n    return results\n  }\n\n  /**\n   * Patch a position on each node in `nodes`.\n   * `offset` is the offset in `file` this run of content starts at.\n   *\n   * Note that nlcst nodes are concrete, meaning that their starting and ending\n   * positions can be inferred from their content.\n   *\n   * @template {NlcstContent[]} T\n   * @param {T} nodes\n   * @param {ReturnType<location>} location\n   * @param {number} offset\n   * @returns {T}\n   */\n  function patch(nodes, location, offset) {\n    let index = -1\n    let start = offset\n\n    while (++index < nodes.length) {\n      const node = nodes[index]\n\n      if ('children' in node) {\n        patch(node.children, location, start)\n      }\n\n      const end = start + nlcstToString(node).length\n\n      node.position = {\n        start: location.toPoint(start),\n        end: location.toPoint(end)\n      }\n\n      start = end\n    }\n\n    return nodes\n  }\n}\n\n/**\n * @param {HastElement} node\n * @returns {boolean}\n */\nfunction dataNlcstSourced(node) {\n  return Boolean(node.properties && node.properties.dataNlcst === 'source')\n}\n\n/**\n * @param {HastElement} node\n * @returns {boolean}\n */\nfunction dataNlcstIgnore(node) {\n  return Boolean(node.properties && node.properties.dataNlcst === 'ignore')\n}\n","/**\n * @fileoverview\n *   Get the plain-text value of a hast node.\n * @longdescription\n *   ## Use\n *\n *   ```js\n *   import {h} from 'hastscript'\n *   import {toString} from 'hast-util-to-string'\n *\n *   toString(h('p', 'Alpha'))\n *   //=> 'Alpha'\n *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))\n *   //=> 'Bold and italic.'\n *   ```\n *\n *   ## API\n *\n *   ### `toString(node)`\n *\n *   Transform a node to a string.\n */\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {Root|Root['children'][number]} Node\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Node} node\n * @returns {string}\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Node} node\n * @returns {string}\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Root|Element} node\n * @returns {string}\n */\nfunction all(node) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n","/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  var value =\n    // @ts-ignore looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-ignore looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {Root['children'][number]} Child\n * @typedef {Child|Root} Node\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {Root|Element} HResult\n * @typedef {string|number} HStyleValue\n * @typedef {Object.<string, HStyleValue>} HStyle\n * @typedef {string|number|boolean|null|undefined} HPrimitiveValue\n * @typedef {Array.<string|number>} HArrayValue\n * @typedef {HPrimitiveValue|HArrayValue} HPropertyValue\n * @typedef {{[property: string]: HPropertyValue|HStyle}} HProperties\n *\n * @typedef {string|number|null|undefined} HPrimitiveChild\n * @typedef {Array.<Node|HPrimitiveChild>} HArrayChild\n * @typedef {Node|HPrimitiveChild|HArrayChild} HChild\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array.<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null|undefined, ...children: HChild[]): Root\n     *   (selector: string, properties?: HProperties, ...children: HChild[]): Element\n     *   (selector: string, ...children: HChild[]): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string|null} [selector]\n       * @param {HProperties|HChild} [properties]\n       * @param {HChild[]} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties|HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle|HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array.<string|number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array.<Child>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * @param {HStyle} value\n * @returns {string}\n */\nfunction style(value) {\n  /** @type {Array.<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * @param {Array.<string>} values\n * @returns {Object.<string, string>}\n */\nfunction createAdjustMap(values) {\n  /** @type {Object.<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","/**\n * @typedef {import('./core.js').HChild} Child Acceptable child value\n * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.\n *\n * @typedef {import('./jsx-classic').Element} h.JSX.Element\n * @typedef {import('./jsx-classic').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./core.js').HChild} Child Acceptable child value\n * @typedef {import('./core.js').HProperties} Properties Acceptable properties value.\n *\n * @typedef {import('./jsx-classic').Element} s.JSX.Element\n * @typedef {import('./jsx-classic').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n","export var hedges = [\n  'a bit',\n  'about',\n  'actually',\n  'allege',\n  'alleged',\n  'almost',\n  'almost never',\n  'always',\n  'and all that',\n  'and so forth',\n  'apparent',\n  'apparently',\n  'appear',\n  'appear to be',\n  'appeared',\n  'appears',\n  'approximately',\n  'around',\n  'assume',\n  'assumed',\n  'assumes',\n  'assumption',\n  'at least',\n  'basically',\n  'be sure',\n  'believe',\n  'believed',\n  'believes',\n  'bunch',\n  'can',\n  'certain',\n  'certainly',\n  'clear',\n  'clearly',\n  'conceivably',\n  'consider',\n  'considered',\n  'considers',\n  'consistent with',\n  'could',\n  'couple',\n  'definite',\n  'definitely',\n  'diagnostic',\n  \"don't know\",\n  'doubt',\n  'doubtful',\n  'effectively',\n  'estimate',\n  'estimated',\n  'estimates',\n  'et cetera',\n  'evidently',\n  'fairly',\n  'few',\n  'find',\n  'finds',\n  'found',\n  'frequently',\n  'generally',\n  'guess',\n  'guessed',\n  'guesses',\n  'hopefully',\n  \"if i'm understanding you correctly\",\n  'improbable',\n  'in general',\n  'in my mind',\n  'in my opinion',\n  'in my understanding',\n  'in my view',\n  'inconclusive',\n  'indicate',\n  'kind of',\n  'largely',\n  'like',\n  'likely',\n  'little',\n  'look like',\n  'looks like',\n  'mainly',\n  'many',\n  'may',\n  'maybe',\n  'might',\n  'more or less',\n  'most',\n  'mostly',\n  'much',\n  'must',\n  'my impression',\n  'my thinking is',\n  'my understanding is',\n  'necessarily',\n  'occasionally',\n  'often',\n  'overall',\n  'partially',\n  'perhaps',\n  'possibility',\n  'possible',\n  'possibly',\n  'practically',\n  'presumable',\n  'presumably',\n  'pretty',\n  'probability',\n  'probable',\n  'probably',\n  'quite',\n  'quite clearly',\n  'rare',\n  'rarely',\n  'rather',\n  'read',\n  'really',\n  'roughly',\n  'say',\n  'says',\n  'seem',\n  'seemed',\n  'seems',\n  'seldom',\n  'several',\n  'should',\n  'so far',\n  'some',\n  'somebody',\n  'somehow',\n  'someone',\n  'something',\n  'something or other',\n  'sometimes',\n  'somewhat',\n  'somewhere',\n  'sort of',\n  'speculate',\n  'speculated',\n  'speculates',\n  'suggest',\n  'suggested',\n  'suggestive',\n  'suggests',\n  'suppose',\n  'supposed',\n  'supposedly',\n  'supposes',\n  'surely',\n  'tend',\n  'their impression',\n  'think',\n  'thinks',\n  'thought',\n  'understand',\n  'understands',\n  'understood',\n  'unlikely',\n  'unsure',\n  'usually',\n  'virtually',\n  'will',\n  'would'\n]\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|Array<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {Array<Array<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {string|number|boolean} MarkerParameterValue\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast-util-mdx-expression').MDXFlowExpression} MDXFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MDXTextExpression} MDXTextExpression\n * @typedef {Root|Content} Node\n * @typedef {Object.<string, MarkerParameterValue>} MarkerParameters\n *\n * @typedef Mdx1CommentNode\n * @property {'comment'} type\n * @property {string} value\n *\n * @typedef Marker\n * @property {string} name\n * @property {string} attributes\n * @property {MarkerParameters|null} parameters\n * @property {HTML|Mdx1CommentNode|MDXFlowExpression|MDXTextExpression} node\n */\n\nconst commentExpression = /\\s*([a-zA-Z\\d-]+)(\\s+([\\s\\S]*))?\\s*/\nconst esCommentExpression = new RegExp(\n  '(\\\\s*\\\\/\\\\*' + commentExpression.source + '\\\\*\\\\/\\\\s*)'\n)\nconst markerExpression = new RegExp(\n  '(\\\\s*<!--' + commentExpression.source + '-->\\\\s*)'\n)\n\n/**\n * Parse a comment marker.\n * @param {unknown} value\n * @returns {Marker|null}\n */\nexport function commentMarker(value) {\n  if (\n    isNode(value) &&\n    (value.type === 'html' ||\n      // @ts-expect-error: MDX@1\n      value.type === 'comment' ||\n      value.type === 'mdxFlowExpression' ||\n      value.type === 'mdxTextExpression')\n  ) {\n    let offset = 2\n    /** @type {RegExpMatchArray|null|undefined} */\n    let match\n\n    // @ts-expect-error: MDX@1\n    if (value.type === 'comment') {\n      // @ts-expect-error: MDX@1\n      match = value.value.match(commentExpression)\n      offset = 1\n    } else if (value.type === 'html') {\n      match = value.value.match(markerExpression)\n    } else if (\n      value.type === 'mdxFlowExpression' ||\n      value.type === 'mdxTextExpression'\n    ) {\n      match = value.value.match(esCommentExpression)\n    }\n\n    if (match && match[0].length === value.value.length) {\n      const parameters = parseParameters(match[offset + 1] || '')\n\n      if (parameters) {\n        return {\n          name: match[offset],\n          attributes: (match[offset + 2] || '').trim(),\n          parameters,\n          node: value\n        }\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Parse `value` into an object.\n *\n * @param {string} value\n * @returns {MarkerParameters|null}\n */\nfunction parseParameters(value) {\n  /** @type {MarkerParameters} */\n  const parameters = {}\n\n  return value\n    .replace(\n      /\\s+([-\\w]+)(?:=(?:\"((?:\\\\[\\s\\S]|[^\"])+)\"|'((?:\\\\[\\s\\S]|[^'])+)'|((?:\\\\[\\s\\S]|[^\"'\\s])+)))?/gi,\n      replacer\n    )\n    .replace(/\\s+/g, '')\n    ? null\n    : parameters\n\n  /**\n   * @param {string} _\n   * @param {string} $1\n   * @param {string} $2\n   * @param {string} $3\n   * @param {string} $4\n   */\n  // eslint-disable-next-line max-params\n  function replacer(_, $1, $2, $3, $4) {\n    /** @type {MarkerParameterValue} */\n    let value = $2 || $3 || $4 || ''\n\n    if (value === 'true' || value === '') {\n      value = true\n    } else if (value === 'false') {\n      value = false\n    } else if (!Number.isNaN(Number(value))) {\n      value = Number(value)\n    }\n\n    parameters[$1] = value\n\n    return ''\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction isNode(value) {\n  return Boolean(value && typeof value === 'object' && 'type' in value)\n}\n","/**\n * @typedef Options Configuration.\n * @property {Test} [ignore] `unist-util-is` test used to assert parents\n *\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {Content|Root} Node\n * @typedef {Extract<Node, import('mdast').Parent>} Parent\n *\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Object.<string, Replace>} FindAndReplaceSchema\n * @typedef {Array.<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array.<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array.<PhrasingContent>|PhrasingContent|string|false|undefined|null}\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param tree mdast tree\n * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`\n * @param [replace] Value to insert.\n *   * When `string`, turned into a Text node.\n *   * When `Function`, called with the results of calling `RegExp.exec` as\n *     arguments, in which case it can return a single or a list of `Node`,\n *     a `string` (which is wrapped in a `Text` node), or `false` to not replace\n * @param [options] Configuration.\n */\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &\n   *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)\n   * )}\n   **/\n  (\n    /**\n     * @param {Node} tree\n     * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n     * @param {Replace|Options} [replace]\n     * @param {Options} [options]\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      return tree\n\n      /** @type {import('unist-util-visit-parents').Visitor<Text>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent|undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = /** @type {Parent} */ (parents[index])\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error mdast vs. unist parent.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, grandparent)\n        }\n      }\n\n      /**\n       * @param {Text} node\n       * @param {Parent} parent\n       * @returns {VisitorResult}\n       */\n      function handler(node, parent) {\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        let index = parent.children.indexOf(node)\n        /** @type {Array.<PhrasingContent>} */\n        let nodes = []\n        /** @type {number|undefined} */\n        let position\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          position = match.index\n          // @ts-expect-error this is perfectly fine, typescript.\n          let value = replace(...match, {\n            index: match.index,\n            input: match.input\n          })\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (position === undefined) {\n          nodes = [node]\n          index--\n        } else {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        }\n\n        return index + nodes.length + 1\n      }\n    }\n  )\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('mdast').Literal} Literal\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/util/indent-lines.js').Map} Map\n *\n * @typedef {import('micromark-extension-frontmatter/matters.js').Options} Options\n * @typedef {import('micromark-extension-frontmatter/matters.js').Matter} Matter\n * @typedef {import('micromark-extension-frontmatter/matters.js').Info} Info\n */\n\nimport {matters} from 'micromark-extension-frontmatter/matters.js'\n\n/**\n * @param {Options} [options]\n * @returns {FromMarkdownExtension}\n */\nexport function frontmatterFromMarkdown(options) {\n  const settings = matters(options)\n  /** @type {FromMarkdownExtension['enter']} */\n  const enter = {}\n  /** @type {FromMarkdownExtension['exit']} */\n  const exit = {}\n  let index = -1\n\n  while (++index < settings.length) {\n    const matter = settings[index]\n    enter[matter.type] = opener(matter)\n    exit[matter.type] = close\n    exit[matter.type + 'Value'] = value\n  }\n\n  return {enter, exit}\n}\n\n/**\n * @param {Matter} matter\n * @returns {FromMarkdownHandle} enter\n */\nfunction opener(matter) {\n  return open\n  /** @type {FromMarkdownHandle} */\n  function open(token) {\n    // @ts-expect-error: custom.\n    this.enter({type: matter.type, value: ''}, token)\n    this.buffer()\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction close(token) {\n  const data = this.resume()\n  // Remove the initial and final eol.\n  this.exit(token).value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction value(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function frontmatterToMarkdown(options) {\n  /** @type {ToMarkdownExtension['unsafe']} */\n  const unsafe = []\n  /** @type {ToMarkdownExtension['handlers']} */\n  const handlers = {}\n  const settings = matters(options)\n  let index = -1\n\n  while (++index < settings.length) {\n    const matter = settings[index]\n    handlers[matter.type] = handler(matter)\n    unsafe.push({atBreak: true, character: fence(matter, 'open').charAt(0)})\n  }\n\n  return {unsafe, handlers}\n}\n\n/**\n * @param {Matter} matter\n * @returns {(node: Literal) => string} enter\n */\nfunction handler(matter) {\n  const open = fence(matter, 'open')\n  const close = fence(matter, 'close')\n\n  return handle\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Literal} node\n   */\n  function handle(node) {\n    return open + (node.value ? '\\n' + node.value : '') + '\\n' + close\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info|string} schema\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/**\n * @returns {FromMarkdownExtension}\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinition(token) {\n    this.enter(\n      {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n      token\n    )\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinition(token) {\n    this.exit(token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCall(token) {\n    this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCallString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCallString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCall(token) {\n    this.exit(token)\n  }\n}\n\n/**\n * @returns {ToMarkdownExtension}\n */\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek\n\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n  function footnoteReference(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteReference')\n    const subexit = context.enter('reference')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    exit()\n    value += tracker.move(']')\n    return value\n  }\n\n  /** @type {ToMarkdownHandle} */\n  function footnoteReferencePeek() {\n    return '['\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteDefinition')\n    const subexit = context.enter('label')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    value += tracker.move(\n      ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n    )\n    tracker.shift(4)\n    value += tracker.move(\n      indentLines(containerFlow(node, context, tracker.current()), map)\n    )\n    exit()\n\n    return value\n\n    /** @type {Map} */\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line\n      }\n\n      return line\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Association} Association\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another: controversially,\n * character escapes and references don’t work in this matching: `&copy;` does\n * not match `©`, and `\\+` does not match `+`.\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character escapes\n * and all character references.\n *\n * @param {Association} node\n * @returns {string}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Join} Join\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {TrackFields} safeOptions\n * @returns {string}\n */\nexport function containerFlow(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  const tracker = track(safeOptions)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      context.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1])))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n\n  /**\n   * @param {Node} left\n   * @param {Node} right\n   * @returns {string}\n   */\n  function between(left, right) {\n    let index = context.join.length\n\n    while (index--) {\n      const result = context.join[index](left, right, parent, context)\n\n      if (result === true || result === 1) {\n        break\n      }\n\n      if (typeof result === 'number') {\n        return '\\n'.repeat(1 + result)\n      }\n\n      if (result === false) {\n        return '\\n\\n<!---->\\n\\n'\n      }\n    }\n\n    return '\\n\\n'\n  }\n}\n","/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (!list) {\n    return none\n  }\n\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * @param {Context} context\n * @param {string|null|undefined} input\n * @param {SafeOptions & {encode?: Array<string>}} config\n * @returns {string}\n */\nexport function safe(context, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n\n    if (!patternInScope(context.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [{character: '~', inConstruct: 'phrasing'}],\n  handlers: {delete: handleDelete}\n}\n\nhandleDelete.peek = peekDelete\n\n/** @type {FromMarkdownHandle} */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('emphasis')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterTable(token) {\n  /** @type {Array<'left'|'right'|'center'|'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/** @type {FromMarkdownHandle} */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    // `markdown-table` will always add an align row\n    const value = serializeData([row])\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string>} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @type {Handle}\n * @param {InlineCode} node\n */\nexport function inlineCode(node, _, context) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @type {Handle}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('../util/indent-lines.js').Map} Map\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\nimport {containerFlow} from '../util/container-flow.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {ListItem} node\n */\nexport function listItem(node, parent, context, safeOptions) {\n  const listItemIndent = checkListItemIndent(context)\n  let bullet = context.bulletCurrent || checkBullet(context)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (context.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = track(safeOptions)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = context.enter('listItem')\n  const value = indentLines(\n    containerFlow(node, context, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bullet'], undefined>}\n */\nexport function checkBullet(context) {\n  const marker = context.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['listItemIndent'], undefined>}\n */\nexport function checkListItemIndent(context) {\n  const style = context.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Join} Join\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {TrackFields} safeOptions\n * @returns {string}\n */\nexport function containerFlow(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  const tracker = track(safeOptions)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      context.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1])))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n\n  /**\n   * @param {Node} left\n   * @param {Node} right\n   * @returns {string}\n   */\n  function between(left, right) {\n    let index = context.join.length\n\n    while (index--) {\n      const result = context.join[index](left, right, parent, context)\n\n      if (result === true || result === 1) {\n        break\n      }\n\n      if (typeof result === 'number') {\n        return '\\n'.repeat(1 + result)\n      }\n\n      if (result === false) {\n        return '\\n\\n<!---->\\n\\n'\n      }\n    }\n\n    return '\\n\\n'\n  }\n}\n","/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-gfm-table').Options} Options\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * @returns {Array.<FromMarkdownExtension>}\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('./complex-types').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('./complex-types').MdxTextExpression} MdxTextExpression\n */\n\n/**\n * @typedef {MdxFlowExpression} MDXFlowExpression\n * @typedef {MdxTextExpression} MDXTextExpression\n */\n\n/** @type {FromMarkdownExtension} */\nexport const mdxExpressionFromMarkdown = {\n  enter: {\n    mdxFlowExpression: enterMdxFlowExpression,\n    mdxTextExpression: enterMdxTextExpression\n  },\n  exit: {\n    mdxFlowExpression: exitMdxExpression,\n    mdxFlowExpressionChunk: exitMdxExpressionData,\n    mdxTextExpression: exitMdxExpression,\n    mdxTextExpressionChunk: exitMdxExpressionData\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const mdxExpressionToMarkdown = {\n  handlers: {\n    mdxFlowExpression: handleMdxExpression,\n    mdxTextExpression: handleMdxExpression\n  },\n  unsafe: [\n    {character: '{', inConstruct: ['phrasing']},\n    {atBreak: true, character: '{'}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  /** @type {Program|undefined} */\n  // @ts-expect-error: estree.\n  const estree = token.estree\n  const node = /** @type {MDXFlowExpression|MDXTextExpression} */ (\n    this.exit(token)\n  )\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MDXFlowExpression|MDXTextExpression} node\n */\nfunction handleMdxExpression(node) {\n  const value = node.value || ''\n  return '{' + value + '}'\n}\n","/**\n * @typedef {import('mdast').Literal} Literal\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Token} Token\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} ToMarkdownMap\n * @typedef {import('mdast-util-from-markdown').OnEnterError} OnEnterError\n * @typedef {import('mdast-util-from-markdown').OnExitError} OnExitError\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('./complex-types').MdxJsxAttributeValueExpression} MdxJsxAttributeValueExpression\n * @typedef {import('./complex-types').MdxJsxAttribute} MdxJsxAttribute\n * @typedef {import('./complex-types').MdxJsxExpressionAttribute} MdxJsxExpressionAttribute\n * @typedef {import('./complex-types').MdxJsxFlowElement} MdxJsxFlowElement\n * @typedef {import('./complex-types').MdxJsxTextElement} MdxJsxTextElement\n * @typedef {{name: string|null, attributes: (MdxJsxAttribute|MdxJsxExpressionAttribute)[], close?: boolean, selfClosing?: boolean, start: Token['start'], end: Token['start']}} Tag\n */\n\n/**\n * Legacy names:\n *\n * @typedef {MdxJsxAttributeValueExpression} MDXJsxAttributeValueExpression\n * @typedef {MdxJsxAttribute} MDXJsxAttribute\n * @typedef {MdxJsxExpressionAttribute} MDXJsxExpressionAttribute\n * @typedef {MdxJsxFlowElement} MDXJsxFlowElement\n * @typedef {MdxJsxTextElement} MDXJsxTextElement\n */\n\nimport {parseEntities} from 'parse-entities'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {VFileMessage} from 'vfile-message'\nimport {stringifyEntitiesLight} from 'stringify-entities'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {checkQuote} from 'mdast-util-to-markdown/lib/util/check-quote.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\n\nmdxElement.peek = peekElement\n\n/** @type {FromMarkdownExtension} */\nexport const mdxJsxFromMarkdown = {\n  canContainEols: ['mdxJsxTextElement'],\n  enter: {\n    mdxJsxFlowTag: enterMdxJsxTag,\n    mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n    mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n    mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n    mdxJsxFlowTagAttributeValueLiteral: buffer,\n    mdxJsxFlowTagAttributeValueExpression: buffer,\n    mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n\n    mdxJsxTextTag: enterMdxJsxTag,\n    mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n    mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n    mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n    mdxJsxTextTagAttributeValueLiteral: buffer,\n    mdxJsxTextTagAttributeValueExpression: buffer,\n    mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n  },\n  exit: {\n    mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n    mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n    mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n    mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n    mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n    mdxJsxFlowTagExpressionAttributeValue: data,\n    mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n    mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n    mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n    mdxJsxFlowTagAttributeValueLiteralValue: data,\n    mdxJsxFlowTagAttributeValueExpression:\n      exitMdxJsxTagAttributeValueExpression,\n    mdxJsxFlowTagAttributeValueExpressionValue: data,\n    mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n    mdxJsxFlowTag: exitMdxJsxTag,\n\n    mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n    mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n    mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n    mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n    mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n    mdxJsxTextTagExpressionAttributeValue: data,\n    mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n    mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n    mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n    mdxJsxTextTagAttributeValueLiteralValue: data,\n    mdxJsxTextTagAttributeValueExpression:\n      exitMdxJsxTagAttributeValueExpression,\n    mdxJsxTextTagAttributeValueExpressionValue: data,\n    mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n    mdxJsxTextTag: exitMdxJsxTag\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const mdxJsxToMarkdown = {\n  handlers: {\n    mdxJsxFlowElement: mdxElement,\n    mdxJsxTextElement: mdxElement\n  },\n  unsafe: [\n    {character: '<', inConstruct: ['phrasing']},\n    {atBreak: true, character: '<'}\n  ],\n  fences: true,\n  resourceLink: true\n}\n\n/** @type {FromMarkdownHandle} */\nfunction buffer() {\n  this.buffer()\n}\n\n/** @type {FromMarkdownHandle} */\nfunction data(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTag(token) {\n  /** @type {Tag} */\n  const tag = {name: null, attributes: [], start: token.start, end: token.end}\n  if (!this.getData('mdxJsxTagStack')) this.setData('mdxJsxTagStack', [])\n  this.setData('mdxJsxTag', tag)\n  this.buffer()\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTagClosingMarker(token) {\n  const stack = /** @type {Tag[]} */ (this.getData('mdxJsxTagStack'))\n\n  if (stack.length === 0) {\n    throw new VFileMessage(\n      'Unexpected closing slash `/` in tag, expected an open tag first',\n      {start: token.start, end: token.end},\n      'mdast-util-mdx-jsx:unexpected-closing-slash'\n    )\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTagAnyAttribute(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n  if (tag.close) {\n    throw new VFileMessage(\n      'Unexpected attribute in closing tag, expected the end of the tag',\n      {start: token.start, end: token.end},\n      'mdast-util-mdx-jsx:unexpected-attribute'\n    )\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTagSelfClosingMarker(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n  if (tag.close) {\n    throw new VFileMessage(\n      'Unexpected self-closing slash `/` in closing tag, expected the end of the tag',\n      {start: token.start, end: token.end},\n      'mdast-util-mdx-jsx:unexpected-self-closing-slash'\n    )\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagClosingMarker() {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  tag.close = true\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagNamePrimary(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  tag.name = this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagNameMember(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  tag.name += '.' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagNameLocal(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  tag.name += ':' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTagAttribute(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  enterMdxJsxTagAnyAttribute.call(this, token)\n  tag.attributes.push({type: 'mdxJsxAttribute', name: '', value: null})\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxJsxTagExpressionAttribute(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  enterMdxJsxTagAnyAttribute.call(this, token)\n  tag.attributes.push({type: 'mdxJsxExpressionAttribute', value: ''})\n  this.buffer()\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagExpressionAttribute(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const tail = /** @type {MdxJsxExpressionAttribute} */ (\n    tag.attributes[tag.attributes.length - 1]\n  )\n  /** @type {Program|undefined} */\n  // @ts-expect-error: custom.\n  const estree = token.estree\n\n  tail.value = this.resume()\n\n  if (estree) {\n    tail.data = {estree}\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagAttributeNamePrimary(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const node = /** @type {MdxJsxAttribute} */ (\n    tag.attributes[tag.attributes.length - 1]\n  )\n  node.name = this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagAttributeNameLocal(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const node = /** @type {MdxJsxAttribute} */ (\n    tag.attributes[tag.attributes.length - 1]\n  )\n  node.name += ':' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagAttributeValueLiteral() {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  tag.attributes[tag.attributes.length - 1].value = parseEntities(\n    this.resume(),\n    {nonTerminated: false}\n  )\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagAttributeValueExpression(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const tail = /** @type {MdxJsxAttribute} */ (\n    tag.attributes[tag.attributes.length - 1]\n  )\n  /** @type {MdxJsxAttributeValueExpression} */\n  const node = {type: 'mdxJsxAttributeValueExpression', value: this.resume()}\n  /** @type {Program|undefined} */\n  // @ts-expect-error: custom.\n  const estree = token.estree\n\n  if (estree) {\n    node.data = {estree}\n  }\n\n  tail.value = node\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTagSelfClosingMarker() {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n\n  tag.selfClosing = true\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxJsxTag(token) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const stack = /** @type {Tag[]} */ (this.getData('mdxJsxTagStack'))\n  const tail = stack[stack.length - 1]\n\n  if (tag.close && tail.name !== tag.name) {\n    throw new VFileMessage(\n      'Unexpected closing tag `' +\n        serializeAbbreviatedTag(tag) +\n        '`, expected corresponding closing tag for `' +\n        serializeAbbreviatedTag(tail) +\n        '` (' +\n        stringifyPosition(tail) +\n        ')',\n      {start: token.start, end: token.end},\n      'mdast-util-mdx-jsx:end-tag-mismatch'\n    )\n  }\n\n  // End of a tag, so drop the buffer.\n  this.resume()\n\n  if (tag.close) {\n    stack.pop()\n  } else {\n    this.enter(\n      {\n        type:\n          token.type === 'mdxJsxTextTag'\n            ? 'mdxJsxTextElement'\n            : 'mdxJsxFlowElement',\n        name: tag.name,\n        attributes: tag.attributes,\n        children: []\n      },\n      token,\n      onErrorRightIsTag\n    )\n  }\n\n  if (tag.selfClosing || tag.close) {\n    this.exit(token, onErrorLeftIsTag)\n  } else {\n    stack.push(tag)\n  }\n}\n\n/** @type {OnEnterError} */\nfunction onErrorRightIsTag(closing, open) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  const place = closing ? ' before the end of `' + closing.type + '`' : ''\n  const position = closing\n    ? {start: closing.start, end: closing.end}\n    : undefined\n\n  throw new VFileMessage(\n    'Expected a closing tag for `' +\n      serializeAbbreviatedTag(tag) +\n      '` (' +\n      stringifyPosition({start: open.start, end: open.end}) +\n      ')' +\n      place,\n    position,\n    'mdast-util-mdx-jsx:end-tag-mismatch'\n  )\n}\n\n/** @type {OnExitError} */\nfunction onErrorLeftIsTag(a, b) {\n  const tag = /** @type {Tag} */ (this.getData('mdxJsxTag'))\n  throw new VFileMessage(\n    'Expected the closing tag `' +\n      serializeAbbreviatedTag(tag) +\n      '` either after the end of `' +\n      b.type +\n      '` (' +\n      stringifyPosition(b.end) +\n      ') or another opening tag after the start of `' +\n      b.type +\n      '` (' +\n      stringifyPosition(b.start) +\n      ')',\n    {start: a.start, end: a.end},\n    'mdast-util-mdx-jsx:end-tag-mismatch'\n  )\n}\n\n/**\n * Serialize a tag, excluding attributes.\n * `self-closing` is not supported, because we don’t need it yet.\n *\n * @param {Tag} tag\n * @returns {string}\n */\nfunction serializeAbbreviatedTag(tag) {\n  return '<' + (tag.close ? '/' : '') + (tag.name || '') + '>'\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxJsxFlowElement|MdxJsxTextElement} node\n */\n// eslint-disable-next-line complexity\nfunction mdxElement(node, _, context) {\n  const selfClosing =\n    node.name && (!node.children || node.children.length === 0)\n  const quote = checkQuote(context)\n  const exit = context.enter(node.type)\n  let attributeValue = ''\n  let index = -1\n  /** @type {Array<string>} */\n  const attributes = []\n  /** @type {string} */\n  let result\n\n  // None.\n  if (node.attributes && node.attributes.length > 0) {\n    if (!node.name) {\n      throw new Error('Cannot serialize fragment w/ attributes')\n    }\n\n    const isMultiFlow =\n      node.type === 'mdxJsxFlowElement' && node.attributes.length > 1\n\n    while (++index < node.attributes.length) {\n      const attribute = node.attributes[index]\n\n      if (attribute.type === 'mdxJsxExpressionAttribute') {\n        result = '{' + (attribute.value || '') + '}'\n      } else {\n        if (!attribute.name) {\n          throw new Error('Cannot serialize attribute w/o name')\n        }\n\n        result =\n          attribute.name +\n          (attribute.value === undefined || attribute.value === null\n            ? ''\n            : '=' +\n              (typeof attribute.value === 'object'\n                ? '{' + (attribute.value.value || '') + '}'\n                : quote +\n                  stringifyEntitiesLight(attribute.value, {subset: [quote]}) +\n                  quote))\n      }\n\n      attributes.push((isMultiFlow ? '\\n  ' : ' ') + result)\n    }\n\n    attributeValue = attributes.join('') + (isMultiFlow ? '\\n' : '')\n  }\n\n  const value =\n    '<' +\n    (node.name || '') +\n    attributeValue +\n    (selfClosing ? '/' : '') +\n    '>' +\n    (node.children && node.children.length > 0\n      ? node.type === 'mdxJsxFlowElement'\n        ? '\\n' + indent(containerFlow(node, context)) + '\\n'\n        : containerPhrasing(node, context, {before: '<', after: '>'})\n      : '') +\n    (selfClosing ? '' : '</' + (node.name || '') + '>')\n\n  exit()\n  return value\n}\n\n/**\n * @type {ToMarkdownHandle}\n */\nfunction peekElement() {\n  return '<'\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction indent(value) {\n  return indentLines(value, map)\n\n  /** @type {ToMarkdownMap} */\n  function map(line, _, blank) {\n    return (blank ? '' : '  ') + line\n  }\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of invalid numeric character references to their replacements, according to HTML.\n *\n * @type {Record<number, string>}\n */\nexport const characterReferenceInvalid = {\n  0: '�',\n  128: '€',\n  130: '‚',\n  131: 'ƒ',\n  132: '„',\n  133: '…',\n  134: '†',\n  135: '‡',\n  136: 'ˆ',\n  137: '‰',\n  138: 'Š',\n  139: '‹',\n  140: 'Œ',\n  142: 'Ž',\n  145: '‘',\n  146: '’',\n  147: '“',\n  148: '”',\n  149: '•',\n  150: '–',\n  151: '—',\n  152: '˜',\n  153: '™',\n  154: 'š',\n  155: '›',\n  156: 'œ',\n  158: 'ž',\n  159: 'Ÿ'\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is alphabetical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphabetical.\n */\nexport function isAlphabetical(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 && code <= 122) /* a-z */ ||\n    (code >= 65 && code <= 90) /* A-Z */\n  )\n}\n","import {isAlphabetical} from 'is-alphabetical'\nimport {isDecimal} from 'is-decimal'\n\n/**\n * Check if the given character code, or the character code at the first\n * character, is alphanumerical.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is alphanumerical.\n */\nexport function isAlphanumerical(character) {\n  return isAlphabetical(character) || isDecimal(character)\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is decimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is a decimal\n */\nexport function isDecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return code >= 48 && code <= 57 /* 0-9 */\n}\n","/**\n * Check if the given character code, or the character code at the first\n * character, is hexadecimal.\n *\n * @param {string|number} character\n * @returns {boolean} Whether `character` is hexadecimal\n */\nexport function isHexadecimal(character) {\n  const code =\n    typeof character === 'string' ? character.charCodeAt(0) : character\n\n  return (\n    (code >= 97 /* a */ && code <= 102) /* z */ ||\n    (code >= 65 /* A */ && code <= 70) /* Z */ ||\n    (code >= 48 /* A */ && code <= 57) /* Z */\n  )\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['quote'], undefined>}\n */\nexport function checkQuote(context) {\n  const marker = context.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Join} Join\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {TrackFields} safeOptions\n * @returns {string}\n */\nexport function containerFlow(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  const tracker = track(safeOptions)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      context.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1])))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n\n  /**\n   * @param {Node} left\n   * @param {Node} right\n   * @returns {string}\n   */\n  function between(left, right) {\n    let index = context.join.length\n\n    while (index--) {\n      const result = context.join[index](left, right, parent, context)\n\n      if (result === true || result === 1) {\n        break\n      }\n\n      if (typeof result === 'number') {\n        return '\\n'.repeat(1 + result)\n      }\n\n      if (result === false) {\n        return '\\n\\n<!---->\\n\\n'\n      }\n    }\n\n    return '\\n\\n'\n  }\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\nimport {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterReferenceInvalid} from 'character-reference-invalid'\nimport {isDecimal} from 'is-decimal'\nimport {isHexadecimal} from 'is-hexadecimal'\nimport {isAlphanumerical} from 'is-alphanumerical'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\n\nconst fromCharCode = String.fromCharCode\n\n// Warning messages.\nconst messages = [\n  '',\n  /* 1: Non terminated (named) */\n  'Named character references must be terminated by a semicolon',\n  /* 2: Non terminated (numeric) */\n  'Numeric character references must be terminated by a semicolon',\n  /* 3: Empty (named) */\n  'Named character references cannot be empty',\n  /* 4: Empty (numeric) */\n  'Numeric character references cannot be empty',\n  /* 5: Unknown (named) */\n  'Named character references must be known',\n  /* 6: Disallowed (numeric) */\n  'Numeric character references cannot be disallowed',\n  /* 7: Prohibited (numeric) */\n  'Numeric character references cannot be outside the permissible Unicode range'\n]\n\n/**\n * Parse HTML character references.\n *\n * @param {string} value\n * @param {import('../index.js').Options} [options={}]\n */\nexport function parseEntities(value, options = {}) {\n  const additional =\n    typeof options.additional === 'string'\n      ? options.additional.charCodeAt(0)\n      : options.additional\n  /** @type {string[]} */\n  const result = []\n  let index = 0\n  let lines = -1\n  let queue = ''\n  /** @type {Point|undefined} */\n  let point\n  /** @type {number[]|undefined} */\n  let indent\n\n  if (options.position) {\n    if ('start' in options.position || 'indent' in options.position) {\n      indent = options.position.indent\n      point = options.position.start\n    } else {\n      point = options.position\n    }\n  }\n\n  let line = (point ? point.line : 0) || 1\n  let column = (point ? point.column : 0) || 1\n\n  // Cache the current point.\n  let previous = now()\n  /** @type {number|undefined} */\n  let character\n\n  // Ensure the algorithm walks over the first character (inclusive).\n  index--\n\n  while (++index <= value.length) {\n    // If the previous character was a newline.\n    if (character === 10 /* `\\n` */) {\n      column = (indent ? indent[lines] : 0) || 1\n    }\n\n    character = value.charCodeAt(index)\n\n    if (character === 38 /* `&` */) {\n      const following = value.charCodeAt(index + 1)\n\n      // The behavior depends on the identity of the next character.\n      if (\n        following === 9 /* `\\t` */ ||\n        following === 10 /* `\\n` */ ||\n        following === 12 /* `\\f` */ ||\n        following === 32 /* ` ` */ ||\n        following === 38 /* `&` */ ||\n        following === 60 /* `<` */ ||\n        Number.isNaN(following) ||\n        (additional && following === additional)\n      ) {\n        // Not a character reference.\n        // No characters are consumed, and nothing is returned.\n        // This is not an error, either.\n        queue += fromCharCode(character)\n        column++\n        continue\n      }\n\n      const start = index + 1\n      let begin = start\n      let end = start\n      /** @type {string} */\n      let type\n\n      if (following === 35 /* `#` */) {\n        // Numerical reference.\n        end = ++begin\n\n        // The behavior further depends on the next character.\n        const following = value.charCodeAt(end)\n\n        if (following === 88 /* `X` */ || following === 120 /* `x` */) {\n          // ASCII hexadecimal digits.\n          type = 'hexadecimal'\n          end = ++begin\n        } else {\n          // ASCII decimal digits.\n          type = 'decimal'\n        }\n      } else {\n        // Named reference.\n        type = 'named'\n      }\n\n      let characterReferenceCharacters = ''\n      let characterReference = ''\n      let characters = ''\n      // Each type of character reference accepts different characters.\n      // This test is used to detect whether a reference has ended (as the semicolon\n      // is not strictly needed).\n      const test =\n        type === 'named'\n          ? isAlphanumerical\n          : type === 'decimal'\n          ? isDecimal\n          : isHexadecimal\n\n      end--\n\n      while (++end <= value.length) {\n        const following = value.charCodeAt(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += fromCharCode(following)\n\n        // Check if we can match a legacy named reference.\n        // If so, we cache that as the last viable named reference.\n        // This ensures we do not need to walk backwards later.\n        if (type === 'named' && characterEntitiesLegacy.includes(characters)) {\n          characterReferenceCharacters = characters\n          // @ts-expect-error: always able to decode.\n          characterReference = decodeNamedCharacterReference(characters)\n        }\n      }\n\n      let terminated = value.charCodeAt(end) === 59 /* `;` */\n\n      if (terminated) {\n        end++\n\n        const namedReference =\n          type === 'named' ? decodeNamedCharacterReference(characters) : false\n\n        if (namedReference) {\n          characterReferenceCharacters = characters\n          characterReference = namedReference\n        }\n      }\n\n      let diff = 1 + end - start\n      let reference = ''\n\n      if (!terminated && options.nonTerminated === false) {\n        // Empty.\n      } else if (!characters) {\n        // An empty (possible) reference is valid, unless it’s numeric (thus an\n        // ampersand followed by an octothorp).\n        if (type !== 'named') {\n          warning(4 /* Empty (numeric) */, diff)\n        }\n      } else if (type === 'named') {\n        // An ampersand followed by anything unknown, and not terminated, is\n        // invalid.\n        if (terminated && !characterReference) {\n          warning(5 /* Unknown (named) */, 1)\n        } else {\n          // If there’s something after an named reference which is not known,\n          // cap the reference.\n          if (characterReferenceCharacters !== characters) {\n            end = begin + characterReferenceCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          // If the reference is not terminated, warn.\n          if (!terminated) {\n            const reason = characterReferenceCharacters\n              ? 1 /* Non terminated (named) */\n              : 3 /* Empty (named) */\n\n            if (options.attribute) {\n              const following = value.charCodeAt(end)\n\n              if (following === 61 /* `=` */) {\n                warning(reason, diff)\n                characterReference = ''\n              } else if (isAlphanumerical(following)) {\n                characterReference = ''\n              } else {\n                warning(reason, diff)\n              }\n            } else {\n              warning(reason, diff)\n            }\n          }\n        }\n\n        reference = characterReference\n      } else {\n        if (!terminated) {\n          // All nonterminated numeric references are not rendered, and emit a\n          // warning.\n          warning(2 /* Non terminated (numeric) */, diff)\n        }\n\n        // When terminated and numerical, parse as either hexadecimal or\n        // decimal.\n        let referenceCode = Number.parseInt(\n          characters,\n          type === 'hexadecimal' ? 16 : 10\n        )\n\n        // Emit a warning when the parsed number is prohibited, and replace with\n        // replacement character.\n        if (prohibited(referenceCode)) {\n          warning(7 /* Prohibited (numeric) */, diff)\n          reference = fromCharCode(65533 /* `�` */)\n        } else if (referenceCode in characterReferenceInvalid) {\n          // Emit a warning when the parsed number is disallowed, and replace by\n          // an alternative.\n          warning(6 /* Disallowed (numeric) */, diff)\n          reference = characterReferenceInvalid[referenceCode]\n        } else {\n          // Parse the number.\n          let output = ''\n\n          // Emit a warning when the parsed number should not be used.\n          if (disallowed(referenceCode)) {\n            warning(6 /* Disallowed (numeric) */, diff)\n          }\n\n          // Serialize the number.\n          if (referenceCode > 0xffff) {\n            referenceCode -= 0x10000\n            output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800)\n            referenceCode = 0xdc00 | (referenceCode & 0x3ff)\n          }\n\n          reference = output + fromCharCode(referenceCode)\n        }\n      }\n\n      // Found it!\n      // First eat the queued characters as normal text, then eat a reference.\n      if (reference) {\n        flush()\n\n        previous = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        const next = now()\n        next.offset++\n\n        if (options.reference) {\n          options.reference.call(\n            options.referenceContext,\n            reference,\n            {start: previous, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        previous = next\n      } else {\n        // If we could not find a reference, queue the checked characters (as\n        // normal characters), and move the pointer to their end.\n        // This is possible because we can be certain neither newlines nor\n        // ampersands are included.\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      }\n    } else {\n      // Handle anything other than an ampersand, including newlines and EOF.\n      if (character === 10 /* `\\n` */) {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (Number.isNaN(character)) {\n        flush()\n      } else {\n        queue += fromCharCode(character)\n        column++\n      }\n    }\n  }\n\n  // Return the reduced nodes.\n  return result.join('')\n\n  // Get current position.\n  function now() {\n    return {\n      line,\n      column,\n      offset: index + ((point ? point.offset : 0) || 0)\n    }\n  }\n\n  /**\n   * Handle the warning.\n   *\n   * @param {1|2|3|4|5|6|7} code\n   * @param {number} offset\n   */\n  function warning(code, offset) {\n    /** @type {ReturnType<now>} */\n    let position\n\n    if (options.warning) {\n      position = now()\n      position.column += offset\n      position.offset += offset\n\n      options.warning.call(\n        options.warningContext,\n        messages[code],\n        position,\n        code\n      )\n    }\n  }\n\n  /**\n   * Flush `queue` (normal text).\n   * Macro invoked before each reference and at the end of `value`.\n   * Does nothing when `queue` is empty.\n   */\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (options.text) {\n        options.text.call(options.textContext, queue, {\n          start: previous,\n          end: now()\n        })\n      }\n\n      queue = ''\n    }\n  }\n}\n\n/**\n * Check if `character` is outside the permissible unicode range.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n/**\n * Check if `character` is disallowed.\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-mdx-expression').MDXFlowExpression} MDXFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MDXTextExpression} MDXTextExpression\n * @typedef {import('mdast-util-mdx-jsx').MDXJsxAttributeValueExpression} MDXJsxAttributeValueExpression\n * @typedef {import('mdast-util-mdx-jsx').MDXJsxAttribute} MDXJsxAttribute\n * @typedef {import('mdast-util-mdx-jsx').MDXJsxExpressionAttribute} MDXJsxExpressionAttribute\n * @typedef {import('mdast-util-mdx-jsx').MDXJsxFlowElement} MDXJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MDXJsxTextElement} MDXJsxTextElement\n * @typedef {import('mdast-util-mdxjs-esm').MDXJSEsm} MDXJSEsm\n */\n\nimport {\n  mdxExpressionFromMarkdown,\n  mdxExpressionToMarkdown\n} from 'mdast-util-mdx-expression'\nimport {mdxJsxFromMarkdown, mdxJsxToMarkdown} from 'mdast-util-mdx-jsx'\nimport {mdxjsEsmFromMarkdown, mdxjsEsmToMarkdown} from 'mdast-util-mdxjs-esm'\n\n/** @type {FromMarkdownExtension[]} */\nexport const mdxFromMarkdown = [\n  mdxExpressionFromMarkdown,\n  mdxJsxFromMarkdown,\n  mdxjsEsmFromMarkdown\n]\n\n/** @type {ToMarkdownExtension} */\nexport const mdxToMarkdown = {\n  extensions: [mdxExpressionToMarkdown, mdxJsxToMarkdown, mdxjsEsmToMarkdown]\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('./complex-types').MdxjsEsm} MdxjsEsm\n *\n * @typedef {MdxjsEsm} MDXJSEsm - Deprecated name, prefer `MdxjsEsm`\n */\n\n/** @type {FromMarkdownExtension} */\nexport const mdxjsEsmFromMarkdown = {\n  enter: {mdxjsEsm: enterMdxjsEsm},\n  exit: {mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData}\n}\n\n/** @type {ToMarkdownExtension} */\nexport const mdxjsEsmToMarkdown = {handlers: {mdxjsEsm: handleMdxjsEsm}}\n\n/** @type {FromMarkdownHandle} */\nfunction enterMdxjsEsm(token) {\n  this.enter({type: 'mdxjsEsm', value: ''}, token)\n  this.buffer() // Capture EOLs\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxjsEsm(token) {\n  const value = this.resume()\n  const node = /** @type {MdxjsEsm} */ (this.exit(token))\n  /** @type {Program|undefined} */\n  // @ts-expect-error: custom.\n  const estree = token.estree\n\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitMdxjsEsmData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxjsEsm} node\n */\nfunction handleMdxjsEsm(node) {\n  return node.value || ''\n}\n","/**\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('nlcst').Root} NlcstRoot\n * @typedef {import('nlcst').Content} NlcstContent\n * @typedef {import('nlcst').SentenceContent} NlcstSentenceContent\n * @typedef {import('nlcst').WhiteSpace} NlcstWhiteSpace\n * @typedef {import('nlcst').Source} NlcstSource\n * @typedef {NlcstRoot|NlcstContent} NlcstNode\n *\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {MdastRoot|MdastContent} MdastNode\n * @typedef {Extract<MdastNode, import('unist').Parent>} MdastParent\n *\n *\n * @typedef {import('vfile').VFile} VFile\n * @typedef {ReturnType<import('vfile-location').location>} Location\n * @typedef {{\n *   parse(nodes: NlcstContent[]): NlcstRoot\n *   tokenizeSource(value: string): NlcstSource\n *   tokenizeWhiteSpace(value: string): NlcstWhiteSpace\n *   tokenize(value: string): NlcstSentenceContent[]\n * }} ParserInstance\n * @typedef {new () => ParserInstance} ParserConstructor\n *\n * @typedef Options\n * @property {string[]} [ignore]\n * @property {string[]} [source]\n *\n * @typedef Context\n * @property {string} doc\n * @property {Location} place\n * @property {ParserInstance} parser\n * @property {string[]} ignore\n * @property {string[]} source\n */\n\nimport {toString} from 'nlcst-to-string'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {location} from 'vfile-location'\n\nconst defaultIgnore = ['table', 'tableRow', 'tableCell']\nconst defaultSource = ['inlineCode']\n\n/**\n * Transform a `tree` in mdast to nlcst.\n *\n * @param {MdastNode} tree\n * @param {VFile} file\n * @param {ParserInstance|ParserConstructor} Parser\n * @param {Options} [options]\n */\nexport function toNlcst(tree, file, Parser, options = {}) {\n  // Crash on invalid parameters.\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-to-nlcst expected node')\n  }\n\n  if (!file || !file.messages) {\n    throw new Error('mdast-util-to-nlcst expected file')\n  }\n\n  // Construct parser.\n  if (!Parser) {\n    throw new Error('mdast-util-to-nlcst expected parser')\n  }\n\n  if (\n    !tree.position ||\n    !tree.position.start ||\n    !tree.position.start.column ||\n    !tree.position.start.line\n  ) {\n    throw new Error('mdast-util-to-nlcst expected position on nodes')\n  }\n\n  const parser = 'parse' in Parser ? Parser : new Parser()\n\n  const result = one(\n    {\n      doc: String(file),\n      place: location(file),\n      parser,\n      ignore: options.ignore\n        ? defaultIgnore.concat(options.ignore)\n        : defaultIgnore,\n      source: options.source\n        ? defaultSource.concat(options.source)\n        : defaultSource\n    },\n    tree\n  )\n\n  // Transform mdast into nlcst tokens, and pass these into `parser.parse` to\n  // insert sentences, paragraphs where needed.\n  return parser.parse(result || [])\n}\n\n/**\n * Transform a single node.\n * @param {Context} config\n * @param {MdastNode} node\n * @returns {NlcstContent[]|undefined}\n */\nfunction one(config, node) {\n  const start = node.position ? node.position.start.offset : undefined\n\n  if (!config.ignore.includes(node.type)) {\n    if (config.source.includes(node.type) && start && node.position) {\n      return patch(\n        config,\n        [\n          config.parser.tokenizeSource(\n            config.doc.slice(start, node.position.end.offset)\n          )\n        ],\n        start\n      )\n    }\n\n    if ('children' in node) {\n      return all(config, node)\n    }\n\n    if ((node.type === 'image' || node.type === 'imageReference') && node.alt) {\n      return patch(\n        config,\n        config.parser.tokenize(node.alt),\n        typeof start === 'number' ? start + 2 : undefined\n      )\n    }\n\n    if (node.type === 'break') {\n      return patch(config, [config.parser.tokenizeWhiteSpace('\\n')], start)\n    }\n\n    if (node.type === 'text') {\n      return patch(config, config.parser.tokenize(node.value), start)\n    }\n  }\n}\n\n/**\n * Transform all nodes in `parent`.\n * @param {Context} config\n * @param {MdastParent} parent\n * @returns {NlcstContent[]}\n */\nfunction all(config, parent) {\n  let index = -1\n  /** @type {NlcstContent[]} */\n  const results = []\n  /** @type {Point|undefined} */\n  let end\n\n  while (++index < parent.children.length) {\n    const child = parent.children[index]\n    const start = pointStart(child)\n\n    if (\n      end &&\n      end.line !== null &&\n      start.line !== null &&\n      start.line !== end.line\n    ) {\n      const lineEnding = config.parser.tokenizeWhiteSpace(\n        '\\n'.repeat(start.line - end.line)\n      )\n      patch(config, [lineEnding], end.offset)\n\n      if (lineEnding.value.length < 2) {\n        lineEnding.value = '\\n\\n'\n      }\n\n      results.push(lineEnding)\n    }\n\n    const result = one(config, child)\n    if (result) results.push(...result)\n    end = pointEnd(child)\n  }\n\n  return results\n}\n\n/**\n * Patch a position on each node in `nodes`.\n * `offset` is the offset in `file` this run of content starts at.\n *\n * @template {NlcstContent[]} T\n * @param {Context} config\n * @param {T} nodes\n * @param {number|undefined} offset\n * @returns {T}\n */\nfunction patch(config, nodes, offset) {\n  let index = -1\n  let start = offset\n\n  while (++index < nodes.length) {\n    const node = nodes[index]\n\n    if ('children' in node) {\n      patch(config, node.children, start)\n    }\n\n    const end =\n      typeof start === 'number' ? start + toString(node).length : undefined\n\n    node.position =\n      start !== undefined && end !== undefined\n        ? {\n            start: config.place.toPoint(start),\n            end: config.place.toPoint(end)\n          }\n        : undefined\n\n    start = end\n  }\n\n  return nodes\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Event[]} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n\n          openingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? types.strongText : types.emphasisText,\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? types.strong : types.emphasis,\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.asterisk || code === codes.underscore,\n      'expected asterisk or underscore'\n    )\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n\n    const open =\n      !after ||\n      (after === constants.characterGroupPunctuation && before) ||\n      attentionMarkers.includes(code)\n    const close =\n      !before ||\n      (before === constants.characterGroupPunctuation && after) ||\n      attentionMarkers.includes(previous)\n\n    token._open = Boolean(\n      marker === codes.asterisk ? open : open && (before || !close)\n    )\n    token._close = Boolean(\n      marker === codes.asterisk ? close : close && (after || !open)\n    )\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/** @type {Tokenizer} */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function schemeOrEmailAtext(code) {\n    return code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n\n  /** @type {State} */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n\n  /** @type {State} */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      return end(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /** @type {State} */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /** @type {State} */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n\n  /** @type {State} */\n  function emailValue(code) {\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      effects.consume(code)\n      return code === codes.dash ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    assert(code === codes.greaterThan, 'expected `>`')\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.exit(types.autolink)\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, types.linePrefix)\n\n  /** @type {State} */\n  function afterWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\n  exit\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState\n\n      assert(state, 'expected `containerState` to be defined in container')\n\n      if (!state.open) {\n        effects.enter(types.blockQuote, {_container: true})\n        state.open = true\n      }\n\n      effects.enter(types.blockQuotePrefix)\n      effects.enter(types.blockQuoteMarker)\n      effects.consume(code)\n      effects.exit(types.blockQuoteMarker)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.blockQuotePrefixWhitespace)\n      effects.exit(types.blockQuotePrefix)\n      return ok\n    }\n\n    effects.exit(types.blockQuotePrefix)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    types.linePrefix,\n    this.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize\n  )\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote)\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => code is number} */\n  let test\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`')\n    effects.enter(types.characterReference)\n    effects.enter(types.characterReferenceMarker)\n    effects.consume(code)\n    effects.exit(types.characterReferenceMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerNumeric)\n      return numeric\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceNamedSizeMax\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /** @type {State} */\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerHexadecimal)\n      effects.enter(types.characterReferenceValue)\n      max = constants.characterReferenceHexadecimalSizeMax\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceDecimalSizeMax\n    test = asciiDigit\n    return value(code)\n  }\n\n  /** @type {State} */\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === codes.semicolon && size) {\n      token = effects.exit(types.characterReferenceValue)\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter(types.characterReferenceMarker)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarker)\n      effects.exit(types.characterReference)\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closingFenceConstruct = {tokenize: tokenizeClosingFence, partial: true}\n  /** @type {Construct} */\n  const nonLazyLine = {tokenize: tokenizeNonLazyLine, partial: true}\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.graveAccent || code === codes.tilde,\n      'expected `` ` `` or `~`'\n    )\n    effects.enter(types.codeFenced)\n    effects.enter(types.codeFencedFence)\n    effects.enter(types.codeFencedFenceSequence)\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  /** @type {State} */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit(types.codeFencedFenceSequence)\n    return sizeOpen < constants.codeFencedSequenceSizeMin\n      ? nok(code)\n      : factorySpace(effects, infoOpen, types.whitespace)(code)\n  }\n\n  /** @type {State} */\n  function infoOpen(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter(types.codeFencedFenceInfo)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return info(code)\n  }\n\n  /** @type {State} */\n  function info(code) {\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return factorySpace(effects, infoAfter, types.whitespace)(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  /** @type {State} */\n  function infoAfter(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter(types.codeFencedFenceMeta)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return meta(code)\n  }\n\n  /** @type {State} */\n  function meta(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceMeta)\n      return openAfter(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  /** @type {State} */\n  function openAfter(code) {\n    effects.exit(types.codeFencedFence)\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n\n  /** @type {State} */\n  function contentStart(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                types.linePrefix,\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return contentContinue(code)\n  }\n\n  /** @type {State} */\n  function contentContinue(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeFenced)\n    return ok(code)\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return lineStart\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      types.linePrefix,\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )\n\n    /** @type {State} */\n    function closingSequenceStart(code) {\n      effects.enter(types.codeFencedFence)\n      effects.enter(types.codeFencedFenceSequence)\n      return closingSequence(code)\n    }\n\n    /** @type {State} */\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit(types.codeFencedFenceSequence)\n      return factorySpace(effects, closingSequenceEnd, types.whitespace)(code)\n    }\n\n    /** @type {State} */\n    function closingSequenceEnd(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        effects.exit(types.codeFencedFence)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst indentedContent = {tokenize: tokenizeIndentedContent, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(types.codeIndented)\n    return factorySpace(\n      effects,\n      afterStartPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? afterPrefix(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return content(code)\n  }\n\n  /** @type {State} */\n  function content(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return start\n    }\n\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number|undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === types.lineEnding ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === types.lineEnding ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === types.codeTextData) {\n        // Then we have padding.\n        events[headEnterIndex][1].type = types.codeTextPadding\n        events[tailExitIndex][1].type = types.codeTextPadding\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (\n        index !== tailExitIndex &&\n        events[index][1].type !== types.lineEnding\n      ) {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === types.lineEnding\n    ) {\n      events[enter][1].type = types.codeTextData\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\n/** @type {Previous} */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== codes.graveAccent ||\n    this.events[this.events.length - 1][1].type === types.characterEscape\n  )\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.graveAccent, 'expected `` ` ``')\n    assert(previous.call(self, self.previous), 'expected correct previous')\n    effects.enter(types.codeText)\n    effects.enter(types.codeTextSequence)\n    return openingSequence(code)\n  }\n\n  /** @type {State} */\n  function openingSequence(code) {\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit(types.codeTextSequence)\n    return gap(code)\n  }\n\n  /** @type {State} */\n  function gap(code) {\n    // EOF.\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Closing fence?\n    // Could also be data.\n    if (code === codes.graveAccent) {\n      token = effects.enter(types.codeTextSequence)\n      size = 0\n      return closingSequence(code)\n    }\n\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === codes.space) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return gap\n    }\n\n    // Data.\n    effects.enter(types.codeTextData)\n    return data(code)\n  }\n\n  // In code.\n  /** @type {State} */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.graveAccent ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(types.codeTextData)\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n\n  // Closing fence.\n  /** @type {State} */\n  function closingSequence(code) {\n    // More.\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(types.codeTextSequence)\n      effects.exit(types.codeText)\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = types.codeTextData\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {tokenize: tokenizeContent, resolve: resolveContent}\n\n/** @type {Construct} */\nconst continuationConstruct = {tokenize: tokenizeContinuation, partial: true}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected no eof or eol'\n    )\n\n    effects.enter(types.content)\n    previous = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent\n    })\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n\n  /** @type {State} */\n  function contentEnd(code) {\n    effects.exit(types.chunkContent)\n    effects.exit(types.content)\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function contentContinue(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.consume(code)\n    effects.exit(types.chunkContent)\n    previous.next = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent,\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n\n  return startLookahead\n\n  /** @type {State} */\n  function startLookahead(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.exit(types.chunkContent)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, prefixed, types.linePrefix)\n  }\n\n  /** @type {State} */\n  function prefixed(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\n\n/** @type {Construct} */\nconst titleConstruct = {tokenize: tokenizeTitle, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.definition)\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      types.definitionLabel,\n      types.definitionLabelMarker,\n      types.definitionLabelString\n    )(code)\n  }\n\n  /** @type {State} */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === codes.colon) {\n      effects.enter(types.definitionMarker)\n      effects.consume(code)\n      effects.exit(types.definitionMarker)\n\n      // Note: blank lines can’t exist in content.\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, types.whitespace),\n            factorySpace(effects, after, types.whitespace)\n          ),\n          nok,\n          types.definitionDestination,\n          types.definitionDestinationLiteral,\n          types.definitionDestinationLiteralMarker,\n          types.definitionDestinationRaw,\n          types.definitionDestinationString\n        )\n      )\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.definition)\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function before(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, types.whitespace),\n        nok,\n        types.definitionTitle,\n        types.definitionTitleMarker,\n        types.definitionTitleString\n      )(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.hardBreakEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.escapeMarker)\n      effects.exit(types.hardBreakEscape)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === types.whitespace) {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === types.whitespace\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === types.atxHeadingSequence &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === types.whitespace))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: types.atxHeadingText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: types.chunkText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: constants.contentTypeText\n    }\n\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.numberSign, 'expected `#`')\n    effects.enter(types.atxHeading)\n    effects.enter(types.atxHeadingSequence)\n    return fenceOpenInside(code)\n  }\n\n  /** @type {State} */\n  function fenceOpenInside(code) {\n    if (\n      code === codes.numberSign &&\n      size++ < constants.atxHeadingOpeningFenceSizeMax\n    ) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingSequence)\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function headingBreak(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.atxHeadingSequence)\n      return sequence(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.atxHeading)\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, types.whitespace)(code)\n    }\n\n    effects.enter(types.atxHeadingText)\n    return data(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === codes.numberSign) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit(types.atxHeadingSequence)\n    return headingBreak(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.numberSign ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit(types.atxHeadingText)\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst nextBlankConstruct = {tokenize: tokenizeNextBlank, partial: true}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === types.htmlFlow\n    ) {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let kind\n  /** @type {boolean} */\n  let startTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlFlow)\n    effects.enter(types.htmlFlowData)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      kind = constants.htmlInstruction\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function declarationStart(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      kind = constants.htmlComment\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      kind = constants.htmlCdata\n      buffer = constants.cdataOpeningString\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = constants.htmlDeclaration\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagName(code) {\n    if (\n      code === codes.eof ||\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== codes.slash &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = constants.htmlRaw\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = constants.htmlBasic\n\n        if (code === codes.slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = constants.htmlComplete\n      // Do not support complete HTML when interrupting\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeName(code) {\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /** @type {State} */\n  function completeAttributeValueQuoted(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /** @type {State} */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /** @type {State} */\n  function completeAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownSpace(code)\n    ) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === codes.eof || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function continuation(code) {\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === codes.lessThan && kind === constants.htmlRaw) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === codes.greaterThan && kind === constants.htmlDeclaration) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === codes.questionMark && kind === constants.htmlInstruction) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === codes.rightSquareBracket && kind === constants.htmlCdata) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (\n      markdownLineEnding(code) &&\n      (kind === constants.htmlBasic || kind === constants.htmlComplete)\n    ) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n\n  /** @type {State} */\n  function continuationAtLineEnding(code) {\n    effects.exit(types.htmlFlowData)\n    return htmlContinueStart(code)\n  }\n\n  /** @type {State} */\n  function htmlContinueStart(code) {\n    if (code === codes.eof) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {tokenize: htmlLineEnd, partial: true},\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter(types.htmlFlowData)\n    return continuation(code)\n  }\n\n  /** @type {Tokenizer} */\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return lineStart\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n\n  /** @type {State} */\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationRawEndTag(code) {\n    if (\n      code === codes.greaterThan &&\n      htmlRawNames.includes(buffer.toLowerCase())\n    ) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationCharacterDataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === codes.dash && kind === constants.htmlComment) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /** @type {State} */\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /** @type {State} */\n  function done(code) {\n    effects.exit(types.htmlFlow)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.exit(types.htmlFlowData)\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\n\n/** @type {Tokenizer} */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n  let marker\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlText)\n    effects.enter(types.htmlTextData)\n    effects.consume(code)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      buffer = constants.cdataOpeningString\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function commentStart(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function commentStartDash(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n\n  /** @type {State} */\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n\n  /** @type {State} */\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n\n  /** @type {State} */\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /** @type {State} */\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /** @type {State} */\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n\n  /** @type {State} */\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n\n  /** @type {State} */\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code)\n  }\n\n  /** @type {State} */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagClose(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n\n  /** @type {State} */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n\n  /** @type {State} */\n  function tagOpen(code) {\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeName(code) {\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.greaterThan ||\n      code === codes.slash ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.greaterThan || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n  /** @type {State} */\n  function atLineEnding(code) {\n    assert(returnState, 'expected return state')\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.exit(types.htmlTextData)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    effects.enter(types.htmlTextData)\n    return returnState(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      effects.exit(types.htmlTextData)\n      effects.exit(types.htmlText)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {tokenize: tokenizeResource}\n/** @type {Construct} */\nconst fullReferenceConstruct = {tokenize: tokenizeFullReference}\n/** @type {Construct} */\nconst collapsedReferenceConstruct = {tokenize: tokenizeCollapsedReference}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === types.labelImage ||\n      token.type === types.labelLink ||\n      token.type === types.labelEnd\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === types.labelImage ? 4 : 2)\n      token.type = types.data\n      index++\n    }\n  }\n\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number|undefined} */\n  let open\n  /** @type {number|undefined} */\n  let close\n  /** @type {Event[]} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === types.link ||\n        (token.type === types.labelLink && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === types.labelImage || token.type === types.labelLink) &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== types.labelLink) {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === types.labelEnd) {\n      close = index\n    }\n  }\n\n  assert(open !== undefined, '`open` is supposed to be found')\n  assert(close !== undefined, '`close` is supposed to be found')\n\n  const group = {\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  const label = {\n    type: types.label,\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n\n  const text = {\n    type: types.labelText,\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n\n  splice(events, open, events.length, media)\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === types.labelImage ||\n        self.events[index][1].type === types.labelLink) &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // It’s a balanced bracket, but contains a link.\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\n      )\n    )\n    effects.enter(types.labelEnd)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelEnd)\n    return afterLabelEnd\n  }\n\n  /** @type {State} */\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === codes.leftParenthesis) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    }\n\n    // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n    if (code === codes.leftSquareBracket) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    }\n\n    // Shortcut reference: `[asd]`?\n    return defined ? ok(code) : balanced(code)\n  }\n\n  /** @type {State} */\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftParenthesis, 'expected left paren')\n    effects.enter(types.resource)\n    effects.enter(types.resourceMarker)\n    effects.consume(code)\n    effects.exit(types.resourceMarker)\n    return factoryWhitespace(effects, open)\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.rightParenthesis) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      types.resourceDestination,\n      types.resourceDestinationLiteral,\n      types.resourceDestinationLiteralMarker,\n      types.resourceDestinationRaw,\n      types.resourceDestinationString,\n      constants.linkResourceDestinationBalanceMax\n    )(code)\n  }\n\n  /** @type {State} */\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n\n  /** @type {State} */\n  function between(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        types.resourceTitle,\n        types.resourceTitleMarker,\n        types.resourceTitleString\n      )(code)\n    }\n\n    return end(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    if (code === codes.rightParenthesis) {\n      effects.enter(types.resourceMarker)\n      effects.consume(code)\n      effects.exit(types.resourceMarker)\n      effects.exit(types.resource)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      types.reference,\n      types.referenceMarker,\n      types.referenceString\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    effects.enter(types.reference)\n    effects.enter(types.referenceMarker)\n    effects.consume(code)\n    effects.exit(types.referenceMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter(types.referenceMarker)\n      effects.consume(code)\n      effects.exit(types.referenceMarker)\n      effects.exit(types.reference)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`')\n    effects.enter(types.labelImage)\n    effects.enter(types.labelImageMarker)\n    effects.consume(code)\n    effects.exit(types.labelImageMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker)\n      effects.consume(code)\n      effects.exit(types.labelMarker)\n      effects.exit(types.labelImage)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n    /* Hidden footnotes hook */\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.labelLink)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelLink)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n    /* Hidden footnotes hook. */\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\n\n/** @type {Tokenizer} */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, ok, types.linePrefix)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {tokenize: tokenizeListContinuation},\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {tokenize: tokenizeIndent, partial: true}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\n        ? types.listUnordered\n        : types.listOrdered)\n\n    if (\n      kind === types.listUnordered\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {_container: true})\n      }\n\n      if (kind === types.listUnordered) {\n        effects.enter(types.listItemPrefix)\n        return code === codes.asterisk || code === codes.dash\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === codes.digit1) {\n        effects.enter(types.listItemPrefix)\n        effects.enter(types.listItemValue)\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === codes.rightParenthesis || code === codes.dot)\n    ) {\n      effects.exit(types.listItemValue)\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\n    effects.enter(types.listItemMarker)\n    effects.consume(code)\n    effects.exit(types.listItemMarker)\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.listItemPrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.listItemPrefixWhitespace)\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n\n  self.containerState._closeFlow = undefined\n\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      types.listItemIndent,\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemIndent,\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.listItemIndent &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemPrefixWhitespace,\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === types.listItemPrefixWhitespace\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n  let content\n  /** @type {number|undefined} */\n  let text\n  /** @type {number|undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === types.content) {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === types.paragraph) {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === types.content) {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === types.definition) {\n        definition = index\n      }\n    }\n  }\n\n  assert(text !== undefined, 'expected a `text` index to be found')\n  assert(content !== undefined, 'expected a `text` index to be found')\n\n  const heading = {\n    type: types.setextHeading,\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = types.setextHeadingText\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n  let marker\n  /** @type {boolean} */\n  let paragraph\n\n  // Find an opening.\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== types.lineEnding &&\n      self.events[index][1].type !== types.linePrefix &&\n      self.events[index][1].type !== types.content\n    ) {\n      paragraph = self.events[index][1].type === types.paragraph\n      break\n    }\n  }\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.dash || code === codes.equalsTo,\n      'expected `=` or `-`'\n    )\n\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(types.setextHeadingLine)\n      effects.enter(types.setextHeadingLineSequence)\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit(types.setextHeadingLineSequence)\n    return factorySpace(effects, closingSequenceEnd, types.lineSuffix)(code)\n  }\n\n  /** @type {State} */\n  function closingSequenceEnd(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.setextHeadingLine)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n\n    effects.enter(types.thematicBreak)\n    marker = code\n    return atBreak(code)\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code)\n    }\n\n    if (\n      size < constants.thematicBreakMarkerCountMin ||\n      (code !== codes.eof && !markdownLineEnding(code))\n    ) {\n      return nok(code)\n    }\n\n    effects.exit(types.thematicBreak)\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('../matters.js').Options} Options\n * @typedef {import('../matters.js').Matter} Matter\n * @typedef {import('../matters.js').Info} Info\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {matters} from '../matters.js'\n\n/**\n * Create an extension to support frontmatter (YAML, TOML, and more).\n *\n * @param {Options} [options='yaml'] One preset or matter, or an array of them.\n * @returns {Extension}\n */\nexport function frontmatter(options) {\n  const settings = matters(options)\n  /** @type {ConstructRecord} */\n  const flow = {}\n  let index = -1\n  /** @type {Matter} */\n  let matter\n  /** @type {number} */\n  let code\n\n  while (++index < settings.length) {\n    matter = settings[index]\n    code = fence(matter, 'open').charCodeAt(0)\n    if (code in flow) {\n      // @ts-expect-error it clearly does exist.\n      flow[code].push(parse(matter))\n    } else {\n      flow[code] = [parse(matter)]\n    }\n  }\n\n  return {flow}\n}\n\n/**\n * @param {Matter} matter\n * @returns {Construct}\n */\nfunction parse(matter) {\n  const name = matter.type\n  const anywhere = matter.anywhere\n  const valueType = name + 'Value'\n  const fenceType = name + 'Fence'\n  const sequenceType = fenceType + 'Sequence'\n  const fenceConstruct = {tokenize: tokenizeFence, partial: true}\n  /** @type {string} */\n  let buffer\n\n  return {tokenize: tokenizeFrontmatter, concrete: true}\n\n  /** @type {Tokenizer} */\n  function tokenizeFrontmatter(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      const position = self.now()\n\n      if (position.column !== 1 || (!anywhere && position.line !== 1)) {\n        return nok(code)\n      }\n\n      effects.enter(name)\n      buffer = fence(matter, 'open')\n      return effects.attempt(fenceConstruct, afterOpeningFence, nok)(code)\n    }\n\n    /** @type {State} */\n    function afterOpeningFence(code) {\n      buffer = fence(matter, 'close')\n      return lineEnd(code)\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        return lineEnd(code)\n      }\n\n      effects.enter(valueType)\n      return lineData(code)\n    }\n\n    /** @type {State} */\n    function lineData(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        effects.exit(valueType)\n        return lineEnd(code)\n      }\n\n      effects.consume(code)\n      return lineData\n    }\n\n    /** @type {State} */\n    function lineEnd(code) {\n      // Require a closing fence.\n      if (code === codes.eof) {\n        return nok(code)\n      }\n\n      // Can only be an eol.\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return effects.attempt(fenceConstruct, after, lineStart)\n    }\n\n    /** @type {State} */\n    function after(code) {\n      effects.exit(name)\n      return ok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeFence(effects, ok, nok) {\n    let bufferIndex = 0\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (code === buffer.charCodeAt(bufferIndex)) {\n        effects.enter(fenceType)\n        effects.enter(sequenceType)\n        return insideSequence(code)\n      }\n\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function insideSequence(code) {\n      if (bufferIndex === buffer.length) {\n        effects.exit(sequenceType)\n\n        if (markdownSpace(code)) {\n          effects.enter(types.whitespace)\n          return insideWhitespace(code)\n        }\n\n        return fenceEnd(code)\n      }\n\n      if (code === buffer.charCodeAt(bufferIndex++)) {\n        effects.consume(code)\n        return insideSequence\n      }\n\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function insideWhitespace(code) {\n      if (markdownSpace(code)) {\n        effects.consume(code)\n        return insideWhitespace\n      }\n\n      effects.exit(types.whitespace)\n      return fenceEnd(code)\n    }\n\n    /** @type {State} */\n    function fenceEnd(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        effects.exit(fenceType)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @param {Matter} matter\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction fence(matter, prop) {\n  return matter.marker\n    ? pick(matter.marker, prop).repeat(3)\n    : // @ts-expect-error: They’re mutually exclusive.\n      pick(matter.fence, prop)\n}\n\n/**\n * @param {Info|string} schema\n * @param {'open'|'close'} prop\n * @returns {string}\n */\nfunction pick(schema, prop) {\n  return typeof schema === 'string' ? schema : schema[prop]\n}\n","/**\n * @typedef {'yaml'|'toml'} Preset\n *   Either `'yaml'` or `'toml'`\n *\n * @typedef Info\n * @property {string} open\n * @property {string} close\n *\n * @typedef MatterProps\n * @property {string} type\n *   Type to tokenize as\n * @property {boolean} [anywhere=false]\n *   If `true`, matter can be found anywhere in the document.\n *   If `false` (default), only matter at the start of the document is\n *   recognized.\n *\n * @typedef MarkerProps\n * @property {string|Info} marker\n *   Character used to construct fences.\n *   By providing an object with `open` and `close` different characters can be\n *   used for opening and closing fences.\n *   For example the character `'-'` will result in `'---'` being used as the\n *   fence\n * @property {never} [fence]\n *\n * @typedef FenceProps\n * @property {string|Info} fence\n *   String used as the complete fence.\n *   By providing an object with `open` and `close` different values can be used\n *   for opening and closing fences.\n *   This can be used too if fences contain different characters or lengths\n *   other than 3.\n * @property {never} [marker]\n *\n * @typedef {(MatterProps & FenceProps)|(MatterProps & MarkerProps)} Matter\n *\n * @typedef {Preset|Matter|Array.<Preset|Matter>} Options\n */\n\nimport {fault} from 'fault'\n\nconst own = {}.hasOwnProperty\nconst markers = {yaml: '-', toml: '+'}\n\n/**\n * @param {Options} [options='yaml']\n * @returns {Array<Matter>}\n */\nexport function matters(options = 'yaml') {\n  /** @type {Array<Matter>} */\n  const results = []\n  let index = -1\n\n  // One preset or matter.\n  if (!Array.isArray(options)) {\n    options = [options]\n  }\n\n  while (++index < options.length) {\n    results[index] = matter(options[index])\n  }\n\n  return results\n}\n\n/**\n * @param {Preset|Matter} option\n * @returns {Matter}\n */\nfunction matter(option) {\n  let result = option\n\n  if (typeof result === 'string') {\n    if (!own.call(markers, result)) {\n      throw fault('Missing matter definition for `%s`', result)\n    }\n\n    result = {type: result, marker: markers[result]}\n  } else if (typeof result !== 'object') {\n    throw fault('Expected matter to be an object, not `%j`', result)\n  }\n\n  if (!own.call(result, 'type')) {\n    throw fault('Missing `type` in matter `%j`', result)\n  }\n\n  if (!own.call(result, 'fence') && !own.call(result, 'marker')) {\n    throw fault('Missing `marker` or `fence` in matter `%j`', result)\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\n/** @type {HtmlExtension} */\nexport const gfmAutolinkLiteralHtml = {\n  exit: {literalAutolinkEmail, literalAutolinkHttp, literalAutolinkWww}\n}\n\n/** @type {Handle} */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n\n/** @type {Handle} */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n\n/** @type {Handle} */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\n\nconst www = {tokenize: tokenizeWww, partial: true}\nconst domain = {tokenize: tokenizeDomain, partial: true}\nconst path = {tokenize: tokenizePath, partial: true}\nconst punctuation = {tokenize: tokenizePunctuation, partial: true}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\n\nconst wwwAutolink = {tokenize: tokenizeWwwAutolink, previous: previousWww}\nconst httpAutolink = {tokenize: tokenizeHttpAutolink, previous: previousHttp}\nconst emailAutolink = {tokenize: tokenizeEmailAutolink, previous: previousEmail}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/** @type {Extension} */\nexport const gfmAutolinkLiteral = {text}\n\nlet code = codes.digit0\n\n// Add alphanumerics.\nwhile (code < codes.leftCurlyBrace) {\n  text[code] = emailAutolink\n  code++\n  if (code === codes.colon) code = codes.uppercaseA\n  else if (code === codes.leftSquareBracket) code = codes.lowercaseA\n}\n\ntext[codes.plusSign] = emailAutolink\ntext[codes.dash] = emailAutolink\ntext[codes.dot] = emailAutolink\ntext[codes.underscore] = emailAutolink\ntext[codes.uppercaseH] = [emailAutolink, httpAutolink]\ntext[codes.lowercaseH] = [emailAutolink, httpAutolink]\ntext[codes.uppercaseW] = [emailAutolink, wwwAutolink]\ntext[codes.lowercaseW] = [emailAutolink, wwwAutolink]\n\n/** @type {Tokenizer} */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n  let hasDot\n  /** @type {boolean|undefined} */\n  let hasDigitInLastSegment\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /** @type {State} */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === codes.atSign) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function label(code) {\n    if (code === codes.dot) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === codes.dash || code === codes.underscore) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n\n  /** @type {State} */\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n\n  /** @type {State} */\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n\n  /** @type {State} */\n  function afterDashOrUnderscore(code) {\n    if (code === codes.dot) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n\n  /** @type {State} */\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (\n      (code !== codes.uppercaseW && code !== codes.lowercaseW) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n\n  /** @type {State} */\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (\n      (code !== codes.uppercaseH && code !== codes.lowercaseH) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n\n  /** @type {State} */\n  function t1(code) {\n    if (code === codes.uppercaseT || code === codes.lowercaseT) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function t2(code) {\n    if (code === codes.uppercaseT || code === codes.lowercaseT) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function p(code) {\n    if (code === codes.uppercaseP || code === codes.lowercaseP) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function s(code) {\n    if (code === codes.uppercaseS || code === codes.lowercaseS) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n\n  /** @type {State} */\n  function colon(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function slash1(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function slash2(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    return code === codes.eof ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n\n  /** @type {State} */\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.uppercaseW || code === codes.lowercaseW,\n      'expected `w`'\n    )\n    effects.consume(code)\n    return w2\n  }\n\n  /** @type {State} */\n  function w2(code) {\n    if (code === codes.uppercaseW || code === codes.lowercaseW) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function w3(code) {\n    if (code === codes.uppercaseW || code === codes.lowercaseW) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function dot(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    return code === codes.eof || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastLastSegment\n\n  return domain\n\n  /** @type {State} */\n  function domain(code) {\n    if (code === codes.ampersand) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === codes.dot || code === codes.underscore) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    if (\n      code === codes.eof ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== codes.dash && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n\n  /** @type {State} */\n  function punctuationContinuation(code) {\n    if (code === codes.dot) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === codes.underscore) hasUnderscoreInLastSegment = true\n\n    effects.consume(code)\n    return domain\n  }\n\n  /** @type {State} */\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n\n  return inPath\n\n  /** @type {State} */\n  function inPath(code) {\n    if (code === codes.ampersand) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === codes.leftParenthesis) {\n      balance++\n    }\n\n    if (code === codes.rightParenthesis) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n\n  /** @type {State} */\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n\n  /** @type {State} */\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`')\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === codes.semicolon) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.dash || trailingPunctuation(code),\n      'expected punctuation'\n    )\n    effects.consume(code)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    }\n\n    // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction trailingPunctuation(code) {\n  return (\n    code === codes.exclamationMark ||\n    code === codes.quotationMark ||\n    code === codes.apostrophe ||\n    code === codes.rightParenthesis ||\n    code === codes.asterisk ||\n    code === codes.comma ||\n    code === codes.dot ||\n    code === codes.colon ||\n    code === codes.semicolon ||\n    code === codes.lessThan ||\n    code === codes.questionMark ||\n    code === codes.underscore ||\n    code === codes.tilde\n  )\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction pathEnd(code) {\n  return (\n    code === codes.eof ||\n    code === codes.lessThan ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === codes.plusSign ||\n    code === codes.dash ||\n    code === codes.dot ||\n    code === codes.underscore ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/** @type {Previous} */\nfunction previousWww(code) {\n  return (\n    code === codes.eof ||\n    code === codes.leftParenthesis ||\n    code === codes.asterisk ||\n    code === codes.underscore ||\n    code === codes.tilde ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/** @type {Previous} */\nfunction previousHttp(code) {\n  return code === codes.eof || !asciiAlpha(code)\n}\n\n/** @type {Previous} */\nfunction previousEmail(code) {\n  return code !== codes.slash && previousHttp(code)\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n *\n * @typedef Options\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [label='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [backLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Options} [options={}]\n * @returns {HtmlExtension}\n */\nexport function gfmFootnoteHtml(options = {}) {\n  const label = options.label || 'Footnotes'\n  const backLabel = options.backLabel || 'Back to content'\n  const clobberPrefix =\n    options.clobberPrefix === undefined || options.clobberPrefix === null\n      ? 'user-content-'\n      : options.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */ (this.getData('tightStack'))\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions')\n        )\n        const footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n        const tightStack = /** @type {Array<boolean>} */ (\n          this.getData('tightStack')\n        )\n        const current = footnoteStack.pop()\n        const value = this.resume()\n\n        assert(current, 'expected to be in a footnote')\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value\n\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteDefinitionStack')\n        )\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = /** @type {Array<string>|undefined} */ (\n          this.getData('gfmFootnoteCallOrder')\n        )\n        let counts = /** @type {Record<string, number>|undefined} */ (\n          this.getData('gfmFootnoteCallCounts')\n        )\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n\n        this.resume()\n\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n\n        const reuseCounter = counts[id]\n\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls = /** @type {Array<string>} */ (\n          this.getData('gfmFootnoteCallOrder') || []\n        )\n        const counts = /** @type {Record<string, number>} */ (\n          this.getData('gfmFootnoteCallCounts') || {}\n        )\n        const definitions = /** @type {Record<string, string>} */ (\n          this.getData('gfmFootnoteDefinitions') || {}\n        )\n        let index = -1\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">'\n          )\n          this.raw(this.encode(label))\n          this.tag('</h2>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"' +\n                this.encode(backLabel) +\n                '\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n\n          const reference = references.join(' ')\n          let injected = false\n\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst indent = {tokenize: tokenizeIndent, partial: true}\n\n/**\n * @returns {Extension}\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [codes.leftSquareBracket]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {tokenize: tokenizeDefinitionContinuation},\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [codes.leftSquareBracket]: {tokenize: tokenizeGfmFootnoteCall},\n      [codes.rightSquareBracket]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === types.labelImage) {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === types.labelLink ||\n      token.type === types.label ||\n      token.type === types.image ||\n      token.type === types.link\n    ) {\n      break\n    }\n  }\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({start: labelStart.end, end: self.now()})\n    )\n\n    if (id.charCodeAt(0) !== codes.caret || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === types.labelImage &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  assert(labelStart, 'expected `labelStart` to resolve')\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = types.data\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: types.chunkString,\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n\n  events.splice(index, events.length - index + 1, ...replacement)\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /** @type {State} */\n  function callStart(code) {\n    if (code !== codes.caret) return nok(code)\n\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /** @type {State} */\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === codes.backslash ? callEscape : callData\n  }\n\n  /** @type {State} */\n  function callEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n\n  /** @type {State} */\n  function end(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n  let data\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n\n  /** @type {State} */\n  function labelStart(code) {\n    if (code === codes.caret) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      size > constants.linkReferenceSizeMax\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n\n  /** @type {State} */\n  function label(code) {\n    if (\n      code === codes.eof ||\n      markdownLineEnding(code) ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      size > constants.linkReferenceSizeMax\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === codes.backslash ? labelEscape : label\n  }\n\n  /** @type {State} */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n\n  /** @type {State} */\n  function labelAfter(code) {\n    if (code === codes.colon) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    constants.tabSize + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === constants.tabSize\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmStrikethroughHtml = {\n  enter: {\n    strikethrough() {\n      this.tag('<del>')\n    }\n  },\n  exit: {\n    strikethrough() {\n      this.tag('</del>')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {[codes.tilde]: tokenizer},\n    insideSpan: {null: [tokenizer]},\n    attentionMarkers: {null: [codes.tilde]}\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n\n            // Between.\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            )\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n\n            splice(events, open - 1, index - open + 3, nextEvents)\n\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = types.data\n      }\n    }\n\n    return events\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.tilde, 'expected `~`')\n\n      if (\n        previous === codes.tilde &&\n        events[events.length - 1][1].type !== types.characterEscape\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === codes.tilde) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open =\n        !after || (after === constants.attentionSideAfter && Boolean(before))\n      token._close =\n        !before || (before === constants.attentionSideAfter && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('./syntax.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n\n/** @type {HtmlExtension} */\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      /** @type {Array<Align>} */\n      // @ts-expect-error Custom.\n      const tableAlign = token._align\n      this.lineEndingIfNeeded()\n      this.tag('<table>')\n      this.setData('tableAlign', tableAlign)\n    },\n    tableBody() {\n      // Clear slurping line ending from the delimiter row.\n      this.setData('slurpOneLineEnding')\n      this.tag('<tbody>')\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      const align = alignment[tableAlign[tableColumn]]\n\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer()\n      } else {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + align + '>')\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('<thead>')\n    },\n    tableHeader() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      const align = alignment[tableAlign[tableColumn]]\n\n      this.lineEndingIfNeeded()\n      this.tag('<th' + align + '>')\n    },\n    tableRow() {\n      this.setData('tableColumn', 0)\n      this.lineEndingIfNeeded()\n      this.tag('<tr>')\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token)\n\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace)\n      }\n\n      this.raw(this.encode(value))\n    },\n    table() {\n      this.setData('tableAlign')\n      // If there was no table body, make sure the slurping from the delimiter row\n      // is cleared.\n      this.setData('slurpAllLineEndings')\n      this.lineEndingIfNeeded()\n      this.tag('</table>')\n    },\n    tableBody() {\n      this.lineEndingIfNeeded()\n      this.tag('</tbody>')\n    },\n    tableData() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n\n      if (tableColumn in tableAlign) {\n        this.tag('</td>')\n        this.setData('tableColumn', tableColumn + 1)\n      } else {\n        // Stop capturing.\n        this.resume()\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('</thead>')\n      this.setData('slurpOneLineEnding', true)\n      // Slurp the line ending from the delimiter row.\n    },\n    tableHeader() {\n      const tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n      this.tag('</th>')\n      this.setData('tableColumn', tableColumn + 1)\n    },\n    tableRow() {\n      const tableAlign = /** @type {Array<Align>} */ (\n        this.getData('tableAlign')\n      )\n      let tableColumn = /** @type {number} */ (this.getData('tableColumn'))\n\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n        tableColumn++\n      }\n\n      this.setData('tableColumn', tableColumn)\n      this.lineEndingIfNeeded()\n      this.tag('</tr>')\n    }\n  }\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {null: {tokenize: tokenizeTable, resolve: resolveTable}}\n}\n\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n  let inHead\n  /** @type {boolean|undefined} */\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n  let inRow\n  /** @type {number|undefined} */\n  let contentStart\n  /** @type {number|undefined} */\n  let contentEnd\n  /** @type {number|undefined} */\n  let cellStart\n  /** @type {boolean|undefined} */\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        assert(\n          contentStart,\n          'expected `contentStart` to be defined if `contentEnd` is'\n        )\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n        const text = {\n          type: types.chunkText,\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: constants.contentTypeText\n        }\n\n        assert(\n          contentStart,\n          'expected `contentStart` to be defined if `contentEnd` is'\n        )\n\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== types.whitespace)))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n  let hasDash\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n\n    // If we start with a pipe, we open a cell marker.\n    if (code === codes.verticalBar) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent')\n    // Can’t be space or eols at the start of a construct, so we’re in a cell.\n    assert(!markdownLineEndingOrSpace(code), 'expected non-space')\n    return inCellContentHead(code)\n  }\n\n  /** @type {State} */\n  function cellDividerHead(code) {\n    assert(code === codes.verticalBar, 'expected `|`')\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n\n  /** @type {State} */\n  function cellBreakHead(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter(types.whitespace)\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === codes.verticalBar) {\n      return cellDividerHead(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n\n  /** @type {State} */\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit(types.whitespace)\n    return cellBreakHead(code)\n  }\n\n  /** @type {State} */\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (\n      code === codes.eof ||\n      code === codes.verticalBar ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash\n      ? inCellContentEscapeHead\n      : inCellContentHead\n  }\n\n  /** @type {State} */\n  function inCellContentEscapeHead(code) {\n    if (code === codes.backslash || code === codes.verticalBar) {\n      effects.consume(code)\n      return inCellContentHead\n    }\n\n    // Anything else.\n    return inCellContentHead(code)\n  }\n\n  /** @type {State} */\n  function atRowEndHead(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {tokenize: tokenizeRowEnd, partial: true},\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n\n  /** @type {State} */\n  function atDelimiterRowBreak(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter(types.whitespace)\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === codes.dash) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === codes.colon) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    }\n\n    // If we start with a pipe, we open a cell marker.\n    if (code === codes.verticalBar) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit(types.whitespace)\n    return atDelimiterRowBreak(code)\n  }\n\n  /** @type {State} */\n  function inFillerDelimiter(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === codes.colon) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n\n  /** @type {State} */\n  function afterLeftAlignment(code) {\n    if (code === codes.dash) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    }\n\n    // Anything else is not ok.\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function afterRightAlignment(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter(types.whitespace)\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    // `|`\n    if (code === codes.verticalBar) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow')\n\n    // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === codes.eof) {\n      return tableClose(code)\n    }\n\n    assert(markdownLineEnding(code), 'expected eol')\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {tokenize: tokenizeRowEnd, partial: true},\n        factorySpace(effects, bodyStart, types.linePrefix, constants.tabSize),\n        tableClose\n      )\n    )(code)\n  }\n\n  /** @type {State} */\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n\n  /** @type {State} */\n  function rowStartBody(code) {\n    effects.enter('tableRow')\n\n    // If we start with a pipe, we open a cell marker.\n    if (code === codes.verticalBar) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent')\n    // Can’t be space or eols at the start of a construct, so we’re in a cell.\n    return inCellContentBody(code)\n  }\n\n  /** @type {State} */\n  function cellDividerBody(code) {\n    assert(code === codes.verticalBar, 'expected `|`')\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n\n  /** @type {State} */\n  function cellBreakBody(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter(types.whitespace)\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    // `|`\n    if (code === codes.verticalBar) {\n      return cellDividerBody(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n\n  /** @type {State} */\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit(types.whitespace)\n    return cellBreakBody(code)\n  }\n\n  /** @type {State} */\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (\n      code === codes.eof ||\n      code === codes.verticalBar ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash\n      ? inCellContentEscapeBody\n      : inCellContentBody\n  }\n\n  /** @type {State} */\n  function inCellContentEscapeBody(code) {\n    if (code === codes.backslash || code === codes.verticalBar) {\n      effects.consume(code)\n      return inCellContentBody\n    }\n\n    // Anything else.\n    return inCellContentBody(code)\n  }\n\n  /** @type {State} */\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === codes.eof) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {tokenize: tokenizeRowEnd, partial: true},\n        factorySpace(\n          effects,\n          rowStartBody,\n          types.linePrefix,\n          constants.tabSize\n        ),\n        tableBodyClose\n      )\n    )(code)\n  }\n\n  /** @type {State} */\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, prefixed, types.linePrefix)\n    }\n\n    /** @type {State} */\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === codes.eof ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1]\n\n      // Indented code can interrupt delimiter and body rows.\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === types.linePrefix &&\n        tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check')\n    // EOL.\n    effects.consume(code)\n    return whitespace\n  }\n\n  /** @type {State} */\n  function whitespace(code) {\n    if (code === codes.virtualSpace || code === codes.space) {\n      effects.consume(code)\n      size++\n      return size === constants.tabSize ? ok : whitespace\n    }\n\n    // EOF or whitespace\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    }\n\n    // Anything else.\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n */\n\n/**\n * An opening or closing tag, followed by a case-insensitive specific tag name,\n * followed by HTML whitespace, a greater than, or a slash.\n */\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n/**\n * As HTML (text) parses tags separately (and v. strictly), we don’t need to be\n * global.\n */\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/** @type {HtmlExtension} */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmTaskListItemHtml = {\n  enter: {\n    taskListCheck() {\n      this.tag('<input type=\"checkbox\" disabled=\"\" ')\n    }\n  },\n  exit: {\n    taskListCheck() {\n      this.tag('/>')\n    },\n    taskListCheckValueChecked() {\n      this.tag('checked=\"\" ')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\n\nexport const gfmTaskListItem = {\n  text: {[codes.leftSquareBracket]: tasklistCheck}\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n\n  return open\n\n  /** @type {State} */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== codes.eof ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)\n    }\n\n    return nok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(effects, after, types.whitespace)\n\n  /** @type {State} */\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === types.whitespace) ||\n        // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== codes.eof\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n * @property {boolean} [addResult=false]\n * @property {Acorn} [acorn]\n * @property {AcornOptions} [acornOptions]\n * @property {boolean} [spread=false]\n * @property {boolean} [allowEmpty=true]\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factoryMdxExpression} from 'micromark-factory-mdx-expression'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Options} options\n * @returns {Extension}\n */\nexport function mdxExpression(options = {}) {\n  const addResult = options.addResult\n  const acorn = options.acorn\n  // Hidden: `micromark-extension-mdx-jsx` supports expressions in tags,\n  // and one of them is only “spread” elements.\n  // It also has expressions that are not allowed to be empty (`<x y={}/>`).\n  // Instead of duplicating code there, this are two small hidden feature here\n  // to test that behavior.\n  const spread = options.spread\n  let allowEmpty = options.allowEmpty\n  /** @type {AcornOptions} */\n  let acornOptions\n\n  if (allowEmpty === null || allowEmpty === undefined) {\n    allowEmpty = true\n  }\n\n  if (acorn) {\n    if (!acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2020, sourceType: 'module'},\n      options.acornOptions\n    )\n  } else if (options.acornOptions || options.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {\n      [codes.leftCurlyBrace]: {tokenize: tokenizeFlowExpression, concrete: true}\n    },\n    text: {[codes.leftCurlyBrace]: {tokenize: tokenizeTextExpression}}\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeFlowExpression(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.leftCurlyBrace, 'expected `{`')\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        factorySpace(effects, after, types.whitespace),\n        'mdxFlowExpression',\n        'mdxFlowExpressionMarker',\n        'mdxFlowExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty\n      )(code)\n    }\n\n    /** @type {State} */\n    function after(code) {\n      return code === codes.eof || markdownLineEnding(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeTextExpression(effects, ok) {\n    const self = this\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.leftCurlyBrace, 'expected `{`')\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        ok,\n        'mdxTextExpression',\n        'mdxTextExpressionMarker',\n        'mdxTextExpressionChunk',\n        acorn,\n        acornOptions,\n        addResult,\n        spread,\n        allowEmpty,\n        true\n      )(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {start as idStart, cont as idCont} from 'estree-util-is-identifier-name'\nimport {factoryMdxExpression} from 'micromark-factory-mdx-expression'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {VFileMessage} from 'vfile-message'\n\nconst lazyLineEnd = {tokenize: tokenizeLazyLineEnd, partial: true}\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn|undefined} acorn\n * @param {AcornOptions|undefined} acornOptions\n * @param {boolean|undefined} addResult\n * @param {boolean|undefined} allowLazy\n * @param {string} tagType\n * @param {string} tagMarkerType\n * @param {string} tagClosingMarkerType\n * @param {string} tagSelfClosingMarker\n * @param {string} tagNameType\n * @param {string} tagNamePrimaryType\n * @param {string} tagNameMemberMarkerType\n * @param {string} tagNameMemberType\n * @param {string} tagNamePrefixMarkerType\n * @param {string} tagNameLocalType\n * @param {string} tagExpressionAttributeType\n * @param {string} tagExpressionAttributeMarkerType\n * @param {string} tagExpressionAttributeValueType\n * @param {string} tagAttributeType\n * @param {string} tagAttributeNameType\n * @param {string} tagAttributeNamePrimaryType\n * @param {string} tagAttributeNamePrefixMarkerType\n * @param {string} tagAttributeNameLocalType\n * @param {string} tagAttributeInitializerMarkerType\n * @param {string} tagAttributeValueLiteralType\n * @param {string} tagAttributeValueLiteralMarkerType\n * @param {string} tagAttributeValueLiteralValueType\n * @param {string} tagAttributeValueExpressionType\n * @param {string} tagAttributeValueExpressionMarkerType\n * @param {string} tagAttributeValueExpressionValueType\n */\n// eslint-disable-next-line max-params\nexport function factoryTag(\n  effects,\n  ok,\n  nok,\n  acorn,\n  acornOptions,\n  addResult,\n  allowLazy,\n  tagType,\n  tagMarkerType,\n  tagClosingMarkerType,\n  tagSelfClosingMarker,\n  tagNameType,\n  tagNamePrimaryType,\n  tagNameMemberMarkerType,\n  tagNameMemberType,\n  tagNamePrefixMarkerType,\n  tagNameLocalType,\n  tagExpressionAttributeType,\n  tagExpressionAttributeMarkerType,\n  tagExpressionAttributeValueType,\n  tagAttributeType,\n  tagAttributeNameType,\n  tagAttributeNamePrimaryType,\n  tagAttributeNamePrefixMarkerType,\n  tagAttributeNameLocalType,\n  tagAttributeInitializerMarkerType,\n  tagAttributeValueLiteralType,\n  tagAttributeValueLiteralMarkerType,\n  tagAttributeValueLiteralValueType,\n  tagAttributeValueExpressionType,\n  tagAttributeValueExpressionMarkerType,\n  tagAttributeValueExpressionValueType\n) {\n  const self = this\n  /** @type {State} */\n  let returnState\n  /** @type {NonNullable<Code>|undefined} */\n  let marker\n  /** @type {Point|undefined} */\n  let startPoint\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    startPoint = self.now()\n    effects.enter(tagType)\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    return afterStart\n  }\n\n  /** @type {State} */\n  function afterStart(code) {\n    // Deviate from JSX, which allows arbitrary whitespace.\n    // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n    if (markdownLineEnding(code) || markdownSpace(code)) {\n      return nok(code)\n    }\n\n    // Any other ES whitespace does not get this treatment.\n    returnState = beforeName\n    return optionalEsWhitespace(code)\n  }\n\n  // Right after `<`, before an optional name.\n  /** @type {State} */\n  function beforeName(code) {\n    // Closing tag.\n    if (code === codes.slash) {\n      effects.enter(tagClosingMarkerType)\n      effects.consume(code)\n      effects.exit(tagClosingMarkerType)\n      returnState = beforeClosingTagName\n      return optionalEsWhitespace\n    }\n\n    // Fragment opening tag.\n    if (code === codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === codes.exclamationMark\n          ? ' (note: to create a comment in MDX, use `{/* text */}`)'\n          : '')\n    )\n  }\n\n  // At the start of a closing tag, right after `</`.\n  /** @type {State} */\n  function beforeClosingTagName(code) {\n    // Fragment closing tag.\n    if (code === codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Start of a closing tag name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagNameType)\n      effects.enter(tagNamePrimaryType)\n      effects.consume(code)\n      return primaryName\n    }\n\n    crash(\n      code,\n      'before name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === codes.asterisk || code === codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  // Inside the primary name.\n  /** @type {State} */\n  function primaryName(code) {\n    // Continuation of name: remain.\n    if (code === codes.dash || (code !== codes.eof && idCont(code))) {\n      effects.consume(code)\n      return primaryName\n    }\n\n    // End of name.\n    if (\n      code === codes.dot ||\n      code === codes.slash ||\n      code === codes.colon ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNamePrimaryType)\n      returnState = afterPrimaryName\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'in name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  // After a name.\n  /** @type {State} */\n  function afterPrimaryName(code) {\n    // Start of a member name.\n    if (code === codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = beforeMemberName\n      return optionalEsWhitespace\n    }\n\n    // Start of a local name.\n    if (code === codes.colon) {\n      effects.enter(tagNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagNamePrefixMarkerType)\n      returnState = beforeLocalName\n      return optionalEsWhitespace\n    }\n\n    // End of name.\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      (code !== codes.eof && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return beforeAttribute(code)\n    }\n\n    crash(\n      code,\n      'after name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // We’ve seen a `.` and are expecting a member name.\n  /** @type {State} */\n  function beforeMemberName(code) {\n    // Start of a member name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagNameMemberType)\n      effects.consume(code)\n      return memberName\n    }\n\n    crash(\n      code,\n      'before member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // Inside the member name.\n  /** @type {State} */\n  function memberName(code) {\n    // Continuation of member name: stay in state\n    if (code === codes.dash || (code !== codes.eof && idCont(code))) {\n      effects.consume(code)\n      return memberName\n    }\n\n    // End of member name (note that namespaces and members can’t be combined).\n    if (\n      code === codes.dot ||\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNameMemberType)\n      returnState = afterMemberName\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'in member name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag' +\n        (code === codes.atSign\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  // After a member name: this is the same as `afterPrimaryName` but we don’t\n  // expect colons.\n  /** @type {State} */\n  function afterMemberName(code) {\n    // Start another member name.\n    if (code === codes.dot) {\n      effects.enter(tagNameMemberMarkerType)\n      effects.consume(code)\n      effects.exit(tagNameMemberMarkerType)\n      returnState = beforeMemberName\n      return optionalEsWhitespace\n    }\n\n    // End of name.\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      (code !== codes.eof && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return beforeAttribute(code)\n    }\n\n    crash(\n      code,\n      'after member name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // We’ve seen a `:`, and are expecting a local name.\n  /** @type {State} */\n  function beforeLocalName(code) {\n    // Start of a local name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagNameLocalType)\n      effects.consume(code)\n      return localName\n    }\n\n    crash(\n      code,\n      'before local name',\n      'a character that can start a name, such as a letter, `$`, or `_`' +\n        (code === codes.plusSign ||\n        (code !== null &&\n          code > codes.dot &&\n          code < codes.colon) /* `/` - `9` */\n          ? ' (note: to create a link in MDX, use `[text](url)`)'\n          : '')\n    )\n  }\n\n  // Inside the local name.\n  /** @type {State} */\n  function localName(code) {\n    // Continuation of local name: stay in state\n    if (code === codes.dash || (code !== codes.eof && idCont(code))) {\n      effects.consume(code)\n      return localName\n    }\n\n    // End of local name (note that we don’t expect another colon, or a member).\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagNameLocalType)\n      returnState = afterLocalName\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'in local name',\n      'a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // After a local name: this is the same as `afterPrimaryName` but we don’t\n  // expect colons or periods.\n  /** @type {State} */\n  function afterLocalName(code) {\n    // End of name.\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      (code !== codes.eof && idStart(code))\n    ) {\n      effects.exit(tagNameType)\n      return beforeAttribute(code)\n    }\n\n    crash(\n      code,\n      'after local name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  /** @type {State} */\n  function beforeAttribute(code) {\n    // Mark as self-closing.\n    if (code === codes.slash) {\n      effects.enter(tagSelfClosingMarker)\n      effects.consume(code)\n      effects.exit(tagSelfClosingMarker)\n      returnState = selfClosing\n      return optionalEsWhitespace\n    }\n\n    // End of tag.\n    if (code === codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    // Attribute expression.\n    if (code === codes.leftCurlyBrace) {\n      assert(startPoint, 'expected `startPoint` to be defined')\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        afterAttributeExpression,\n        tagExpressionAttributeType,\n        tagExpressionAttributeMarkerType,\n        tagExpressionAttributeValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        true,\n        false,\n        allowLazy,\n        startPoint.column\n      )(code)\n    }\n\n    // Start of an attribute name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagAttributeType)\n      effects.enter(tagAttributeNameType)\n      effects.enter(tagAttributeNamePrimaryType)\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    crash(\n      code,\n      'before attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // At the start of an attribute expression.\n  /** @type {State} */\n  function afterAttributeExpression(code) {\n    returnState = beforeAttribute\n    return optionalEsWhitespace(code)\n  }\n\n  // In the attribute name.\n  /** @type {State} */\n  function attributePrimaryName(code) {\n    // Continuation of the attribute name.\n    if (code === codes.dash || (code !== codes.eof && idCont(code))) {\n      effects.consume(code)\n      return attributePrimaryName\n    }\n\n    // End of attribute name or tag.\n    if (\n      code === codes.slash ||\n      code === codes.colon ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagAttributeNamePrimaryType)\n      returnState = afterAttributePrimaryName\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'in attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // After an attribute name, probably finding an equals.\n  /** @type {State} */\n  function afterAttributePrimaryName(code) {\n    // Start of a local name.\n    if (code === codes.colon) {\n      effects.enter(tagAttributeNamePrefixMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeNamePrefixMarkerType)\n      returnState = beforeAttributeLocalName\n      return optionalEsWhitespace\n    }\n\n    // Start of an attribute value.\n    if (code === codes.equalsTo) {\n      effects.exit(tagAttributeNameType)\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = beforeAttributeValue\n      return optionalEsWhitespace\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== codes.eof && idStart(code))\n    ) {\n      effects.exit(tagAttributeNameType)\n      effects.exit(tagAttributeType)\n      returnState = beforeAttribute\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'after attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  // We’ve seen a `:`, and are expecting a local name.\n  /** @type {State} */\n  function beforeAttributeLocalName(code) {\n    // Start of a local name.\n    if (code !== codes.eof && idStart(code)) {\n      effects.enter(tagAttributeNameLocalType)\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    crash(\n      code,\n      'before local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  // In the local attribute name.\n  /** @type {State} */\n  function attributeLocalName(code) {\n    // Continuation of the local attribute name.\n    if (code === codes.dash || (code !== codes.eof && idCont(code))) {\n      effects.consume(code)\n      return attributeLocalName\n    }\n\n    // End of tag / attribute name.\n    if (\n      code === codes.slash ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      effects.exit(tagAttributeNameLocalType)\n      effects.exit(tagAttributeNameType)\n      returnState = afterAttributeLocalName\n      return optionalEsWhitespace(code)\n    }\n\n    crash(\n      code,\n      'in local attribute name',\n      'an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag'\n    )\n  }\n\n  // After a local attribute name, expecting an equals.\n  /** @type {State} */\n  function afterAttributeLocalName(code) {\n    // Start of an attribute value.\n    if (code === codes.equalsTo) {\n      effects.enter(tagAttributeInitializerMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeInitializerMarkerType)\n      returnState = beforeAttributeValue\n      return optionalEsWhitespace\n    }\n\n    // End of tag / new attribute.\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      code === codes.leftCurlyBrace ||\n      (code !== codes.eof && idStart(code))\n    ) {\n      effects.exit(tagAttributeType)\n      return beforeAttribute(code)\n    }\n\n    crash(\n      code,\n      'after local attribute name',\n      'a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag'\n    )\n  }\n\n  // After an attribute value initializer, expecting quotes and such.\n  /** @type {State} */\n  function beforeAttributeValue(code) {\n    // Start of double- or single quoted value.\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.enter(tagAttributeValueLiteralType)\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      marker = code\n      return attributeValueQuotedStart\n    }\n\n    // Start of an assignment expression.\n    if (code === codes.leftCurlyBrace) {\n      assert(startPoint, 'expected `startPoint` to be defined')\n      return factoryMdxExpression.call(\n        self,\n        effects,\n        afterAttributeValueExpression,\n        tagAttributeValueExpressionType,\n        tagAttributeValueExpressionMarkerType,\n        tagAttributeValueExpressionValueType,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        false,\n        allowLazy,\n        startPoint.column\n      )(code)\n    }\n\n    crash(\n      code,\n      'before attribute value',\n      'a character that can start an attribute value, such as `\"`, `\\'`, or `{`' +\n        (code === codes.lessThan\n          ? ' (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)'\n          : '')\n    )\n  }\n\n  /** @type {State} */\n  function afterAttributeValueExpression(code) {\n    effects.exit(tagAttributeType)\n    returnState = beforeAttribute\n    return optionalEsWhitespace(code)\n  }\n\n  // At the start of a quoted attribute value.\n  /** @type {State} */\n  function attributeValueQuotedStart(code) {\n    assert(marker !== undefined, 'expected `marker` to be defined')\n\n    if (code === codes.eof) {\n      crash(\n        code,\n        'in attribute value',\n        'a corresponding closing quote `' + String.fromCharCode(marker) + '`'\n      )\n    }\n\n    if (code === marker) {\n      effects.enter(tagAttributeValueLiteralMarkerType)\n      effects.consume(code)\n      effects.exit(tagAttributeValueLiteralMarkerType)\n      effects.exit(tagAttributeValueLiteralType)\n      effects.exit(tagAttributeType)\n      marker = undefined\n      returnState = beforeAttribute\n      return optionalEsWhitespace\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = attributeValueQuotedStart\n      return optionalEsWhitespace(code)\n    }\n\n    effects.enter(tagAttributeValueLiteralValueType)\n    return attributeValueQuoted(code)\n  }\n\n  // In a quoted attribute value.\n  /** @type {State} */\n  function attributeValueQuoted(code) {\n    if (code === codes.eof || code === marker || markdownLineEnding(code)) {\n      effects.exit(tagAttributeValueLiteralValueType)\n      return attributeValueQuotedStart(code)\n    }\n\n    // Continuation.\n    effects.consume(code)\n    return attributeValueQuoted\n  }\n\n  // Right after the slash on a tag, e.g., `<asd /`.\n  /** @type {State} */\n  function selfClosing(code) {\n    // End of tag.\n    if (code === codes.greaterThan) {\n      return tagEnd(code)\n    }\n\n    crash(\n      code,\n      'after self-closing slash',\n      '`>` to end the tag' +\n        (code === codes.asterisk || code === codes.slash\n          ? ' (note: JS comments in JSX tags are not supported in MDX)'\n          : '')\n    )\n  }\n\n  // At a `>`.\n  /** @type {State} */\n  function tagEnd(code) {\n    assert(code === codes.greaterThan, 'expected `>`')\n    effects.enter(tagMarkerType)\n    effects.consume(code)\n    effects.exit(tagMarkerType)\n    effects.exit(tagType)\n    return ok\n  }\n\n  // Optionally start whitespace.\n  /** @type {State} */\n  function optionalEsWhitespace(code) {\n    if (markdownLineEnding(code)) {\n      if (allowLazy) {\n        effects.enter(types.lineEnding)\n        effects.consume(code)\n        effects.exit(types.lineEnding)\n        return factorySpace(\n          effects,\n          optionalEsWhitespace,\n          types.linePrefix,\n          constants.tabSize\n        )\n      }\n\n      return effects.attempt(\n        lazyLineEnd,\n        factorySpace(\n          effects,\n          optionalEsWhitespace,\n          types.linePrefix,\n          constants.tabSize\n        ),\n        crashEol\n      )(code)\n    }\n\n    if (markdownSpace(code) || unicodeWhitespace(code)) {\n      effects.enter('esWhitespace')\n      return optionalEsWhitespaceContinue(code)\n    }\n\n    return returnState(code)\n  }\n\n  // Continue optional whitespace.\n  /** @type {State} */\n  function optionalEsWhitespaceContinue(code) {\n    if (\n      markdownLineEnding(code) ||\n      !(markdownSpace(code) || unicodeWhitespace(code))\n    ) {\n      effects.exit('esWhitespace')\n      return optionalEsWhitespace(code)\n    }\n\n    effects.consume(code)\n    return optionalEsWhitespaceContinue\n  }\n\n  /** @type {State} */\n  function crashEol() {\n    throw new VFileMessage(\n      'Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc',\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-eof'\n    )\n  }\n\n  // Crash at a nonconforming character.\n  /**\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */\n  function crash(code, at, expect) {\n    throw new VFileMessage(\n      'Unexpected ' +\n        (code === codes.eof\n          ? 'end of file'\n          : 'character `' +\n            (code === codes.graveAccent ? '` ` `' : String.fromCharCode(code)) +\n            '` (' +\n            serializeCharCode(code) +\n            ')') +\n        ' ' +\n        at +\n        ', expected ' +\n        expect,\n      self.now(),\n      'micromark-extension-mdx-jsx:unexpected-' +\n        (code === codes.eof ? 'eof' : 'character')\n    )\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLazyLineEnd(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return lineStart\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */\nfunction serializeCharCode(code) {\n  return (\n    'U+' +\n    code\n      .toString(constants.numericBaseHexadecimal)\n      .toUpperCase()\n      .padStart(4, '0')\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {factoryTag} from './factory-tag.js'\n\n/**\n * @param {Acorn|undefined} acorn\n * @param {AcornOptions|undefined} acornOptions\n * @param {boolean|undefined} addResult\n * @returns {Construct}\n */\nexport function jsxFlow(acorn, acornOptions, addResult) {\n  return {tokenize: tokenizeJsxFlow, concrete: true}\n\n  /** @type {Tokenizer} */\n  function tokenizeJsxFlow(effects, ok, nok) {\n    const self = this\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.lessThan, 'expected `<`')\n      return factoryTag.call(\n        self,\n        effects,\n        factorySpace(effects, after, types.whitespace),\n        nok,\n        acorn,\n        acornOptions,\n        addResult,\n        false,\n        'mdxJsxFlowTag',\n        'mdxJsxFlowTagMarker',\n        'mdxJsxFlowTagClosingMarker',\n        'mdxJsxFlowTagSelfClosingMarker',\n        'mdxJsxFlowTagName',\n        'mdxJsxFlowTagNamePrimary',\n        'mdxJsxFlowTagNameMemberMarker',\n        'mdxJsxFlowTagNameMember',\n        'mdxJsxFlowTagNamePrefixMarker',\n        'mdxJsxFlowTagNameLocal',\n        'mdxJsxFlowTagExpressionAttribute',\n        'mdxJsxFlowTagExpressionAttributeMarker',\n        'mdxJsxFlowTagExpressionAttributeValue',\n        'mdxJsxFlowTagAttribute',\n        'mdxJsxFlowTagAttributeName',\n        'mdxJsxFlowTagAttributeNamePrimary',\n        'mdxJsxFlowTagAttributeNamePrefixMarker',\n        'mdxJsxFlowTagAttributeNameLocal',\n        'mdxJsxFlowTagAttributeInitializerMarker',\n        'mdxJsxFlowTagAttributeValueLiteral',\n        'mdxJsxFlowTagAttributeValueLiteralMarker',\n        'mdxJsxFlowTagAttributeValueLiteralValue',\n        'mdxJsxFlowTagAttributeValueExpression',\n        'mdxJsxFlowTagAttributeValueExpressionMarker',\n        'mdxJsxFlowTagAttributeValueExpressionValue'\n      )(code)\n    }\n\n    /** @type {State} */\n    function after(code) {\n      // Another tag.\n      return code === codes.lessThan\n        ? start(code)\n        : code === codes.eof || markdownLineEnding(code)\n        ? ok(code)\n        : nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\nimport {factoryTag} from './factory-tag.js'\n\n/**\n * @param {Acorn|undefined} acorn\n * @param {AcornOptions|undefined} acornOptions\n * @param {boolean|undefined} addResult\n * @returns {Construct}\n */\nexport function jsxText(acorn, acornOptions, addResult) {\n  return {tokenize: tokenizeJsxText}\n\n  /** @type {Tokenizer} */\n  function tokenizeJsxText(effects, ok, nok) {\n    return factoryTag.call(\n      this,\n      effects,\n      ok,\n      nok,\n      acorn,\n      acornOptions,\n      addResult,\n      true,\n      'mdxJsxTextTag',\n      'mdxJsxTextTagMarker',\n      'mdxJsxTextTagClosingMarker',\n      'mdxJsxTextTagSelfClosingMarker',\n      'mdxJsxTextTagName',\n      'mdxJsxTextTagNamePrimary',\n      'mdxJsxTextTagNameMemberMarker',\n      'mdxJsxTextTagNameMember',\n      'mdxJsxTextTagNamePrefixMarker',\n      'mdxJsxTextTagNameLocal',\n      'mdxJsxTextTagExpressionAttribute',\n      'mdxJsxTextTagExpressionAttributeMarker',\n      'mdxJsxTextTagExpressionAttributeValue',\n      'mdxJsxTextTagAttribute',\n      'mdxJsxTextTagAttributeName',\n      'mdxJsxTextTagAttributeNamePrimary',\n      'mdxJsxTextTagAttributeNamePrefixMarker',\n      'mdxJsxTextTagAttributeNameLocal',\n      'mdxJsxTextTagAttributeInitializerMarker',\n      'mdxJsxTextTagAttributeValueLiteral',\n      'mdxJsxTextTagAttributeValueLiteralMarker',\n      'mdxJsxTextTagAttributeValueLiteralValue',\n      'mdxJsxTextTagAttributeValueExpression',\n      'mdxJsxTextTagAttributeValueExpressionMarker',\n      'mdxJsxTextTagAttributeValueExpressionValue'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-factory-mdx-expression').Acorn} Acorn\n * @typedef {import('micromark-factory-mdx-expression').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n * @property {boolean} [addResult=false]\n * @property {Acorn} [acorn]\n * @property {AcornOptions} [acornOptions]\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {jsxText} from './jsx-text.js'\nimport {jsxFlow} from './jsx-flow.js'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function mdxJsx(options = {}) {\n  const acorn = options.acorn\n  /** @type {AcornOptions|undefined} */\n  let acornOptions\n\n  if (acorn) {\n    if (!acorn.parse || !acorn.parseExpressionAt) {\n      throw new Error(\n        'Expected a proper `acorn` instance passed in as `options.acorn`'\n      )\n    }\n\n    acornOptions = Object.assign(\n      {ecmaVersion: 2020, sourceType: 'module'},\n      options.acornOptions,\n      {locations: true}\n    )\n  } else if (options.acornOptions || options.addResult) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  return {\n    flow: {[codes.lessThan]: jsxFlow(acorn, acornOptions, options.addResult)},\n    text: {[codes.lessThan]: jsxText(acorn, acornOptions, options.addResult)}\n  }\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * @type {import('micromark-util-types').Extension}\n */\nexport const mdxMd = {\n  disable: {null: ['autolink', 'codeIndented', 'htmlFlow', 'htmlText']}\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n *\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n */\n\n/**\n * @typedef Options\n * @property {boolean} [addResult=false]\n * @property {Acorn} acorn\n * @property {AcornOptions} [acornOptions]\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {blankLine} from 'micromark-core-commonmark'\nimport {markdownLineEnding, unicodeWhitespace} from 'micromark-util-character'\nimport {eventsToAcorn} from 'micromark-util-events-to-acorn'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {VFileMessage} from 'vfile-message'\n\nconst nextBlankConstruct = {tokenize: tokenizeNextBlank, partial: true}\n\nconst allowedAcornTypes = new Set([\n  'ExportAllDeclaration',\n  'ExportDefaultDeclaration',\n  'ExportNamedDeclaration',\n  'ImportDeclaration'\n])\n\n/**\n * @param {Options} options\n * @returs {Extension}\n */\nexport function mdxjsEsm(options) {\n  const exportImportConstruct = {tokenize: tokenizeExportImport, concrete: true}\n\n  if (!options || !options.acorn || !options.acorn.parse) {\n    throw new Error('Expected an `acorn` instance passed in as `options.acorn`')\n  }\n\n  const acorn = options.acorn\n  const acornOptions = Object.assign(\n    {ecmaVersion: 2020, sourceType: 'module'},\n    options.acornOptions\n  )\n\n  return {\n    flow: {\n      [codes.lowercaseE]: exportImportConstruct,\n      [codes.lowercaseI]: exportImportConstruct\n    }\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeExportImport(effects, ok, nok) {\n    const self = this\n    /** @type {string[]} */\n    const definedModuleSpecifiers =\n      // @ts-expect-error: hush\n      self.parser.definedModuleSpecifiers ||\n      // @ts-expect-error: hush\n      (self.parser.definedModuleSpecifiers = [])\n    const eventStart = this.events.length + 1 // Add the main `mdxjsEsm` token\n    let index = 0\n    /** @type {string} */\n    let buffer\n\n    return self.interrupt ? nok : start\n\n    /** @type {State} */\n    function start(code) {\n      assert(\n        code === codes.lowercaseE || code === codes.lowercaseI,\n        'expected `e` or `i`'\n      )\n\n      // Do not support indent (the easiest check for containers).\n      if (self.now().column > 1) return nok(code)\n      buffer = code === codes.lowercaseE ? 'export' : 'import'\n      effects.enter('mdxjsEsm')\n      effects.enter('mdxjsEsmData')\n      return keyword(code)\n    }\n\n    /** @type {State} */\n    function keyword(code) {\n      if (code === buffer.charCodeAt(index++)) {\n        effects.consume(code)\n        return index === buffer.length ? after : keyword\n      }\n\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function after(code) {\n      if (unicodeWhitespace(code)) {\n        effects.consume(code)\n        return rest\n      }\n\n      return nok(code)\n    }\n\n    /** @type {State} */\n    function rest(code) {\n      if (code === codes.eof) {\n        return atEnd(code)\n      }\n\n      if (markdownLineEnding(code)) {\n        return effects.check(nextBlankConstruct, atEnd, atEol)(code)\n      }\n\n      effects.consume(code)\n      return rest\n    }\n\n    /** @type {State} */\n    function atEol(code) {\n      effects.exit('mdxjsEsmData')\n      return lineStart(code)\n    }\n\n    /** @type {State} */\n    function lineStart(code) {\n      if (markdownLineEnding(code)) {\n        effects.enter(types.lineEnding)\n        effects.consume(code)\n        effects.exit(types.lineEnding)\n        return lineStart\n      }\n\n      effects.enter('mdxjsEsmData')\n      return rest(code)\n    }\n\n    /** @type {State} */\n    function atEnd(code) {\n      effects.exit('mdxjsEsmData')\n\n      let index = -1\n      const result = eventsToAcorn(self.events.slice(eventStart), {\n        acorn,\n        acornOptions,\n        prefix:\n          definedModuleSpecifiers.length > 0\n            ? 'var ' + definedModuleSpecifiers.join(',') + '\\n'\n            : ''\n      })\n\n      if (code !== codes.eof && result.swallow) {\n        return lineStart(code)\n      }\n\n      if (result.error) {\n        throw new VFileMessage(\n          'Could not parse import/exports with acorn: ' + String(result.error),\n          {\n            // @ts-expect-error: hush\n            line: result.error.loc.line,\n            // @ts-expect-error: hush\n            column: result.error.loc.column + 1,\n            // @ts-expect-error: hush\n            offset: result.error.pos\n          },\n          'micromark-extension-mdxjs-esm:acorn'\n        )\n      }\n\n      assert(result.estree, 'expected `estree` to be defined')\n\n      // Remove the `VariableDeclaration`\n      if (definedModuleSpecifiers.length > 0) {\n        result.estree.body.shift()\n      }\n\n      while (++index < result.estree.body.length) {\n        const node = result.estree.body[index]\n\n        if (!allowedAcornTypes.has(node.type)) {\n          throw new VFileMessage(\n            'Unexpected `' +\n              node.type +\n              '` in code: only import/exports are supported',\n            positionFromEstree(node),\n            'micromark-extension-mdxjs-esm:non-esm'\n          )\n        }\n\n        // Otherwise, when we’re not interrupting (hacky, because `interrupt` is\n        // used to parse containers and “sniff” if this is ESM), collect all the\n        // local values that are imported.\n        if (node.type === 'ImportDeclaration' && !self.interrupt) {\n          let index = -1\n\n          while (++index < node.specifiers.length) {\n            definedModuleSpecifiers.push(node.specifiers[index].local.name)\n          }\n        }\n      }\n\n      Object.assign(\n        effects.exit('mdxjsEsm'),\n        options.addResult ? {estree: result.estree} : undefined\n      )\n\n      return ok(code)\n    }\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.exit('mdxjsEsmData')\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-extension-mdx-expression').Options} Options\n */\n\nimport {Parser} from 'acorn'\n// @ts-expect-error: untyped\nimport acornJsx from 'acorn-jsx'\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {mdxExpression} from 'micromark-extension-mdx-expression'\nimport {mdxJsx} from 'micromark-extension-mdx-jsx'\nimport {mdxMd} from 'micromark-extension-mdx-md'\nimport {mdxjsEsm} from 'micromark-extension-mdxjs-esm'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function mdxjs(options) {\n  const settings = Object.assign(\n    {\n      acorn: Parser.extend(acornJsx()),\n      acornOptions: {ecmaVersion: 2020, sourceType: 'module'},\n      addResult: true\n    },\n    options\n  )\n\n  return combineExtensions([\n    mdxjsEsm(settings),\n    mdxExpression(settings),\n    mdxJsx(settings),\n    mdxMd\n  ])\n}\n","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords$1 = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords[name] = new TokenType(name, options)\n}\n\nvar types$1 = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  privateId: new TokenType(\"privateId\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nfunction nextLineBreak(code, from, end) {\n  if ( end === void 0 ) end = code.length;\n\n  for (var i = from; i < end; i++) {\n    var next = code.charCodeAt(i);\n    if (isNewLine(next))\n      { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n  }\n  return -1\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\nvar hasOwn = Object.hasOwn || (function (obj, propName) { return (\n  hasOwnProperty.call(obj, propName)\n); });\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    var nextBreak = nextLineBreak(input, cur, offset);\n    if (nextBreak < 0) { return new Position(line, offset - cur) }\n    ++line;\n    cur = nextBreak;\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), 13 (2022), or `\"latest\"` (the\n  // latest version the library supports). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program, and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false,\n  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null,\n  // When enabled, super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128,\n    SCOPE_CLASS_STATIC_BLOCK = 256,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types$1.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition, all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\n\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\nprototypeAccessors.allowNewDotTarget.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n};\n\nprototypeAccessors.inClassStaticBlock.get = function () {\n  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n};\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp$9 = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp$9.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp$9.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp$9.isContextual = function(name) {\n  return this.type === types$1.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp$9.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp$9.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp$9.canInsertSemicolon = function() {\n  return this.type === types$1.eof ||\n    this.type === types$1.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp$9.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp$9.semicolon = function() {\n  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp$9.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp$9.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp$9.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp$9.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp$9.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$8 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$8.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types$1.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$8.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, after;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$8.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types$1._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types$1._debugger: return this.parseDebuggerStatement(node)\n  case types$1._do: return this.parseDoStatement(node)\n  case types$1._for: return this.parseForStatement(node)\n  case types$1._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types$1._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types$1._if: return this.parseIfStatement(node)\n  case types$1._return: return this.parseReturnStatement(node)\n  case types$1._switch: return this.parseSwitchStatement(node)\n  case types$1._throw: return this.parseThrowStatement(node)\n  case types$1._try: return this.parseTryStatement(node)\n  case types$1._const: case types$1._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types$1._while: return this.parseWhileStatement(node)\n  case types$1._with: return this.parseWithStatement(node)\n  case types$1.braceL: return this.parseBlock(true, node)\n  case types$1.semi: return this.parseEmptyStatement(node)\n  case types$1._export:\n  case types$1._import:\n    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$8.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types$1.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$8.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$8.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types$1._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types$1.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$8.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types$1.parenL);\n  if (this.type === types$1.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types$1._var || this.type === types$1._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types$1._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$8.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$8.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$8.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types$1.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types$1.braceR;) {\n    if (this.type === types$1._case || this.type === types$1._default) {\n      var isCase = this.type === types$1._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types$1.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$8.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty$1 = [];\n\npp$8.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types$1._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types$1.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types$1.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$8.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$8.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$8.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$8.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$8.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types$1.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$8.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types$1.semi);\n  node.test = this.type === types$1.semi ? null : this.parseExpression();\n  this.expect(types$1.semi);\n  node.update = this.type === types$1.parenR ? null : this.parseExpression();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$8.parseForIn = function(node, init) {\n  var isForIn = this.type === types$1._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$8.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types$1.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types$1.comma)) { break }\n  }\n  return node\n};\n\npp$8.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types$1.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$8.parseFunctionParams = function(node) {\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$8.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types$1.braceL);\n  while (this.type !== types$1.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n        this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.exitClassBody();\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$8.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types$1.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = \"\";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = \"method\";\n  var isStatic = false;\n\n  if (this.eatContextual(\"static\")) {\n    // Parse static init block\n    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n      this.parseClassStaticBlock(node);\n      return node\n    }\n    if (this.isClassElementNameStart() || this.type === types$1.star) {\n      isStatic = true;\n    } else {\n      keyName = \"static\";\n    }\n  }\n  node.static = isStatic;\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = \"async\";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key, \"Identifier\");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n    node.kind = isConstructor ? \"constructor\" : kind;\n    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$8.isClassElementNameStart = function() {\n  return (\n    this.type === types$1.name ||\n    this.type === types$1.privateId ||\n    this.type === types$1.num ||\n    this.type === types$1.string ||\n    this.type === types$1.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$8.parseClassElementName = function(element) {\n  if (this.type === types$1.privateId) {\n    if (this.value === \"constructor\") {\n      this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === \"constructor\") {\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n  } else if (method.static && checkKeyName(method, \"prototype\")) {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n  // Check value\n  if (method.kind === \"get\" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$8.parseClassField = function(field) {\n  if (checkKeyName(field, \"constructor\")) {\n    this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n  } else if (field.static && checkKeyName(field, \"prototype\")) {\n    this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n  }\n\n  if (this.eat(types$1.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field, \"PropertyDefinition\")\n};\n\npp$8.parseClassStaticBlock = function(node) {\n  node.body = [];\n\n  var oldLabels = this.labels;\n  this.labels = [];\n  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  this.next();\n  this.exitScope();\n  this.labels = oldLabels;\n\n  return this.finishNode(node, \"StaticBlock\")\n};\n\npp$8.parseClassId = function(node, isStatement) {\n  if (this.type === types$1.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$8.parseClassSuper = function(node) {\n  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null;\n};\n\npp$8.enterClassBody = function() {\n  var element = {declared: Object.create(null), used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$8.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!hasOwn(declared, id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap, element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = \"true\";\n  if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n    next = (element.static ? \"s\" : \"i\") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === \"iget\" && next === \"iset\" ||\n    curr === \"iset\" && next === \"iget\" ||\n    curr === \"sget\" && next === \"sset\" ||\n    curr === \"sset\" && next === \"sget\"\n  ) {\n    privateNameMap[name] = \"true\";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node, name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === \"Identifier\" && key.name === name ||\n    key.type === \"Literal\" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$8.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types$1.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types$1._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types$1._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n\n        if (spec.local.type === \"Literal\") {\n          this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$8.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (hasOwn(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$8.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$8.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$8.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$8.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(\n      exports,\n      node.exported[node.exported.type === \"Identifier\" ? \"name\" : \"value\"],\n      node.exported.start\n    );\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$8.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types$1.string) {\n    node.specifiers = empty$1;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$8.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types$1.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types$1.comma)) { return nodes }\n  }\n  if (this.type === types$1.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLValSimple(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLValSimple(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\npp$8.parseModuleExportName = function() {\n  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n    var stringLiteral = this.parseLiteral(this.value);\n    if (loneSurrogate.test(stringLiteral.value)) {\n      this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n    }\n    return stringLiteral\n  }\n  return this.parseIdent(true)\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$8.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$7 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$7.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$7.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$7.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$7.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types$1.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types$1.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types$1.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types$1.comma); }\n    if (allowEmpty && this.type === types$1.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types$1.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$7.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (hasOwn(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n};\n\npp$6.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types.f_expr || parent === types.f_stat)\n    { return true }\n  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n    { return true }\n  if (prevType === types$1.braceL)\n    { return parent === types.b_stat }\n  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$6.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types$1.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Used to handle egde case when token context could not be inferred correctly in tokenize phase\npp$6.overrideContext = function(tokenCtx) {\n  if (this.curContext() !== tokenCtx) {\n    this.context[this.context.length - 1] = tokenCtx;\n  }\n};\n\n// Token-specific context update code\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes$1.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types$1._else &&\n      !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n    { this.context.push(types.f_expr); }\n  else\n    { this.context.push(types.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes$1.star.updateContext = function(prevType) {\n  if (prevType === types$1._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types.f_expr)\n      { this.context[index] = types.f_expr_gen; }\n    else\n      { this.context[index] = types.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes$1.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$5 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0) {\n            refDestructuringErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n        }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$5.parseExpression = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n  if (this.type === types$1.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldDoubleProto = refDestructuringErrors.doubleProto;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types$1.parenL || this.type === types$1.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === \"await\";\n  }\n  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types$1.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types$1.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types$1.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types$1.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types$1._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n      var coalesce = this.type === types$1.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types$1.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n    }\n  }\n  return left\n};\n\npp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && this.canAwait) {\n    expr = this.parseAwait(forInit);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types$1.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, update, forInit);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (!sawUnary && this.type === types$1.privateId) {\n    if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }\n    expr = this.parsePrivateIdent();\n    // only could be private fields in 'in', such as #x in obj\n    if (this.type !== types$1._in) { this.unexpected(); }\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!incDec && this.eat(types$1.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n    node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types$1.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types$1.bracketL);\n  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types$1.bracketR);\n    } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types$1.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types$1.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$5.parseExprAtom = function(refDestructuringErrors, forInit) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types$1.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types$1._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types$1.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types$1._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types$1.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n      this.overrideContext(types.f_expr);\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n    }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types$1.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n      }\n    }\n    return id\n\n  case types$1.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types$1.num: case types$1.string:\n    return this.parseLiteral(this.value)\n\n  case types$1._null: case types$1._true: case types$1._false:\n    node = this.startNode();\n    node.value = this.type === types$1._null ? null : this.type === types$1._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types$1.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types$1.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types$1.braceL:\n    this.overrideContext(types.b_expr);\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types$1._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types$1._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types$1._new:\n    return this.parseNew()\n\n  case types$1.backQuote:\n    return this.parseTemplate()\n\n  case types$1._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types$1.parenL:\n    return this.parseDynamicImport(node)\n  case types$1.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types$1.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$5.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$5.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$5.parseParenExpression = function() {\n  this.expect(types$1.parenL);\n  var val = this.parseExpression();\n  this.expect(types$1.parenR);\n  return val\n};\n\npp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types$1.parenR) {\n      first ? first = false : this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types$1.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n    this.expect(types$1.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$5.parseParenItem = function(item) {\n  return item\n};\n\npp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp$5.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.allowNewDotTarget)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$5.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types$1.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types$1.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$5.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types$1.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types$1.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$5.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$5.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types$1.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types$1.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types$1.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types$1.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types$1.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types$1.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$5.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types$1.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$5.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n  var isExpression = isArrowFunction && this.type !== types$1.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign(forInit);\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$5.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$5.checkParams = function(node, allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types$1.comma)\n      { elt = null; }\n    else if (this.type === types$1.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$5.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n    { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n  if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n    { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$5.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types$1.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$5.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types$1.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"PrivateIdentifier\");\n\n  // For validating existence\n  if (this.privateNameStack.length === 0) {\n    this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n  } else {\n    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$5.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types$1.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$5.parseAwait = function(forInit) {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true, false, forInit);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$3 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$3.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$3.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$3.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$3.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$3.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$3.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$3.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$2 = Parser.prototype;\n\npp$2.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$2.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$2.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$2.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$2.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties,\n  13: ecma13BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues,\n  13: ecma13ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nfor (var i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {\n  var ecmaVersion = list[i];\n\n  buildUnicodeData(ecmaVersion);\n}\n\nvar pp$1 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$1.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$1.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$1.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!hasOwn(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Move to the next token\n\npp.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp[Symbol.iterator] = function() {\n    var this$1$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1$1.getToken();\n        return {\n          done: token.type === types$1.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n      ++this.curLine;\n      pos = this.lineStart = nextBreak;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types$1.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types$1.dot)\n  }\n};\n\npp.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.slash, 1)\n};\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types$1.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n};\n\npp.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.bitwiseXOR, 1)\n};\n\npp.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types$1.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.plusMin, 1)\n};\n\npp.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(types$1.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types$1.relational, size)\n};\n\npp.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types$1.arrow)\n  }\n  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n};\n\npp.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(types$1.coalesce, 2)\n    }\n  }\n  return this.finishOp(types$1.question, 1)\n};\n\npp.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n      return this.finishToken(types$1.privateId, this.readWord1())\n    }\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types$1.parenL)\n  case 41: ++this.pos; return this.finishToken(types$1.parenR)\n  case 59: ++this.pos; return this.finishToken(types$1.semi)\n  case 44: ++this.pos; return this.finishToken(types$1.comma)\n  case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n  case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n  case 123: ++this.pos; return this.finishToken(types$1.braceL)\n  case 125: ++this.pos; return this.finishToken(types$1.braceR)\n  case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types$1.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types$1.prefix, 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types$1.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types$1.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else if (ch === 0x2028 || ch === 0x2029) {\n      if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n      if (this.options.locations) {\n        this.curLine++;\n        this.lineStart = this.pos;\n      }\n    } else {\n      if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types$1.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types$1.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types$1.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types$1.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n\n    // falls through\n    case \"`\":\n      return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  var word = this.readWord1();\n  var type = types$1.name;\n  if (this.keywords.test(word)) {\n    type = keywords[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"8.7.0\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types$1,\n  keywordTypes: keywords,\n  TokContext: TokContext,\n  tokContexts: types,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types as tokContexts, types$1 as tokTypes, tokenizer, version };\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (code === codes.lessThan) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.rightParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return destinationRaw(code)\n  }\n\n  /** @type {State} */\n  function destinationEnclosedBefore(code) {\n    if (code === codes.greaterThan) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return destinationEnclosed(code)\n  }\n\n  /** @type {State} */\n  function destinationEnclosed(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      markdownLineEnding(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash\n      ? destinationEnclosedEscape\n      : destinationEnclosed\n  }\n\n  /** @type {State} */\n  function destinationEnclosedEscape(code) {\n    if (\n      code === codes.lessThan ||\n      code === codes.greaterThan ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n\n  /** @type {State} */\n  function destinationRaw(code) {\n    if (code === codes.leftParenthesis) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === codes.rightParenthesis) {\n      if (!balance--) {\n        effects.exit(types.chunkString)\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === codes.backslash ? destinationRawEscape : destinationRaw\n  }\n\n  /** @type {State} */\n  function destinationRawEscape(code) {\n    if (\n      code === codes.leftParenthesis ||\n      code === codes.rightParenthesis ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      (code === codes.rightSquareBracket && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n      /* Hidden footnotes hook */\n      /* c8 ignore next 3 */\n      (code === codes.caret &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > constants.linkReferenceSizeMax\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return atBreak\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return label(code)\n  }\n\n  /** @type {State} */\n  function label(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      markdownLineEnding(code) ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === codes.backslash ? labelEscape : label\n  }\n\n  /** @type {State} */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-events-to-acorn').Acorn} Acorn\n * @typedef {import('micromark-util-events-to-acorn').AcornOptions} AcornOptions\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {factorySpace} from 'micromark-factory-space'\nimport {positionFromEstree} from 'unist-util-position-from-estree'\nimport {VFileMessage} from 'vfile-message'\nimport {eventsToAcorn} from 'micromark-util-events-to-acorn'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {string} markerType\n * @param {string} chunkType\n * @param {Acorn} [acorn]\n * @param {AcornOptions} [acornOptions]\n * @param {boolean} [addResult=false]\n * @param {boolean} [spread=false]\n * @param {boolean} [allowEmpty=false]\n * @param {boolean} [allowLazy=false]\n * @param {number} [startColumn=0]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryMdxExpression(\n  effects,\n  ok,\n  type,\n  markerType,\n  chunkType,\n  acorn,\n  acornOptions,\n  addResult,\n  spread,\n  allowEmpty,\n  allowLazy,\n  startColumn\n) {\n  const self = this\n  const eventStart = this.events.length + 3 // Add main and marker token\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  const prefixExpressionIndent = initialPrefix ? initialPrefix + 1 : 0\n  let balance = 1\n  /** @type {Point} */\n  let startPosition\n  /** @type {Error} */\n  let lastCrash\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftCurlyBrace, 'expected `{`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    startPosition = self.now()\n    return atBreak\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === codes.eof) {\n      throw (\n        lastCrash ||\n        new VFileMessage(\n          'Unexpected end of file in expression, expected a corresponding closing brace for `{`',\n          self.now(),\n          'micromark-extension-mdx-expression:unexpected-eof'\n        )\n      )\n    }\n\n    if (code === codes.rightCurlyBrace) {\n      return atClosingBrace(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      // `startColumn` is used by the JSX extensions that also wraps this\n      // factory.\n      // JSX can be indented arbitrarily, but expressions can’t exdent\n      // arbitrarily, due to that they might contain template strings\n      // (backticked strings).\n      // We’ll eat up to where that tag starts (`startColumn`), and a tab size.\n      /* c8 ignore next 3 */\n      const prefixTagIndent = startColumn\n        ? startColumn + constants.tabSize - self.now().column\n        : 0\n      const indent = Math.max(prefixExpressionIndent, prefixTagIndent)\n      return indent\n        ? factorySpace(effects, atBreak, types.linePrefix, indent)\n        : atBreak\n    }\n\n    const now = self.now()\n\n    if (\n      now.line !== startPosition.line &&\n      !allowLazy &&\n      self.parser.lazy[now.line]\n    ) {\n      throw new VFileMessage(\n        'Unexpected end of file in expression, expected a corresponding closing brace for `{`',\n        self.now(),\n        'micromark-extension-mdx-expression:unexpected-eof'\n      )\n    }\n\n    effects.enter(chunkType)\n    return inside(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (\n      code === codes.eof ||\n      code === codes.rightCurlyBrace ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(chunkType)\n      return atBreak(code)\n    }\n\n    if (code === codes.leftCurlyBrace && !acorn) {\n      effects.consume(code)\n      balance++\n      return inside\n    }\n\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function atClosingBrace(code) {\n    balance--\n\n    // Agnostic mode: count balanced braces.\n    if (!acorn) {\n      if (balance) {\n        effects.enter(chunkType)\n        effects.consume(code)\n        return inside\n      }\n\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // Gnostic mode: parse w/ acorn.\n    const result = eventsToAcorn(self.events.slice(eventStart), {\n      acorn,\n      acornOptions,\n      start: startPosition,\n      expression: true,\n      allowEmpty,\n      prefix: spread ? '({' : '',\n      suffix: spread ? '})' : ''\n    })\n    const estree = result.estree\n\n    // Get the spread value.\n    if (spread && estree) {\n      // Should always be the case as we wrap in `d={}`\n      assert(estree.type === 'Program', 'expected program')\n      const head = estree.body[0]\n      assert(head, 'expected body')\n\n      // Can occur in some complex attributes.\n      /* c8 ignore next 11 */\n      if (\n        head.type !== 'ExpressionStatement' ||\n        head.expression.type !== 'ObjectExpression'\n      ) {\n        throw new VFileMessage(\n          'Unexpected `' +\n            head.type +\n            '` in code: expected an object spread (`{...spread}`)',\n          positionFromEstree(head).start,\n          'micromark-extension-mdx-expression:non-spread'\n        )\n      } else if (head.expression.properties[1]) {\n        throw new VFileMessage(\n          'Unexpected extra content in spread: only a single spread is supported',\n          positionFromEstree(head.expression.properties[1]).start,\n          'micromark-extension-mdx-expression:spread-extra'\n        )\n      } else if (\n        head.expression.properties[0] &&\n        head.expression.properties[0].type !== 'SpreadElement'\n      ) {\n        throw new VFileMessage(\n          'Unexpected `' +\n            head.expression.properties[0].type +\n            '` in code: only spread elements are supported',\n          positionFromEstree(head.expression.properties[0]).start,\n          'micromark-extension-mdx-expression:non-spread'\n        )\n      }\n    }\n\n    if (result.error) {\n      lastCrash = new VFileMessage(\n        'Could not parse expression with acorn: ' + result.error.message,\n        {\n          // @ts-expect-error: fine.\n          line: result.error.loc.line,\n          // @ts-expect-error: fine.\n          column: result.error.loc.column + 1,\n          // @ts-expect-error: fine.\n          offset: result.error.pos\n        },\n        'micromark-extension-mdx-expression:acorn'\n      )\n\n      if (code !== codes.eof && result.swallow) {\n        effects.enter(chunkType)\n        effects.consume(code)\n        return inside\n      }\n\n      throw lastCrash\n    }\n\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    Object.assign(effects.exit(type), addResult ? {estree} : undefined)\n    return ok\n  }\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.quotationMark ||\n        code === codes.apostrophe ||\n        code === codes.leftParenthesis,\n      'expected `\"`, `\\'`, or `(`'\n    )\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n    return atFirstTitleBreak\n  }\n\n  /** @type {State} */\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n\n  /** @type {State} */\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atTitleBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return title(code)\n  }\n\n  /** @type {State} */\n  function title(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? titleEscape : title\n  }\n\n  /** @type {State} */\n  function titleEscape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? types.linePrefix : types.lineSuffix\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < codes.space || code === codes.del)\n  )\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < codes.nul || code === codes.space)\n}\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < codes.horizontalTab\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\nexport function markdownSpace(code) {\n  return (\n    code === codes.horizontalTab ||\n    code === codes.virtualSpace ||\n    code === codes.space\n  )\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","import {constants} from 'micromark-util-symbol/constants.js'\n\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < constants.v8MaxSafeChunkSize) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove])\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(\n        chunkStart,\n        chunkStart + constants.v8MaxSafeChunkSize\n      )\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n\n      chunkStart += constants.v8MaxSafeChunkSize\n      start += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === codes.eof ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return constants.characterGroupWhitespace\n  }\n\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","import {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < codes.ht ||\n    code === codes.vt ||\n    (code > codes.cr && code < codes.space) ||\n    // Control character (DEL) of the basic block and C1 controls.\n    (code > codes.tilde && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 ||\n    // Out of range\n    code > 1114111\n  ) {\n    return values.replacementCharacter\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\n\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n\n  if (head === codes.numberSign) {\n    const head = $2.charCodeAt(1)\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX\n    return decodeNumericCharacterReference(\n      $2.slice(hex ? 2 : 1),\n      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal\n    )\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n * @returns {string}\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('acorn').Options} AcornOptions\n * @typedef {import('acorn').Comment} Comment\n * @typedef {import('acorn').Node} Node\n * @typedef {import('estree').Program} Program\n */\n\n/**\n * @typedef {{parse: import('acorn').parse, parseExpressionAt: import('acorn').parseExpressionAt}} Acorn\n *\n * @typedef {Error & {raisedAt: number, pos: number, loc: {line: number, column: number}}} AcornError\n */\n\n/**\n * @typedef Options\n * @property {Acorn} acorn\n * @property {AcornOptions} [acornOptions]\n * @property {Point} [start]\n * @property {string} [prefix='']\n * @property {string} [suffix='']\n * @property {boolean} [expression=false]\n * @property {boolean} [allowEmpty=false]\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {visit} from 'estree-util-visit'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Parse a list of micromark events with acorn.\n *\n * @param {Event[]} events\n * @param {Options} options\n * @returns {{estree: Program|undefined, error: Error|undefined, swallow: boolean}}\n */\nexport function eventsToAcorn(events, options) {\n  const {prefix = '', suffix = ''} = options\n  /** @type {Array.<Comment>} */\n  const comments = []\n  const acornConfig = Object.assign({}, options.acornOptions, {\n    onComment: comments,\n    preserveParens: true\n  })\n  /** @type {Array.<string>} */\n  const chunks = []\n  /** @type {Record<string, Point>} */\n  const lines = {}\n  let index = -1\n  let swallow = false\n  /** @type {Node|undefined} */\n  let estree\n  /** @type {Error|undefined} */\n  let exception\n  /** @type {number|undefined} */\n  let mdStartOffset\n\n  if (options.start) {\n    mdStartOffset = options.start.offset\n    lines[options.start.line] = options.start\n  }\n\n  // Assume only void events (and `enter` followed immediately by an `exit`).\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (events[index][0] === 'exit') {\n      chunks.push(events[index][2].sliceSerialize(token))\n\n      // Not passed by `micromark-extension-mdxjs-esm`\n      /* c8 ignore next 3 */\n      if (mdStartOffset === undefined) {\n        mdStartOffset = events[index][1].start.offset\n      }\n\n      if (\n        !(token.start.line in lines) ||\n        lines[token.start.line].offset > token.start.offset\n      ) {\n        lines[token.start.line] = token.start\n      }\n    }\n  }\n\n  const source = chunks.join('')\n  const value = prefix + source + suffix\n  const isEmptyExpression = options.expression && empty(source)\n\n  if (isEmptyExpression && !options.allowEmpty) {\n    throw new VFileMessage(\n      'Unexpected empty expression',\n      parseOffsetToUnistPoint(0),\n      'micromark-extension-mdx-expression:unexpected-empty-expression'\n    )\n  }\n\n  try {\n    estree =\n      options.expression && !isEmptyExpression\n        ? options.acorn.parseExpressionAt(value, 0, acornConfig)\n        : options.acorn.parse(value, acornConfig)\n  } catch (error_) {\n    const error = /** @type {AcornError} */ (error_)\n    const point = parseOffsetToUnistPoint(error.pos)\n    error.message = String(error.message).replace(/ \\(\\d+:\\d+\\)$/, '')\n    error.pos = point.offset\n    error.loc = {line: point.line, column: point.column - 1}\n    exception = error\n    swallow =\n      error.raisedAt >= prefix.length + source.length ||\n      // Broken comments are raised at their start, not their end.\n      error.message === 'Unterminated comment'\n  }\n\n  if (estree && options.expression && !isEmptyExpression) {\n    if (empty(value.slice(estree.end, value.length - suffix.length))) {\n      estree = {\n        type: 'Program',\n        start: 0,\n        end: prefix.length + source.length,\n        // @ts-expect-error: It’s good.\n        body: [\n          {\n            type: 'ExpressionStatement',\n            expression: estree,\n            start: 0,\n            end: prefix.length + source.length\n          }\n        ],\n        sourceType: 'module',\n        comments: []\n      }\n    } else {\n      const point = parseOffsetToUnistPoint(estree.end)\n      exception = new Error('Unexpected content after expression')\n      // @ts-expect-error: acorn exception.\n      exception.pos = point.offset\n      // @ts-expect-error: acorn exception.\n      exception.loc = {line: point.line, column: point.column - 1}\n      estree = undefined\n    }\n  }\n\n  if (estree) {\n    // @ts-expect-error: acorn *does* allow comments\n    estree.comments = comments\n\n    visit(estree, (esnode, field, index, parents) => {\n      let context = /** @type {Node|Node[]} */ (parents[parents.length - 1])\n      /** @type {string|number|null} */\n      let prop = field\n\n      // Remove non-standard `ParenthesizedExpression`.\n      if (esnode.type === 'ParenthesizedExpression' && context && prop) {\n        /* c8 ignore next 5 */\n        if (typeof index === 'number') {\n          // @ts-expect-error: indexable.\n          context = context[prop]\n          prop = index\n        }\n\n        // @ts-expect-error: indexable.\n        context[prop] = esnode.expression\n      }\n\n      assert('start' in esnode, 'expected `start` in node from acorn')\n      assert('end' in esnode, 'expected `end` in node from acorn')\n      // @ts-expect-error: acorn has positions.\n      const pointStart = parseOffsetToUnistPoint(esnode.start)\n      // @ts-expect-error: acorn has positions.\n      const pointEnd = parseOffsetToUnistPoint(esnode.end)\n      // @ts-expect-error: acorn has positions.\n      esnode.start = pointStart.offset\n      // @ts-expect-error: acorn has positions.\n      esnode.end = pointEnd.offset\n      // @ts-expect-error: acorn has positions.\n      esnode.loc = {\n        start: {line: pointStart.line, column: pointStart.column - 1},\n        end: {line: pointEnd.line, column: pointEnd.column - 1}\n      }\n      // @ts-expect-error: acorn has positions.\n      esnode.range = [esnode.start, esnode.end]\n    })\n  }\n\n  // @ts-expect-error: It’s a program now.\n  return {estree, error: exception, swallow}\n\n  /**\n   * @param {number} offset\n   * @returs {Point}\n   */\n  function parseOffsetToUnistPoint(offset) {\n    let srcOffset = offset - prefix.length\n    /** @type {string} */\n    let line\n    /** @type {Point|undefined} */\n    let lineStart\n\n    if (srcOffset < 0) {\n      srcOffset = 0\n    } else if (srcOffset > source.length) {\n      srcOffset = source.length\n    }\n\n    assert(mdStartOffset !== undefined, 'expected `mdStartOffset` to be found')\n    srcOffset += mdStartOffset\n\n    // Then, update it.\n    for (line in lines) {\n      if (own.call(lines, line)) {\n        // First line we find.\n        if (!lineStart) {\n          lineStart = lines[line]\n        }\n\n        if (lines[line].offset > offset) {\n          break\n        }\n\n        lineStart = lines[line]\n      }\n    }\n\n    assert(lineStart, 'expected `lineStart` to be defined')\n    return {\n      line: lineStart.line,\n      column: lineStart.column + (srcOffset - lineStart.offset),\n      offset: srcOffset\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return /^\\s*$/.test(\n    value\n      // Multiline comments.\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n      // Line comments.\n      // EOF instead of EOL is specifically not allowed, because that would\n      // mean the closing brace is on the commented-out line\n      .replace(/\\/\\/[^\\r\\n]*(\\r\\n|\\n|\\r)/g, '')\n  )\n}\n","var own = {}.hasOwnProperty\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|Position|Point} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    // @ts-ignore looks like a node.\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    // @ts-ignore looks like a position.\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    // @ts-ignore looks like a point.\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Constructor of a message for `reason` at `place` from `origin`.\n   * When an error is passed in as `reason`, copies the `stack`.\n   *\n   * @param {string|Error} reason Reason for message (`string` or `Error`). Uses the stack and message of the error if given.\n   * @param {Node|Position|Point} [place] Place at which the message occurred in a file (`Node`, `Position`, or `Point`, optional).\n   * @param {string} [origin] Place in code the message originates from (`string`, optional).\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string?, string?]} */\n    var parts = [null, null]\n    /** @type {Position} */\n    var position = {\n      start: {line: null, column: null},\n      end: {line: null, column: null}\n    }\n    /** @type {number} */\n    var index\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = null\n    }\n\n    if (typeof origin === 'string') {\n      index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-ignore Looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // @ts-ignore Looks like a point.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    this.message = typeof reason === 'object' ? reason.message : reason\n    this.stack = typeof reason === 'object' ? reason.stack : ''\n\n    /**\n     * Reason for message.\n     * @type {string}\n     */\n    this.reason = this.message\n    /**\n     * If true, marks associated file as no longer processable.\n     * @type {boolean?}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.fatal\n    /**\n     * Starting line of error.\n     * @type {number?}\n     */\n    this.line = position.start.line\n    /**\n     * Starting column of error.\n     * @type {number?}\n     */\n    this.column = position.start.column\n    /**\n     * Namespace of warning.\n     * @type {string?}\n     */\n    this.source = parts[0]\n    /**\n     * Category of message.\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n    /**\n     * Full range information, when available.\n     * Has start and end properties, both set to an object with line and column, set to number?.\n     * @type {Position?}\n     */\n    this.position = position\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * You can use this to specify the source value that’s being reported, which\n     * is deemed incorrect.\n     * @type {string?}\n     */\n    this.actual\n    /**\n     * You can use this to suggest values that should be used instead of\n     * `actual`, one or more values that are deemed as acceptable.\n     * @type {Array<string>?}\n     */\n    this.expected\n    /**\n     * You may add a file property with a path of a file (used throughout the VFile ecosystem).\n     * @type {string?}\n     */\n    this.file\n    /**\n     * You may add a url property with a link to documentation for the message.\n     * @type {string?}\n     */\n    this.url\n    /**\n     * You may add a note property with a long form description of the message (supported by vfile-reporter).\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.29/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.29/#html-blocks>.\n *\n * Note that `textarea` is not available in `CommonMark@0.29` but has been\n * merged to the primary branch and is slated to be released in the next release\n * of CommonMark.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","import {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, values.space)\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction normalizeUri(value) {\n  /** @type {string[]} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === codes.percentSign &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = values.replacementCharacter\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {splice} from 'micromark-util-chunked'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number|undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Event[]} */\n  let parameters\n  /** @type {Event[]} */\n  let subevents\n  /** @type {boolean|undefined} */\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === types.chunkFlow &&\n      events[index - 1][1].type === types.listItemPrefix\n    ) {\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.lineEndingBlank\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.content\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === types.content) {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === types.chunkText) {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === types.lineEnding ||\n          otherEvent[1].type === types.lineEndingBlank\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = types.lineEndingBlank\n            }\n\n            otherEvent[1].type = types.lineEnding\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n  const startPositions = []\n  assert(token.contentType, 'expected `contentType` on subtokens')\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Chunk[]} */\n  let stream\n  /** @type {Token|undefined} */\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    assert(\n      !previous || current.previous === previous,\n      'expected previous to match'\n    )\n    assert(!previous || previous.next === current, 'expected next to match')\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(codes.eof)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      assert(current, 'expected a current token')\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n    assert(!current.next, 'expected no next token')\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    assert(start !== undefined, 'expected a start position when splicing')\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * Character codes.\n *\n * This module is compiled away!\n *\n * micromark works based on character codes.\n * This module contains constants for the ASCII block and the replacement\n * character.\n * A couple of them are handled in a special way, such as the line endings\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\n * tab) and its expansion based on what column it’s at (virtual space),\n * and the end-of-file (eof) character.\n * As values are preprocessed before handling them, the actual characters LF,\n * CR, HT, and NUL (which is present as the replacement character), are\n * guaranteed to not exist.\n *\n * Unicode basic latin block.\n */\nexport const codes = {\n  carriageReturn: -5,\n  lineFeed: -4,\n  carriageReturnLineFeed: -3,\n  horizontalTab: -2,\n  virtualSpace: -1,\n  eof: null,\n  nul: 0,\n  soh: 1,\n  stx: 2,\n  etx: 3,\n  eot: 4,\n  enq: 5,\n  ack: 6,\n  bel: 7,\n  bs: 8,\n  ht: 9, // `\\t`\n  lf: 10, // `\\n`\n  vt: 11, // `\\v`\n  ff: 12, // `\\f`\n  cr: 13, // `\\r`\n  so: 14,\n  si: 15,\n  dle: 16,\n  dc1: 17,\n  dc2: 18,\n  dc3: 19,\n  dc4: 20,\n  nak: 21,\n  syn: 22,\n  etb: 23,\n  can: 24,\n  em: 25,\n  sub: 26,\n  esc: 27,\n  fs: 28,\n  gs: 29,\n  rs: 30,\n  us: 31,\n  space: 32,\n  exclamationMark: 33, // `!`\n  quotationMark: 34, // `\"`\n  numberSign: 35, // `#`\n  dollarSign: 36, // `$`\n  percentSign: 37, // `%`\n  ampersand: 38, // `&`\n  apostrophe: 39, // `'`\n  leftParenthesis: 40, // `(`\n  rightParenthesis: 41, // `)`\n  asterisk: 42, // `*`\n  plusSign: 43, // `+`\n  comma: 44, // `,`\n  dash: 45, // `-`\n  dot: 46, // `.`\n  slash: 47, // `/`\n  digit0: 48, // `0`\n  digit1: 49, // `1`\n  digit2: 50, // `2`\n  digit3: 51, // `3`\n  digit4: 52, // `4`\n  digit5: 53, // `5`\n  digit6: 54, // `6`\n  digit7: 55, // `7`\n  digit8: 56, // `8`\n  digit9: 57, // `9`\n  colon: 58, // `:`\n  semicolon: 59, // `;`\n  lessThan: 60, // `<`\n  equalsTo: 61, // `=`\n  greaterThan: 62, // `>`\n  questionMark: 63, // `?`\n  atSign: 64, // `@`\n  uppercaseA: 65, // `A`\n  uppercaseB: 66, // `B`\n  uppercaseC: 67, // `C`\n  uppercaseD: 68, // `D`\n  uppercaseE: 69, // `E`\n  uppercaseF: 70, // `F`\n  uppercaseG: 71, // `G`\n  uppercaseH: 72, // `H`\n  uppercaseI: 73, // `I`\n  uppercaseJ: 74, // `J`\n  uppercaseK: 75, // `K`\n  uppercaseL: 76, // `L`\n  uppercaseM: 77, // `M`\n  uppercaseN: 78, // `N`\n  uppercaseO: 79, // `O`\n  uppercaseP: 80, // `P`\n  uppercaseQ: 81, // `Q`\n  uppercaseR: 82, // `R`\n  uppercaseS: 83, // `S`\n  uppercaseT: 84, // `T`\n  uppercaseU: 85, // `U`\n  uppercaseV: 86, // `V`\n  uppercaseW: 87, // `W`\n  uppercaseX: 88, // `X`\n  uppercaseY: 89, // `Y`\n  uppercaseZ: 90, // `Z`\n  leftSquareBracket: 91, // `[`\n  backslash: 92, // `\\`\n  rightSquareBracket: 93, // `]`\n  caret: 94, // `^`\n  underscore: 95, // `_`\n  graveAccent: 96, // `` ` ``\n  lowercaseA: 97, // `a`\n  lowercaseB: 98, // `b`\n  lowercaseC: 99, // `c`\n  lowercaseD: 100, // `d`\n  lowercaseE: 101, // `e`\n  lowercaseF: 102, // `f`\n  lowercaseG: 103, // `g`\n  lowercaseH: 104, // `h`\n  lowercaseI: 105, // `i`\n  lowercaseJ: 106, // `j`\n  lowercaseK: 107, // `k`\n  lowercaseL: 108, // `l`\n  lowercaseM: 109, // `m`\n  lowercaseN: 110, // `n`\n  lowercaseO: 111, // `o`\n  lowercaseP: 112, // `p`\n  lowercaseQ: 113, // `q`\n  lowercaseR: 114, // `r`\n  lowercaseS: 115, // `s`\n  lowercaseT: 116, // `t`\n  lowercaseU: 117, // `u`\n  lowercaseV: 118, // `v`\n  lowercaseW: 119, // `w`\n  lowercaseX: 120, // `x`\n  lowercaseY: 121, // `y`\n  lowercaseZ: 122, // `z`\n  leftCurlyBrace: 123, // `{`\n  verticalBar: 124, // `|`\n  rightCurlyBrace: 125, // `}`\n  tilde: 126, // `~`\n  del: 127,\n  // Unicode Specials block.\n  byteOrderMarker: 65279,\n  // Unicode Specials block.\n  replacementCharacter: 65533 // `�`\n}\n","/**\n * This module is compiled away!\n *\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\n * sizes of certain sequences.\n * Additionally, there are a couple symbols used inside micromark.\n * These are all defined here, but compiled away by scripts.\n */\nexport const constants = {\n  attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`\n  attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`\n  atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.\n  autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.\n  autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.\n  cdataOpeningString: 'CDATA[', // And preceded by `<![`.\n  characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace\n  characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation\n  characterReferenceDecimalSizeMax: 7, // `&#9999999;`.\n  characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.\n  characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.\n  codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.\n  contentTypeDocument: 'document',\n  contentTypeFlow: 'flow',\n  contentTypeContent: 'content',\n  contentTypeString: 'string',\n  contentTypeText: 'text',\n  hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.\n  htmlRaw: 1, // Symbol for `<script>`\n  htmlComment: 2, // Symbol for `<!---->`\n  htmlInstruction: 3, // Symbol for `<?php?>`\n  htmlDeclaration: 4, // Symbol for `<!doctype>`\n  htmlCdata: 5, // Symbol for `<![CDATA[]]>`\n  htmlBasic: 6, // Symbol for `<div`\n  htmlComplete: 7, // Symbol for `<x>`\n  htmlRawSizeMax: 8, // Length of `textarea`.\n  linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>\n  linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>\n  listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>\n  numericBaseDecimal: 10,\n  numericBaseHexadecimal: 0x10,\n  tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.\n  thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.\n  v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\n}\n","/**\n * This module is compiled away!\n *\n * Here is the list of all types of tokens exposed by micromark, with a short\n * explanation of what they include and where they are found.\n * In picking names, generally, the rule is to be as explicit as possible\n * instead of reusing names.\n * For example, there is a `definitionDestination` and a `resourceDestination`,\n * instead of one shared name.\n */\n\nexport const types = {\n  // Generic type for data, such as in a title, a destination, etc.\n  data: 'data',\n\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\n  // Such as, between a fenced code fence and an info string.\n  whitespace: 'whitespace',\n\n  // Generic type for line endings (line feed, carriage return, carriage return +\n  // line feed).\n  lineEnding: 'lineEnding',\n\n  // A line ending, but ending a blank line.\n  lineEndingBlank: 'lineEndingBlank',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\n  // line.\n  linePrefix: 'linePrefix',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\n  // line.\n  lineSuffix: 'lineSuffix',\n\n  // Whole ATX heading:\n  //\n  // ```markdown\n  // #\n  // ## Alpha\n  // ### Bravo ###\n  // ```\n  //\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\n  atxHeading: 'atxHeading',\n\n  // Sequence of number signs in an ATX heading (`###`).\n  atxHeadingSequence: 'atxHeadingSequence',\n\n  // Content in an ATX heading (`alpha`).\n  // Includes text.\n  atxHeadingText: 'atxHeadingText',\n\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\n  autolink: 'autolink',\n\n  // Email autolink w/o markers (`admin@example.com`)\n  autolinkEmail: 'autolinkEmail',\n\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\n  autolinkMarker: 'autolinkMarker',\n\n  // Protocol autolink w/o markers (`https://example.com`)\n  autolinkProtocol: 'autolinkProtocol',\n\n  // A whole character escape (`\\-`).\n  // Includes `escapeMarker` and `characterEscapeValue`.\n  characterEscape: 'characterEscape',\n\n  // The escaped character (`-`).\n  characterEscapeValue: 'characterEscapeValue',\n\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\n  // Includes `characterReferenceMarker`, an optional\n  // `characterReferenceMarkerNumeric`, in which case an optional\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\n  characterReference: 'characterReference',\n\n  // The start or end marker (`&` or `;`).\n  characterReferenceMarker: 'characterReferenceMarker',\n\n  // Mark reference as numeric (`#`).\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\n\n  // Mark reference as numeric (`x` or `X`).\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\n\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\n  characterReferenceValue: 'characterReferenceValue',\n\n  // Whole fenced code:\n  //\n  // ````markdown\n  // ```js\n  // alert(1)\n  // ```\n  // ````\n  codeFenced: 'codeFenced',\n\n  // A fenced code fence, including whitespace, sequence, info, and meta\n  // (` ```js `).\n  codeFencedFence: 'codeFencedFence',\n\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\n\n  // Info word (`js`) in a fence.\n  // Includes string.\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\n\n  // Meta words (`highlight=\"1\"`) in a fence.\n  // Includes string.\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\n\n  // A line of code.\n  codeFlowValue: 'codeFlowValue',\n\n  // Whole indented code:\n  //\n  // ```markdown\n  //     alert(1)\n  // ```\n  //\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\n  codeIndented: 'codeIndented',\n\n  // A text code (``` `alpha` ```).\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\n  // `codeTextPadding`.\n  codeText: 'codeText',\n\n  codeTextData: 'codeTextData',\n\n  // A space or line ending right after or before a tick.\n  codeTextPadding: 'codeTextPadding',\n\n  // A text code fence (` `` `).\n  codeTextSequence: 'codeTextSequence',\n\n  // Whole content:\n  //\n  // ```markdown\n  // [a]: b\n  // c\n  // =\n  // d\n  // ```\n  //\n  // Includes `paragraph` and `definition`.\n  content: 'content',\n  // Whole definition:\n  //\n  // ```markdown\n  // [micromark]: https://github.com/micromark/micromark\n  // ```\n  //\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\n  definition: 'definition',\n\n  // Destination of a definition (`https://github.com/micromark/micromark` or\n  // `<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\n  definitionDestination: 'definitionDestination',\n\n  // Enclosed destination of a definition\n  // (`<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteralMarker` and optionally\n  // `definitionDestinationString`.\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\n\n  // Markers of an enclosed definition destination (`<` or `>`).\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\n\n  // Unenclosed destination of a definition\n  // (`https://github.com/micromark/micromark`).\n  // Includes `definitionDestinationString`.\n  definitionDestinationRaw: 'definitionDestinationRaw',\n\n  // Text in an destination (`https://github.com/micromark/micromark`).\n  // Includes string.\n  definitionDestinationString: 'definitionDestinationString',\n\n  // Label of a definition (`[micromark]`).\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\n  definitionLabel: 'definitionLabel',\n\n  // Markers of a definition label (`[` or `]`).\n  definitionLabelMarker: 'definitionLabelMarker',\n\n  // Value of a definition label (`micromark`).\n  // Includes string.\n  definitionLabelString: 'definitionLabelString',\n\n  // Marker between a label and a destination (`:`).\n  definitionMarker: 'definitionMarker',\n\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\n  definitionTitle: 'definitionTitle',\n\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\n  definitionTitleMarker: 'definitionTitleMarker',\n\n  // Data without markers in a title (`z`).\n  // Includes string.\n  definitionTitleString: 'definitionTitleString',\n\n  // Emphasis (`*alpha*`).\n  // Includes `emphasisSequence` and `emphasisText`.\n  emphasis: 'emphasis',\n\n  // Sequence of emphasis markers (`*` or `_`).\n  emphasisSequence: 'emphasisSequence',\n\n  // Emphasis text (`alpha`).\n  // Includes text.\n  emphasisText: 'emphasisText',\n\n  // The character escape marker (`\\`).\n  escapeMarker: 'escapeMarker',\n\n  // A hard break created with a backslash (`\\\\n`).\n  // Includes `escapeMarker` (does not include the line ending)\n  hardBreakEscape: 'hardBreakEscape',\n\n  // A hard break created with trailing spaces (`  \\n`).\n  // Does not include the line ending.\n  hardBreakTrailing: 'hardBreakTrailing',\n\n  // Flow HTML:\n  //\n  // ```markdown\n  // <div\n  // ```\n  //\n  // Inlcudes `lineEnding`, `htmlFlowData`.\n  htmlFlow: 'htmlFlow',\n\n  htmlFlowData: 'htmlFlowData',\n\n  // HTML in text (the tag in `a <i> b`).\n  // Includes `lineEnding`, `htmlTextData`.\n  htmlText: 'htmlText',\n\n  htmlTextData: 'htmlTextData',\n\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\n  // `![alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  image: 'image',\n\n  // Whole link label (`[*alpha*]`).\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\n  label: 'label',\n\n  // Text in an label (`*alpha*`).\n  // Includes text.\n  labelText: 'labelText',\n\n  // Start a link label (`[`).\n  // Includes a `labelMarker`.\n  labelLink: 'labelLink',\n\n  // Start an image label (`![`).\n  // Includes `labelImageMarker` and `labelMarker`.\n  labelImage: 'labelImage',\n\n  // Marker of a label (`[` or `]`).\n  labelMarker: 'labelMarker',\n\n  // Marker to start an image (`!`).\n  labelImageMarker: 'labelImageMarker',\n\n  // End a label (`]`).\n  // Includes `labelMarker`.\n  labelEnd: 'labelEnd',\n\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  link: 'link',\n\n  // Whole paragraph:\n  //\n  // ```markdown\n  // alpha\n  // bravo.\n  // ```\n  //\n  // Includes text.\n  paragraph: 'paragraph',\n\n  // A reference (`[alpha]` or `[]`).\n  // Includes `referenceMarker` and an optional `referenceString`.\n  reference: 'reference',\n\n  // A reference marker (`[` or `]`).\n  referenceMarker: 'referenceMarker',\n\n  // Reference text (`alpha`).\n  // Includes string.\n  referenceString: 'referenceString',\n\n  // A resource (`(https://example.com \"alpha\")`).\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\n  // `whitespace` and `resourceTitle`.\n  resource: 'resource',\n\n  // A resource destination (`https://example.com`).\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\n  resourceDestination: 'resourceDestination',\n\n  // A literal resource destination (`<https://example.com>`).\n  // Includes `resourceDestinationLiteralMarker` and optionally\n  // `resourceDestinationString`.\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\n\n  // A resource destination marker (`<` or `>`).\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\n\n  // A raw resource destination (`https://example.com`).\n  // Includes `resourceDestinationString`.\n  resourceDestinationRaw: 'resourceDestinationRaw',\n\n  // Resource destination text (`https://example.com`).\n  // Includes string.\n  resourceDestinationString: 'resourceDestinationString',\n\n  // A resource marker (`(` or `)`).\n  resourceMarker: 'resourceMarker',\n\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\n  resourceTitle: 'resourceTitle',\n\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\n  resourceTitleMarker: 'resourceTitleMarker',\n\n  // Resource destination title (`alpha`).\n  // Includes string.\n  resourceTitleString: 'resourceTitleString',\n\n  // Whole setext heading:\n  //\n  // ```markdown\n  // alpha\n  // bravo\n  // =====\n  // ```\n  //\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\n  // `setextHeadingLine`.\n  setextHeading: 'setextHeading',\n\n  // Content in a setext heading (`alpha\\nbravo`).\n  // Includes text.\n  setextHeadingText: 'setextHeadingText',\n\n  // Underline in a setext heading, including whitespace suffix (`==`).\n  // Includes `setextHeadingLineSequence`.\n  setextHeadingLine: 'setextHeadingLine',\n\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\n\n  // Strong (`**alpha**`).\n  // Includes `strongSequence` and `strongText`.\n  strong: 'strong',\n\n  // Sequence of strong markers (`**` or `__`).\n  strongSequence: 'strongSequence',\n\n  // Strong text (`alpha`).\n  // Includes text.\n  strongText: 'strongText',\n\n  // Whole thematic break:\n  //\n  // ```markdown\n  // * * *\n  // ```\n  //\n  // Includes `thematicBreakSequence` and `whitespace`.\n  thematicBreak: 'thematicBreak',\n\n  // A sequence of one or more thematic break markers (`***`).\n  thematicBreakSequence: 'thematicBreakSequence',\n\n  // Whole block quote:\n  //\n  // ```markdown\n  // > a\n  // >\n  // > b\n  // ```\n  //\n  // Includes `blockQuotePrefix` and flow.\n  blockQuote: 'blockQuote',\n  // The `>` or `> ` of a block quote.\n  blockQuotePrefix: 'blockQuotePrefix',\n  // The `>` of a block quote prefix.\n  blockQuoteMarker: 'blockQuoteMarker',\n  // The optional ` ` of a block quote prefix.\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\n\n  // Whole unordered list:\n  //\n  // ```markdown\n  // - a\n  //   b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listOrdered: 'listOrdered',\n\n  // Whole ordered list:\n  //\n  // ```markdown\n  // 1. a\n  //    b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listUnordered: 'listUnordered',\n\n  // The indent of further list item lines.\n  listItemIndent: 'listItemIndent',\n\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\n  listItemMarker: 'listItemMarker',\n\n  // The thing that starts a list item, such as `1. `.\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\n  listItemPrefix: 'listItemPrefix',\n\n  // The whitespace after a marker.\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\n\n  // The numerical value of an ordered item.\n  listItemValue: 'listItemValue',\n\n  // Internal types used for subtokenizers, compiled away\n  chunkDocument: 'chunkDocument',\n  chunkContent: 'chunkContent',\n  chunkFlow: 'chunkFlow',\n  chunkText: 'chunkText',\n  chunkString: 'chunkString'\n}\n","// This module is compiled away!\n//\n// While micromark works based on character codes, this module includes the\n// string versions of ’em.\n// The C0 block, except for LF, CR, HT, and w/ the replacement character added,\n// are available here.\nexport const values = {\n  ht: '\\t',\n  lf: '\\n',\n  cr: '\\r',\n  space: ' ',\n  exclamationMark: '!',\n  quotationMark: '\"',\n  numberSign: '#',\n  dollarSign: '$',\n  percentSign: '%',\n  ampersand: '&',\n  apostrophe: \"'\",\n  leftParenthesis: '(',\n  rightParenthesis: ')',\n  asterisk: '*',\n  plusSign: '+',\n  comma: ',',\n  dash: '-',\n  dot: '.',\n  slash: '/',\n  digit0: '0',\n  digit1: '1',\n  digit2: '2',\n  digit3: '3',\n  digit4: '4',\n  digit5: '5',\n  digit6: '6',\n  digit7: '7',\n  digit8: '8',\n  digit9: '9',\n  colon: ':',\n  semicolon: ';',\n  lessThan: '<',\n  equalsTo: '=',\n  greaterThan: '>',\n  questionMark: '?',\n  atSign: '@',\n  uppercaseA: 'A',\n  uppercaseB: 'B',\n  uppercaseC: 'C',\n  uppercaseD: 'D',\n  uppercaseE: 'E',\n  uppercaseF: 'F',\n  uppercaseG: 'G',\n  uppercaseH: 'H',\n  uppercaseI: 'I',\n  uppercaseJ: 'J',\n  uppercaseK: 'K',\n  uppercaseL: 'L',\n  uppercaseM: 'M',\n  uppercaseN: 'N',\n  uppercaseO: 'O',\n  uppercaseP: 'P',\n  uppercaseQ: 'Q',\n  uppercaseR: 'R',\n  uppercaseS: 'S',\n  uppercaseT: 'T',\n  uppercaseU: 'U',\n  uppercaseV: 'V',\n  uppercaseW: 'W',\n  uppercaseX: 'X',\n  uppercaseY: 'Y',\n  uppercaseZ: 'Z',\n  leftSquareBracket: '[',\n  backslash: '\\\\',\n  rightSquareBracket: ']',\n  caret: '^',\n  underscore: '_',\n  graveAccent: '`',\n  lowercaseA: 'a',\n  lowercaseB: 'b',\n  lowercaseC: 'c',\n  lowercaseD: 'd',\n  lowercaseE: 'e',\n  lowercaseF: 'f',\n  lowercaseG: 'g',\n  lowercaseH: 'h',\n  lowercaseI: 'i',\n  lowercaseJ: 'j',\n  lowercaseK: 'k',\n  lowercaseL: 'l',\n  lowercaseM: 'm',\n  lowercaseN: 'n',\n  lowercaseO: 'o',\n  lowercaseP: 'p',\n  lowercaseQ: 'q',\n  lowercaseR: 'r',\n  lowercaseS: 's',\n  lowercaseT: 't',\n  lowercaseU: 'u',\n  lowercaseV: 'v',\n  lowercaseW: 'w',\n  lowercaseX: 'x',\n  lowercaseY: 'y',\n  lowercaseZ: 'z',\n  leftCurlyBrace: '{',\n  verticalBar: '|',\n  rightCurlyBrace: '}',\n  tilde: '~',\n  replacementCharacter: '�'\n}\n","/**\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('nlcst').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n */\n\nimport {toString} from 'nlcst-to-string'\n\nconst single = [\n  '-', // Hyphen-minus\n  '–', // En dash\n  '—', // Em dash\n  ':', // Colon\n  ';' // Semi-colon\n]\n\n/**\n * Pair delimiters.\n * From common sense, and WikiPedia:\n * <https://en.wikipedia.org/wiki/Quotation_mark>.\n *\n * @type {Record<string, string[]>}\n */\nconst pairs = {\n  ',': [','],\n  '-': ['-'],\n  '–': ['–'],\n  '—': ['—'],\n  '\"': ['\"'],\n  \"'\": [\"'\"],\n  '‘': ['’'],\n  '‚': ['’'],\n  '’': ['’', '‚'],\n  '“': ['”'],\n  '”': ['”'],\n  '„': ['”', '“'],\n  '«': ['»'],\n  '»': ['«'],\n  '‹': ['›'],\n  '›': ['‹'],\n  '(': [')'],\n  '[': [']'],\n  '{': ['}'],\n  '⟨': ['⟩'],\n  '「': ['」']\n}\n\nconst open = Object.keys(pairs)\n\n/**\n * Check if the node in `parent` at `position` is enclosed by matching\n * delimiters.\n *\n * @param {Parent} parent\n * @param {number} index\n * @returns {boolean}\n */\nexport function isLiteral(parent, index) {\n  if (!(parent && parent.children)) {\n    throw new Error('Parent must be a node')\n  }\n\n  if (index !== null && typeof index === 'object' && 'type' in index) {\n    index = parent.children.indexOf(index)\n\n    if (index === -1) {\n      throw new Error('Node must be a child of `parent`')\n    }\n  }\n\n  if (typeof index !== 'number' || Number.isNaN(index)) {\n    throw new TypeError('Index must be a number')\n  }\n\n  return Boolean(\n    (!containsWord(parent, -1, index) &&\n      siblingDelimiter(parent, index, 1, single)) ||\n      (!containsWord(parent, index, parent.children.length) &&\n        siblingDelimiter(parent, index, -1, single)) ||\n      isWrapped(parent, index)\n  )\n}\n\n/**\n * Check if the node in `parent` at `position` is enclosed by matching\n * delimiters.\n * @param {Parent} parent\n * @param {number} position\n * @returns {Node|void}\n */\nfunction isWrapped(parent, position) {\n  const previous = siblingDelimiter(parent, position, -1, open)\n\n  if (previous) {\n    return siblingDelimiter(parent, position, 1, pairs[toString(previous)])\n  }\n}\n\n/**\n * Find the previous or next delimiter before or after `position` in `parent`.\n * Returns the delimiter node when found.\n *\n * @param {Parent} parent\n * @param {number} position\n * @param {number} step\n * @param {Array.<string>} delimiters\n * @returns {Node|void}\n */\nfunction siblingDelimiter(parent, position, step, delimiters) {\n  let index = position + step\n\n  while (index > -1 && index < parent.children.length) {\n    const sibling = parent.children[index]\n\n    if (sibling.type === 'WordNode' || sibling.type === 'SourceNode') {\n      return\n    }\n\n    if (sibling.type !== 'WhiteSpaceNode') {\n      return delimiters.includes(toString(sibling)) ? sibling : undefined\n    }\n\n    index += step\n  }\n}\n\n/**\n * Check if parent contains word-nodes between `start` and `end` (both\n * excluding).\n * @param {Parent} parent\n * @param {number} start\n * @param {number} end\n * @returns {boolean|void}\n */\nfunction containsWord(parent, start, end) {\n  while (++start < end) {\n    if (parent.children[start].type === 'WordNode') {\n      return true\n    }\n  }\n}\n","/**\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('nlcst').Content} Content\n * @typedef {Root|Content} Node\n *\n * @typedef {Object} NormalizeOptions\n * @property {boolean} [allowDashes=false]\n * @property {boolean} [allowApostrophes=false]\n */\n\nimport {toString} from 'nlcst-to-string'\n\n/**\n * @param {string|Node|Array.<Content>} node\n * @param {NormalizeOptions} [options={}]\n */\nexport function normalize(node, options) {\n  let value = (typeof node === 'string' ? node : toString(node))\n    .toLowerCase()\n    .replace(/’/g, \"'\")\n\n  if (!options || !options.allowDashes) {\n    value = value.replace(/-/g, '')\n  }\n\n  if (!options || !options.allowApostrophes) {\n    value = value.replace(/'/g, '')\n  }\n\n  return value\n}\n","/**\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('nlcst').Word} Word\n * @typedef {import('nlcst').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('nlcst-normalize').NormalizeOptions} NormalizeOptions\n *\n * @typedef {boolean} AllowApostrophes\n * @typedef {NormalizeOptions & {allowLiterals?: boolean}} SearchOptions\n *\n * @typedef {Array.<string>} PhrasesList\n * @typedef {Object.<string, unknown>} PhrasesMap\n *\n * @typedef {(nodes: Content[], index: number, parent: Parent, pattern: string) => void} Handler\n */\n\nimport {visit} from 'unist-util-visit'\nimport {normalize} from 'nlcst-normalize'\nimport {isLiteral} from 'nlcst-is-literal'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Node} tree\n * @param {PhrasesList|PhrasesMap} phrases\n * @param {Handler} handler\n * @param {AllowApostrophes|SearchOptions} [options=false]\n */\nexport function search(tree, phrases, handler, options) {\n  /** @type {Object.<string, Array.<string>>} */\n  const byWord = {'*': []}\n  let index = -1\n  /** @type {string} */\n  let key\n  /** @type {SearchOptions} */\n  let config\n\n  if (typeof options === 'boolean') {\n    config = options ? {allowApostrophes: true} : {}\n  } else {\n    config = options || {}\n  }\n\n  if (!tree || !tree.type) {\n    throw new Error('Expected node')\n  }\n\n  if (typeof phrases !== 'object') {\n    throw new TypeError('Expected object for phrases')\n  }\n\n  if (Array.isArray(phrases)) {\n    while (++index < phrases.length) {\n      handlePhrase(phrases[index])\n    }\n  } else {\n    for (key in phrases) {\n      if (own.call(phrases, key)) {\n        handlePhrase(key)\n      }\n    }\n  }\n\n  // Search the tree.\n  visit(tree, 'WordNode', (node, position, parent_) => {\n    const parent = /** @type {Parent} */ (parent_)\n\n    if (\n      !parent ||\n      position === null ||\n      (!config.allowLiterals && isLiteral(parent, position))\n    ) {\n      return\n    }\n\n    const word = normalize(node, config)\n    const phrases = byWord['*'].concat(\n      own.call(byWord, word) ? byWord[word] : []\n    )\n    let index = -1\n\n    while (++index < phrases.length) {\n      const result = test(phrases[index], position, parent)\n\n      if (result) {\n        handler(result, position, parent, phrases[index])\n      }\n    }\n  })\n\n  /**\n   * Test a phrase.\n   *\n   * @param {string} phrase\n   * @param {number} position\n   * @param {Parent} parent\n   */\n  function test(phrase, position, parent) {\n    const siblings = parent.children\n    const start = position\n    const expressions = phrase.split(' ').slice(1)\n    let index = -1\n\n    // Move one position forward.\n    position++\n\n    // Iterate over `expressions`.\n    while (++index < expressions.length) {\n      // Allow joining white-space.\n      while (position < siblings.length) {\n        if (siblings[position].type !== 'WhiteSpaceNode') break\n        position++\n      }\n\n      // Exit if there are no nodes left, if the current node is not a word, or\n      // if the current word does not match the search for value.\n      if (\n        !siblings[position] ||\n        siblings[position].type !== 'WordNode' ||\n        (expressions[index] !== '*' &&\n          normalize(expressions[index], config) !==\n            normalize(siblings[position], config))\n      ) {\n        return\n      }\n\n      position++\n    }\n\n    return siblings.slice(start, position)\n  }\n\n  /**\n   * Handle a phrase.\n   *\n   * @param {string} phrase\n   */\n  function handlePhrase(phrase) {\n    const firstWord = normalize(phrase.split(' ', 1)[0], config)\n\n    if (own.call(byWord, firstWord)) {\n      byWord[firstWord].push(phrase)\n    } else {\n      byWord[firstWord] = [phrase]\n    }\n  }\n}\n","/**\n * @typedef {import('nlcst').Content} Content\n * @typedef {import('nlcst').Root} Root\n */\n\n/**\n * Stringify one nlcst node or list of nodes.\n *\n * @param {Root|Content|Content[]} node\n * @param {string} [separator='']\n * @returns {string}\n */\nexport function toString(node, separator = '') {\n  let index = -1\n\n  if (!node || (!Array.isArray(node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`')\n  }\n\n  // @ts-expect-error Looks like a literal.\n  if (typeof node.value === 'string') return node.value\n\n  /** @type {Array.<Content|Root>} */\n  // @ts-expect-error Looks like a list of nodes or parent.\n  const children = (Array.isArray(node) ? node : node.children) || []\n\n  // Shortcut: This is pretty common, and a small performance win.\n  if (children.length === 1 && 'value' in children[0]) {\n    return children[0].value\n  }\n\n  /** @type {Array.<string>} */\n  const values = []\n\n  while (++index < children.length) {\n    values[index] = toString(children[index], separator)\n  }\n\n  return values.join(separator)\n}\n","import {ParseLatin} from 'parse-latin'\nimport toString from 'nlcst-to-string'\nimport visitChildren from 'unist-util-visit-children'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Transform English natural language into an NLCST-tree.\nexport class ParseEnglish extends ParseLatin {}\n\n// Add modifiers to `parser`.\nParseEnglish.prototype.tokenizeSentencePlugins = [\n  visitChildren(mergeEnglishElisionExceptions)\n].concat(ParseEnglish.prototype.tokenizeSentencePlugins)\n\nParseEnglish.prototype.tokenizeParagraphPlugins = [\n  modifyChildren(mergeEnglishPrefixExceptions)\n].concat(ParseEnglish.prototype.tokenizeParagraphPlugins)\n\n// Match a blacklisted (case-insensitive) abbreviation which when followed by a\n// full-stop does not depict a sentence terminal marker.\nvar abbreviations = new RegExp(\n  '^(' +\n    // Business Abbreviations: Incorporation, Limited company.\n    'inc|ltd|' +\n    // English unit abbreviations:\n    // -   Note that *Metric abbreviations* do not use full stops.\n    // -   Note that some common plurals are included, although units should not\n    //     be pluralised.\n    //\n    // barrel, cubic, dozen, fluid (ounce), foot, gallon, grain, gross,\n    // inch, karat / knot, pound, mile, ounce, pint, quart, square,\n    // tablespoon, teaspoon, yard.\n    'bbls?|cu|doz|fl|ft|gal|gr|gro|in|kt|lbs?|mi|oz|pt|qt|sq|tbsp|' +\n    'tsp|yds?|' +\n    // Abbreviations of time references:\n    // seconds, minutes, hours, Monday, Tuesday, *, Wednesday, Thursday, *,\n    // Friday, Saturday, Sunday, January, Februari, March, April, June, July,\n    // August, September, *, October, November, December.\n    'sec|min|hr|mon|tue|tues|wed|thu|thurs|fri|sat|sun|jan|feb|mar|' +\n    'apr|jun|jul|aug|sep|sept|oct|nov|dec' +\n    ')$'\n  // Note: There's no `i` flag here because the value to test against should be\n  // all lowercase!\n)\n\n// Match a blacklisted (case-sensitive) abbreviation which when followed by a\n// full-stop does not depict a sentence terminal marker.\nvar abbreviationsSensitive = new RegExp(\n  '^(' +\n    // Social:\n    // Mister, Mistress, Mistress, woman, Mademoiselle, Madame, Monsieur,\n    // Misters, Mesdames, Junior, Senior, *.\n    'Mr|Mrs|Miss|Ms|Mss|Mses|Mlle|Mme|M|Messrs|Mmes|Jr|Sr|Snr|' +\n    // Rank and academic:\n    // Doctor, Magister, Attorney, Profesor, Honourable, Reverend, Father,\n    // Monsignor, Sister, Brother, Saint, President, Superintendent,\n    // Representative, Senator.\n    'Dr|Mgr|Atty|Prof|Hon|Rev|Fr|Msgr|Sr|Br|St|Pres|Supt|Rep|Sen|' +\n    // Rank and military:\n    // Governor, Ambassador, Treasurer, Secretary, Admiral, Brigadier, General,\n    // Commander, Colonel, Captain, Lieutenant, Major, Sergeant, Petty Officer,\n    // Warrant Officer, Purple Heart.\n    'Gov|Amb|Treas|Sec|Amd|Brig|Gen|Cdr|Col|Capt|Lt|Maj|Sgt|Po|Wo|Ph|' +\n    // Common geographical abbreviations:\n    // Avenue, Boulevard, Mountain, Road, Building, National, *, Route, *,\n    // County, Park, Square, Drive, Port or Point, Street or State, Fort,\n    // Peninsula, Territory, Highway, Freeway, Parkway.\n    'Ave|Blvd|Mt|Rd|Bldgs?|Nat|Natl|Rt|Rte|Co|Pk|Sq|Dr|Pt|St|' +\n    'Ft|Pen|Terr|Hwy|Fwy|Pkwy|' +\n    // American state abbreviations:\n    // Alabama, Arizona, Arkansas, California, *, Colorado, *,\n    // Connecticut, Delaware, Florida, Georgia, Idaho, *, Illinois, Indiana,\n    // Iowa, Kansas, *, Kentucky, *, Louisiana, Maine, Maryland, Massachusetts,\n    // Michigan, Minnesota, Mississippi, Missouri, Montana, Nebraska, *, Nevada,\n    // Mexico, Dakota, Oklahoma, *, Oregon, Pennsylvania, *, *, Tennessee,\n    // Texas, Utah, Vermont, Virginia, Washington, Wisconsin, *, Wyoming.\n    'Ala|Ariz|Ark|Cal|Calif|Col|Colo|Conn|Del|Fla|Ga|Ida|Id|Ill|Ind|' +\n    'Ia|Kan|Kans|Ken|Ky|La|Me|Md|Mass|Mich|Minn|Miss|Mo|Mont|Neb|' +\n    'Nebr|Nev|Mex|Dak|Okla|Ok|Ore|Penna|Penn|Pa|Tenn|Tex|Ut|Vt|Va|' +\n    'Wash|Wis|Wisc|Wyo|' +\n    // Canadian province abbreviations:\n    // Alberta, Manitoba, Ontario, Quebec, *, Saskatchewan, Yukon Territory.\n    'Alta|Man|Ont|Qu\\u00E9|Que|Sask|Yuk|' +\n    // English county abbreviations:\n    // Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire, Cheshire,\n    // Cornwall, Cumberland, Derbyshire, *, Devon, Dorset, Durham,\n    // Gloucestershire, Hampshire, Herefordshire, *, Hertfordshire,\n    // Huntingdonshire, Lancashire, Leicestershire, Lincolnshire, Middlesex,\n    // *, *, Norfolk, Northamptonshire, Northumberland, *, Nottinghamshire,\n    // Oxfordshire, Rutland, Shropshire, Somerset, Staffordshire, *, Suffolk,\n    // Surrey, Sussex, *, Warwickshire, *, *, Westmorland, Wiltshire,\n    // Worcestershire, Yorkshire.\n    'Beds|Berks|Bucks|Cambs|Ches|Corn|Cumb|Derbys|Derbs|Dev|Dor|Dur|' +\n    'Glos|Hants|Here|Heref|Herts|Hunts|Lancs|Leics|Lincs|Mx|Middx|Mddx|' +\n    'Norf|Northants|Northumb|Northd|Notts|Oxon|Rut|Shrops|Salop|Som|' +\n    'Staffs|Staf|Suff|Sy|Sx|Ssx|Warks|War|Warw|Westm|Wilts|Worcs|Yorks' +\n    ')$'\n)\n\n// Match a blacklisted word which when followed by an apostrophe depicts\n// elision.\nvar elisionPrefix = new RegExp(\n  '^(' +\n    // Includes: - o' > of; - ol' > old.\n    'o|ol' +\n    ')$'\n)\n\n// Match a blacklisted word which when preceded by an apostrophe depicts\n// elision.\nvar elisionAffix = new RegExp(\n  '^(' +\n    // Includes: 'im > him; 'er > her; 'em > them. 'cause > because.\n    'im|er|em|cause|' +\n    // Includes: 'twas > it was; 'tis > it is; 'twere > it were.\n    'twas|tis|twere|' +\n    // Matches groups of year, optionally followed by an `s`.\n    '\\\\d\\\\ds?' +\n    ')$'\n)\n\n// Match one apostrophe.\nvar apostrophe = /^['\\u2019]$/\n\n// Merge a sentence into its next sentence, when the sentence ends with a\n// certain word.\nfunction mergeEnglishPrefixExceptions(sentence, index, paragraph) {\n  var children = sentence.children\n  var period = children[children.length - 1]\n  var word = children[children.length - 2]\n  var value\n  var next\n\n  if (period && toString(period) === '.' && word && word.type === 'WordNode') {\n    value = toString(word)\n\n    if (\n      abbreviations.test(lower(value)) ||\n      abbreviationsSensitive.test(value)\n    ) {\n      // Merge period into abbreviation.\n      word.children.push(period)\n      children.pop()\n\n      if (period.position && word.position) {\n        word.position.end = period.position.end\n      }\n\n      // Merge sentences.\n      next = paragraph.children[index + 1]\n\n      if (next) {\n        sentence.children = children.concat(next.children)\n\n        paragraph.children.splice(index + 1, 1)\n\n        // Update position.\n        if (next.position && sentence.position) {\n          sentence.position.end = next.position.end\n        }\n\n        // Next, iterate over the current node again.\n        return index - 1\n      }\n    }\n  }\n}\n\n// Merge an apostrophe depicting elision into its surrounding word.\nfunction mergeEnglishElisionExceptions(child, index, sentence) {\n  var siblings\n  var sibling\n  var other\n  var length\n  var value\n\n  if (child.type !== 'PunctuationNode' && child.type !== 'SymbolNode') {\n    return\n  }\n\n  siblings = sentence.children\n  length = siblings.length\n  value = toString(child)\n\n  // Match abbreviation of `with`, `w/`\n  if (value === '/') {\n    sibling = siblings[index - 1]\n\n    if (sibling && lower(toString(sibling)) === 'w') {\n      // Remove the slash from the sentence.\n      siblings.splice(index, 1)\n\n      // Append the slash into the children of the previous node.\n      sibling.children.push(child)\n\n      // Update position.\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end\n      }\n    }\n  } else if (apostrophe.test(value)) {\n    // If two preceding (the first white space and the second a word), and one\n    // following (white space) nodes exist...\n    sibling = siblings[index - 1]\n\n    if (\n      index > 2 &&\n      index < length - 1 &&\n      sibling.type === 'WordNode' &&\n      siblings[index - 2].type === 'WhiteSpaceNode' &&\n      siblings[index + 1].type === 'WhiteSpaceNode' &&\n      elisionPrefix.test(lower(toString(sibling)))\n    ) {\n      // Remove the apostrophe from the sentence.\n      siblings.splice(index, 1)\n\n      // Append the apostrophe into the children of node.\n      sibling.children.push(child)\n\n      // Update position.\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end\n      }\n\n      return\n    }\n\n    // If a following word exists, and the preceding node is not a word...\n    if (\n      index !== length - 1 &&\n      siblings[index + 1].type === 'WordNode' &&\n      (index === 0 || siblings[index - 1].type !== 'WordNode')\n    ) {\n      sibling = siblings[index + 1]\n      value = lower(toString(sibling))\n\n      if (elisionAffix.test(value)) {\n        // Remove the apostrophe from the sentence.\n        siblings.splice(index, 1)\n\n        // Prepend the apostrophe into the children of node.\n        sibling.children = [child].concat(sibling.children)\n\n        // Update position.\n        if (sibling.position && child.position) {\n          sibling.position.start = child.position.start\n        }\n        // If both preceded and followed by an apostrophe, and the word is\n        // `n`...\n      } else if (\n        value === 'n' &&\n        index < length - 2 &&\n        apostrophe.test(toString(siblings[index + 2]))\n      ) {\n        other = siblings[index + 2]\n\n        // Remove the apostrophe from the sentence.\n        siblings.splice(index, 1)\n        siblings.splice(index + 1, 1)\n\n        // Prepend the preceding apostrophe and append the into the following\n        // apostrophe into the children of node.\n        sibling.children = [child].concat(sibling.children, other)\n\n        // Update position.\n        if (sibling.position) {\n          if (child.position) {\n            sibling.position.start = child.position.start\n          }\n\n          if (other.position) {\n            sibling.position.end = other.position.end\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction lower(value) {\n  return value.toLowerCase()\n}\n","// This module is generated by `script/build-expressions.js`.\nexport var affixSymbol = /^([!\"').?\\u00BB\\u0F3B\\u0F3D\\u169C\\u2019\\u201D\\u2026\\u203A\\u203D\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63\\]}])\\1*$/\nexport var newLine = /^[ \\t]*((\\r?\\n|\\r)[\\t ]*)+$/\nexport var newLineMulti = /^[ \\t]*((\\r?\\n|\\r)[\\t ]*){2,}$/\nexport var terminalMarker = /^([!.?\\u2026\\u203D]+)$/\nexport var wordSymbolInner = /^([&'\\-.:=?@\\u00AD\\u00B7\\u2010\\u2011\\u2019\\u2027]|_+)$/\nexport var numerical = /^(?:[\\d\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D58-\\u0D5E\\u0D66-\\u0D78\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]|\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE48\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDF1D-\\uDF26\\uDF51-\\uDF54\\uDFC5-\\uDFCB]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2\\uDD50-\\uDD59]|\\uD807[\\uDC50-\\uDC6C\\uDD50-\\uDD59\\uDDA0-\\uDDA9\\uDFC0-\\uDFD4]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD81B[\\uDE80-\\uDE96]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDFCE-\\uDFFF]|\\uD838[\\uDD40-\\uDD49\\uDEF0-\\uDEF9]|\\uD83A[\\uDCC7-\\uDCCF\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9])+$/\nexport var digitStart = /^\\d/\nexport var lowerInitial = /^(?:[a-z\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7BB\\uA7BD\\uA7BF\\uA7C3\\uA7C8\\uA7CA\\uA7F6\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB68\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]|\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD81B[\\uDE60-\\uDE7F]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43])/\nexport var surrogates = /[\\uD800-\\uDFFF]/\nexport var punctuation = /[!\"'-),-/:;?[-\\]_{}\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u201F\\u2022-\\u2027\\u2032-\\u203A\\u203C-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDEAD\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/\nexport var word = /[\\dA-Za-z\\u00AA\\u00B2\\u00B3\\u00B5\\u00B9\\u00BA\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u07FD\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u08D3-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D63\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D81-\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1AC0\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CD0-\\u1CD2\\u1CD4-\\u1CFA\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u20D0-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA827\\uA82C\\uA830-\\uA835\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD27\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEAB\\uDEAC\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF54\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC00-\\uDC46\\uDC52-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD44-\\uDD47\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3B-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5E-\\uDC61\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF3B]|\\uD806[\\uDC00-\\uDC3A\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD35\\uDD37\\uDD38\\uDD3B-\\uDD43\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD7\\uDDDA-\\uDDE1\\uDDE3\\uDDE4\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE99\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF6\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF4F-\\uDF87\\uDF8F-\\uDF9F\\uDFE0\\uDFE1\\uDFE3\\uDFE4\\uDFF0\\uDFF1]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82C[\\uDC00-\\uDD1E\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD00-\\uDD2C\\uDD30-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDEC0-\\uDEF9]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6\\uDD00-\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDD\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A]|\\uDB40[\\uDD00-\\uDDEF]/\nexport var whiteSpace = /[\\t-\\r \\u0085\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/\n","import {mergeInitialWordSymbol} from './plugin/merge-initial-word-symbol.js'\nimport {mergeFinalWordSymbol} from './plugin/merge-final-word-symbol.js'\nimport {mergeInnerWordSymbol} from './plugin/merge-inner-word-symbol.js'\nimport {mergeInnerWordSlash} from './plugin/merge-inner-word-slash.js'\nimport {mergeInitialisms} from './plugin/merge-initialisms.js'\nimport {mergeWords} from './plugin/merge-words.js'\nimport {patchPosition} from './plugin/patch-position.js'\nimport {mergeNonWordSentences} from './plugin/merge-non-word-sentences.js'\nimport {mergeAffixSymbol} from './plugin/merge-affix-symbol.js'\nimport {mergeInitialLowerCaseLetterSentences} from './plugin/merge-initial-lower-case-letter-sentences.js'\nimport {mergeInitialDigitSentences} from './plugin/merge-initial-digit-sentences.js'\nimport {mergePrefixExceptions} from './plugin/merge-prefix-exceptions.js'\nimport {mergeAffixExceptions} from './plugin/merge-affix-exceptions.js'\nimport {mergeRemainingFullStops} from './plugin/merge-remaining-full-stops.js'\nimport {makeInitialWhiteSpaceSiblings} from './plugin/make-initial-white-space-siblings.js'\nimport {makeFinalWhiteSpaceSiblings} from './plugin/make-final-white-space-siblings.js'\nimport {breakImplicitSentences} from './plugin/break-implicit-sentences.js'\nimport {removeEmptyNodes} from './plugin/remove-empty-nodes.js'\nimport {parserFactory} from './parser.js'\nimport {\n  newLine,\n  punctuation,\n  surrogates,\n  terminalMarker,\n  whiteSpace,\n  word\n} from './expressions.js'\n\n// PARSE LATIN\n\n// Transform Latin-script natural language into an NLCST-tree.\nexport class ParseLatin {\n  constructor(doc, file) {\n    var value = file || doc\n    this.doc = value ? String(value) : null\n  }\n\n  // Run transform plugins for `key` on `nodes`.\n  run(key, nodes) {\n    var wareKey = key + 'Plugins'\n    var plugins = this[wareKey]\n    var index = -1\n\n    if (plugins) {\n      while (plugins[++index]) {\n        plugins[index](nodes)\n      }\n    }\n\n    return nodes\n  }\n\n  // Easy access to the document parser. This additionally supports retext-style\n  // invocation: where an instance is created for each file, and the file is given\n  // on construction.\n  parse(value) {\n    return this.tokenizeRoot(value || this.doc)\n  }\n\n  // Transform a `value` into a list of `NLCSTNode`s.\n  tokenize(value) {\n    var parser = this\n    var tokens = []\n    var index = 0\n    var offset = 0\n    var line = 1\n    var column = 1\n    var character\n    var queue\n    var previous\n    var left\n    var right\n    var eater\n\n    if (value === null || value === undefined) {\n      value = ''\n    } else if (value instanceof String) {\n      value = value.toString()\n    }\n\n    if (typeof value !== 'string') {\n      // Return the given nodes if this is either an empty array, or an array with\n      // a node as a first child.\n      if ('length' in value && (!value[0] || value[0].type)) {\n        return value\n      }\n\n      throw new Error(\n        \"Illegal invocation: '\" +\n          value +\n          \"' is not a valid argument for 'ParseLatin'\"\n      )\n    }\n\n    if (!value) {\n      return tokens\n    }\n\n    // Eat mechanism to use.\n    eater = this.position ? eat : noPositionEat\n\n    previous = ''\n    queue = ''\n\n    while (index < value.length) {\n      character = value.charAt(index)\n\n      if (whiteSpace.test(character)) {\n        right = 'WhiteSpace'\n      } else if (punctuation.test(character)) {\n        right = 'Punctuation'\n      } else if (word.test(character)) {\n        right = 'Word'\n      } else {\n        right = 'Symbol'\n      }\n\n      tick()\n\n      previous = character\n      character = ''\n      left = right\n      right = null\n\n      index++\n    }\n\n    tick()\n\n    return tokens\n\n    // Check one character.\n    function tick() {\n      if (\n        left === right &&\n        (left === 'Word' ||\n          left === 'WhiteSpace' ||\n          character === previous ||\n          surrogates.test(character))\n      ) {\n        queue += character\n      } else {\n        // Flush the previous queue.\n        if (queue) {\n          parser['tokenize' + left](queue, eater)\n        }\n\n        queue = character\n      }\n    }\n\n    // Remove `subvalue` from `value`.\n    // Expects `subvalue` to be at the start from `value`, and applies no\n    // validation.\n    function eat(subvalue) {\n      var pos = position()\n\n      update(subvalue)\n\n      return apply\n\n      // Add the given arguments, add `position` to the returned node, and return\n      // the node.\n      function apply(...input) {\n        return pos(add(...input))\n      }\n    }\n\n    // Remove `subvalue` from `value`.\n    // Does not patch positional information.\n    function noPositionEat() {\n      return add\n    }\n\n    // Add mechanism.\n    function add(node, parent) {\n      if (parent) {\n        parent.children.push(node)\n      } else {\n        tokens.push(node)\n      }\n\n      return node\n    }\n\n    // Mark position and patch `node.position`.\n    function position() {\n      var before = now()\n\n      // Add the position to a node.\n      function patch(node) {\n        node.position = new Position(before)\n\n        return node\n      }\n\n      return patch\n    }\n\n    // Update line and column based on `value`.\n    function update(subvalue) {\n      var character = -1\n      var lastIndex = -1\n\n      offset += subvalue.length\n\n      while (++character < subvalue.length) {\n        if (subvalue.charAt(character) === '\\n') {\n          lastIndex = character\n          line++\n        }\n      }\n\n      if (lastIndex < 0) {\n        column += subvalue.length\n      } else {\n        column = subvalue.length - lastIndex\n      }\n    }\n\n    // Store position information for a node.\n    function Position(start) {\n      this.start = start\n      this.end = now()\n    }\n\n    // Get the current position.\n    function now() {\n      return {line, column, offset}\n    }\n  }\n}\n\n// Default position.\nParseLatin.prototype.position = true\n\n// Create text nodes.\nParseLatin.prototype.tokenizeSymbol = createTextFactory('Symbol')\nParseLatin.prototype.tokenizeWhiteSpace = createTextFactory('WhiteSpace')\nParseLatin.prototype.tokenizePunctuation = createTextFactory('Punctuation')\nParseLatin.prototype.tokenizeSource = createTextFactory('Source')\nParseLatin.prototype.tokenizeText = createTextFactory('Text')\n\n// Inject `plugins` to modifiy the result of the method at `key` on the operated\n// on context.\nParseLatin.prototype.use = useFactory(function (context, key, plugins) {\n  context[key] = context[key].concat(plugins)\n})\n\n// Inject `plugins` to modifiy the result of the method at `key` on the operated\n// on context, before any other.\nParseLatin.prototype.useFirst = useFactory(function (context, key, plugins) {\n  context[key] = plugins.concat(context[key])\n})\n\n// PARENT NODES\n//\n// All these nodes are `pluggable`: they come with a `use` method which accepts\n// a plugin (`function(NLCSTNode)`).\n// Every time one of these methods are called, the plugin is invoked with the\n// node, allowing for easy modification.\n//\n// In fact, the internal transformation from `tokenize` (a list of words, white\n// space, punctuation, and symbols) to `tokenizeRoot` (an NLCST tree), is also\n// implemented through this mechanism.\n\n// Create a `WordNode` with its children set to a single `TextNode`, its value\n// set to the given `value`.\npluggable(ParseLatin, 'tokenizeWord', function (value, eat) {\n  var add = (eat || noopEat)('')\n  var parent = {type: 'WordNode', children: []}\n\n  this.tokenizeText(value, eat, parent)\n\n  return add(parent)\n})\n\n// Create a `SentenceNode` with its children set to `Node`s, their values set\n// to the tokenized given `value`.\n//\n// Unless plugins add new nodes, the sentence is populated by `WordNode`s,\n// `SymbolNode`s, `PunctuationNode`s, and `WhiteSpaceNode`s.\npluggable(\n  ParseLatin,\n  'tokenizeSentence',\n  parserFactory({type: 'SentenceNode', tokenizer: 'tokenize'})\n)\n\n// Create a `ParagraphNode` with its children set to `Node`s, their values set\n// to the tokenized given `value`.\n//\n// Unless plugins add new nodes, the paragraph is populated by `SentenceNode`s\n// and `WhiteSpaceNode`s.\npluggable(\n  ParseLatin,\n  'tokenizeParagraph',\n  parserFactory({\n    type: 'ParagraphNode',\n    delimiter: terminalMarker,\n    delimiterType: 'PunctuationNode',\n    tokenizer: 'tokenizeSentence'\n  })\n)\n\n// Create a `RootNode` with its children set to `Node`s, their values set to the\n// tokenized given `value`.\npluggable(\n  ParseLatin,\n  'tokenizeRoot',\n  parserFactory({\n    type: 'RootNode',\n    delimiter: newLine,\n    delimiterType: 'WhiteSpaceNode',\n    tokenizer: 'tokenizeParagraph'\n  })\n)\n\n// PLUGINS\n\nParseLatin.prototype.use('tokenizeSentence', [\n  mergeInitialWordSymbol,\n  mergeFinalWordSymbol,\n  mergeInnerWordSymbol,\n  mergeInnerWordSlash,\n  mergeInitialisms,\n  mergeWords,\n  patchPosition\n])\n\nParseLatin.prototype.use('tokenizeParagraph', [\n  mergeNonWordSentences,\n  mergeAffixSymbol,\n  mergeInitialLowerCaseLetterSentences,\n  mergeInitialDigitSentences,\n  mergePrefixExceptions,\n  mergeAffixExceptions,\n  mergeRemainingFullStops,\n  makeInitialWhiteSpaceSiblings,\n  makeFinalWhiteSpaceSiblings,\n  breakImplicitSentences,\n  removeEmptyNodes,\n  patchPosition\n])\n\nParseLatin.prototype.use('tokenizeRoot', [\n  makeInitialWhiteSpaceSiblings,\n  makeFinalWhiteSpaceSiblings,\n  removeEmptyNodes,\n  patchPosition\n])\n\n// TEXT NODES\n\n// Factory to create a `Text`.\nfunction createTextFactory(type) {\n  type += 'Node'\n\n  return createText\n\n  // Construct a `Text` from a bound `type`\n  function createText(value, eat, parent) {\n    if (value === null || value === undefined) {\n      value = ''\n    }\n\n    return (eat || noopEat)(value)({type, value: String(value)}, parent)\n  }\n}\n\n// Make a method “pluggable”.\nfunction pluggable(Constructor, key, callback) {\n  // Set a pluggable version of `callback` on `Constructor`.\n  Constructor.prototype[key] = function (...input) {\n    return this.run(key, callback.apply(this, input))\n  }\n}\n\n// Factory to inject `plugins`. Takes `callback` for the actual inserting.\nfunction useFactory(callback) {\n  return use\n\n  // Validate if `plugins` can be inserted.\n  // Invokes the bound `callback` to do the actual inserting.\n  function use(key, plugins) {\n    var wareKey\n\n    // Throw if the method is not pluggable.\n    if (!(key in this)) {\n      throw new Error(\n        'Illegal Invocation: Unsupported `key` for ' +\n          '`use(key, plugins)`. Make sure `key` is a ' +\n          'supported function'\n      )\n    }\n\n    // Fail silently when no plugins are given.\n    if (!plugins) {\n      return\n    }\n\n    wareKey = key + 'Plugins'\n\n    // Make sure `plugins` is a list.\n    plugins = typeof plugins === 'function' ? [plugins] : plugins.concat()\n\n    // Make sure `wareKey` exists.\n    if (!this[wareKey]) {\n      this[wareKey] = []\n    }\n\n    // Invoke callback with the ware key and plugins.\n    callback(this, wareKey, plugins)\n  }\n}\n\n// Add mechanism used when text-tokenisers are called directly outside of the\n// `tokenize` function.\nfunction noopAdd(node, parent) {\n  if (parent) {\n    parent.children.push(node)\n  }\n\n  return node\n}\n\n// Eat and add mechanism without adding positional information, used when\n// text-tokenisers are called directly outside of the `tokenize` function.\nfunction noopEat() {\n  return noopAdd\n}\n","import {tokenizerFactory} from './tokenizer.js'\n\n// Construct a parser based on `options`.\nexport function parserFactory(options) {\n  var type = options.type\n  var tokenizerProperty = options.tokenizer\n  var delimiter = options.delimiter\n  var tokenize = delimiter && tokenizerFactory(options.delimiterType, delimiter)\n\n  return parser\n\n  function parser(value) {\n    var children = this[tokenizerProperty](value)\n\n    return {type, children: tokenize ? tokenize(children) : children}\n  }\n}\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Two or more new line characters.\nimport {newLineMulti} from '../expressions.js'\n\n// Break a sentence if a white space with more than one new-line is found.\nexport var breakImplicitSentences = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children\n  var position\n  var tail\n  var head\n  var end\n  var insertion\n  var node\n\n  if (child.type !== 'SentenceNode') {\n    return\n  }\n\n  children = child.children\n\n  // Ignore first and last child.\n  position = 0\n\n  while (++position < children.length - 1) {\n    node = children[position]\n\n    if (node.type !== 'WhiteSpaceNode' || !newLineMulti.test(toString(node))) {\n      continue\n    }\n\n    child.children = children.slice(0, position)\n\n    insertion = {\n      type: 'SentenceNode',\n      children: children.slice(position + 1)\n    }\n\n    tail = children[position - 1]\n    head = children[position + 1]\n\n    parent.children.splice(index + 1, 0, node, insertion)\n\n    if (child.position && tail.position && head.position) {\n      end = child.position.end\n\n      child.position.end = tail.position.end\n\n      insertion.position = {start: head.position.start, end}\n    }\n\n    return index + 1\n  }\n})\n","import modifyChildren from 'unist-util-modify-children'\n\n// Move white space ending a paragraph up, so they are the siblings of\n// paragraphs.\nexport var makeFinalWhiteSpaceSiblings = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var previous\n\n  if (\n    children &&\n    children.length > 0 &&\n    children[children.length - 1].type === 'WhiteSpaceNode'\n  ) {\n    parent.children.splice(index + 1, 0, child.children.pop())\n    previous = children[children.length - 1]\n\n    if (previous && previous.position && child.position) {\n      child.position.end = previous.position.end\n    }\n\n    // Next, iterate over the current node again.\n    return index\n  }\n})\n","import visitChildren from 'unist-util-visit-children'\n\n// Move white space starting a sentence up, so they are the siblings of\n// sentences.\nexport var makeInitialWhiteSpaceSiblings = visitChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var next\n\n  if (\n    children &&\n    children.length > 0 &&\n    children[0].type === 'WhiteSpaceNode'\n  ) {\n    parent.children.splice(index, 0, children.shift())\n    next = children[0]\n\n    if (next && next.position && child.position) {\n      child.position.start = next.position.start\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Merge a sentence into its previous sentence, when the sentence starts with a\n// comma.\nexport var mergeAffixExceptions = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var node\n  var position\n  var value\n  var previousChild\n\n  if (!children || children.length === 0 || index < 1) {\n    return\n  }\n\n  position = -1\n\n  while (children[++position]) {\n    node = children[position]\n\n    if (node.type === 'WordNode') {\n      return\n    }\n\n    if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n      value = toString(node)\n\n      if (value !== ',' && value !== ';') {\n        return\n      }\n\n      previousChild = parent.children[index - 1]\n\n      previousChild.children = previousChild.children.concat(children)\n\n      // Update position.\n      if (previousChild.position && child.position) {\n        previousChild.position.end = child.position.end\n      }\n\n      parent.children.splice(index, 1)\n\n      // Next, iterate over the node *now* at the current position.\n      return index\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Closing or final punctuation, or terminal markers that should still be\n// included in the previous sentence, even though they follow the sentence’s\n// terminal marker.\nimport {affixSymbol} from '../expressions.js'\n\n// Move certain punctuation following a terminal marker (thus in the next\n// sentence) to the previous sentence.\nexport var mergeAffixSymbol = modifyChildren(function (child, index, parent) {\n  var children = child.children\n  var first\n  var second\n  var previous\n\n  if (children && children.length > 0 && index > 0) {\n    first = children[0]\n    second = children[1]\n    previous = parent.children[index - 1]\n\n    if (\n      (first.type === 'SymbolNode' || first.type === 'PunctuationNode') &&\n      affixSymbol.test(toString(first))\n    ) {\n      previous.children.push(children.shift())\n\n      // Update position.\n      if (first.position && previous.position) {\n        previous.position.end = first.position.end\n      }\n\n      if (second && second.position && child.position) {\n        child.position.start = second.position.start\n      }\n\n      // Next, iterate over the previous node again.\n      return index - 1\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Merge certain punctuation marks into their preceding words.\nexport var mergeFinalWordSymbol = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children\n  var previous\n  var next\n\n  if (\n    index > 0 &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === '-'\n  ) {\n    children = parent.children\n    previous = children[index - 1]\n    next = children[index + 1]\n\n    if (\n      (!next || next.type !== 'WordNode') &&\n      previous &&\n      previous.type === 'WordNode'\n    ) {\n      // Remove `child` from parent.\n      children.splice(index, 1)\n\n      // Add the punctuation mark at the end of the previous node.\n      previous.children.push(child)\n\n      // Update position.\n      if (previous.position && child.position) {\n        previous.position.end = child.position.end\n      }\n\n      // Next, iterate over the node *now* at the current position (which was\n      // the next node).\n      return index\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\nimport {digitStart} from '../expressions.js'\n\n// Merge a sentence into its previous sentence, when the sentence starts with a\n// lower case letter.\nexport var mergeInitialDigitSentences = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var siblings = parent.children\n  var previous = siblings[index - 1]\n  var head = children[0]\n\n  if (\n    previous &&\n    head &&\n    head.type === 'WordNode' &&\n    digitStart.test(toString(head))\n  ) {\n    previous.children = previous.children.concat(children)\n    siblings.splice(index, 1)\n\n    // Update position.\n    if (previous.position && child.position) {\n      previous.position.end = child.position.end\n    }\n\n    // Next, iterate over the node *now* at the current position.\n    return index\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Initial lowercase letter.\nimport {lowerInitial} from '../expressions.js'\n\n// Merge a sentence into its previous sentence, when the sentence starts with a\n// lower case letter.\nexport var mergeInitialLowerCaseLetterSentences = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var position\n  var node\n  var siblings\n  var previous\n\n  if (children && children.length > 0 && index > 0) {\n    position = -1\n\n    while (children[++position]) {\n      node = children[position]\n\n      if (node.type === 'WordNode') {\n        if (!lowerInitial.test(toString(node))) {\n          return\n        }\n\n        siblings = parent.children\n\n        previous = siblings[index - 1]\n\n        previous.children = previous.children.concat(children)\n\n        siblings.splice(index, 1)\n\n        // Update position.\n        if (previous.position && child.position) {\n          previous.position.end = child.position.end\n        }\n\n        // Next, iterate over the node *now* at the current position.\n        return index\n      }\n\n      if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n        return\n      }\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Merge certain punctuation marks into their following words.\nexport var mergeInitialWordSymbol = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children\n  var next\n\n  if (\n    (child.type !== 'SymbolNode' && child.type !== 'PunctuationNode') ||\n    toString(child) !== '&'\n  ) {\n    return\n  }\n\n  children = parent.children\n\n  next = children[index + 1]\n\n  // If either a previous word, or no following word, exists, exit early.\n  if (\n    (index > 0 && children[index - 1].type === 'WordNode') ||\n    !(next && next.type === 'WordNode')\n  ) {\n    return\n  }\n\n  // Remove `child` from parent.\n  children.splice(index, 1)\n\n  // Add the punctuation mark at the start of the next node.\n  next.children.unshift(child)\n\n  // Update position.\n  if (next.position && child.position) {\n    next.position.start = child.position.start\n  }\n\n  // Next, iterate over the node at the previous position, as it's now adjacent\n  // to a following word.\n  return index - 1\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\nimport {numerical} from '../expressions.js'\n\n// Merge initialisms.\nexport var mergeInitialisms = modifyChildren(function (child, index, parent) {\n  var siblings\n  var previous\n  var children\n  var position\n  var otherChild\n  var isAllDigits\n  var value\n\n  if (index > 0 && toString(child) === '.') {\n    siblings = parent.children\n\n    previous = siblings[index - 1]\n    children = previous.children\n\n    if (\n      previous.type === 'WordNode' &&\n      children &&\n      children.length !== 1 &&\n      children.length % 2 !== 0\n    ) {\n      position = children.length\n      isAllDigits = true\n\n      while (children[--position]) {\n        otherChild = children[position]\n\n        value = toString(otherChild)\n\n        if (position % 2 === 0) {\n          // Initialisms consist of one character values.\n          if (value.length > 1) {\n            return\n          }\n\n          if (!numerical.test(value)) {\n            isAllDigits = false\n          }\n        } else if (value !== '.') {\n          if (position < children.length - 2) {\n            break\n          } else {\n            return\n          }\n        }\n      }\n\n      if (!isAllDigits) {\n        // Remove `child` from parent.\n        siblings.splice(index, 1)\n\n        // Add child to the previous children.\n        children.push(child)\n\n        // Update position.\n        if (previous.position && child.position) {\n          previous.position.end = child.position.end\n        }\n\n        // Next, iterate over the node *now* at the current position.\n        return index\n      }\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\nvar slash = '/'\n\n// Merge words joined by certain punctuation marks.\nexport var mergeInnerWordSlash = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var siblings = parent.children\n  var previous\n  var next\n  var previousValue\n  var nextValue\n  var queue\n  var tail\n  var count\n\n  previous = siblings[index - 1]\n  next = siblings[index + 1]\n\n  if (\n    previous &&\n    previous.type === 'WordNode' &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === slash\n  ) {\n    previousValue = toString(previous)\n    tail = child\n    queue = [child]\n    count = 1\n\n    if (next && next.type === 'WordNode') {\n      nextValue = toString(next)\n      tail = next\n      queue = queue.concat(next.children)\n      count++\n    }\n\n    if (previousValue.length < 3 && (!nextValue || nextValue.length < 3)) {\n      // Add all found tokens to `prev`s children.\n      previous.children = previous.children.concat(queue)\n\n      siblings.splice(index, count)\n\n      // Update position.\n      if (previous.position && tail.position) {\n        previous.position.end = tail.position.end\n      }\n\n      // Next, iterate over the node *now* at the current position.\n      return index\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Symbols part of surrounding words.\nimport {wordSymbolInner} from '../expressions.js'\n\n// Merge words joined by certain punctuation marks.\nexport var mergeInnerWordSymbol = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var siblings\n  var sibling\n  var previous\n  var last\n  var position\n  var tokens\n  var queue\n\n  if (\n    index > 0 &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode')\n  ) {\n    siblings = parent.children\n    previous = siblings[index - 1]\n\n    if (previous && previous.type === 'WordNode') {\n      position = index - 1\n\n      tokens = []\n      queue = []\n\n      // -   If a token which is neither word nor inner word symbol is found,\n      //     the loop is broken\n      // -   If an inner word symbol is found,  it’s queued\n      // -   If a word is found, it’s queued (and the queue stored and emptied)\n      while (siblings[++position]) {\n        sibling = siblings[position]\n\n        if (sibling.type === 'WordNode') {\n          tokens = tokens.concat(queue, sibling.children)\n\n          queue = []\n        } else if (\n          (sibling.type === 'SymbolNode' ||\n            sibling.type === 'PunctuationNode') &&\n          wordSymbolInner.test(toString(sibling))\n        ) {\n          queue.push(sibling)\n        } else {\n          break\n        }\n      }\n\n      if (tokens.length > 0) {\n        // If there is a queue, remove its length from `position`.\n        if (queue.length > 0) {\n          position -= queue.length\n        }\n\n        // Remove every (one or more) inner-word punctuation marks and children\n        // of words.\n        siblings.splice(index, position - index)\n\n        // Add all found tokens to `prev`s children.\n        previous.children = previous.children.concat(tokens)\n\n        last = tokens[tokens.length - 1]\n\n        // Update position.\n        if (previous.position && last.position) {\n          previous.position.end = last.position.end\n        }\n\n        // Next, iterate over the node *now* at the current position.\n        return index\n      }\n    }\n  }\n})\n","import modifyChildren from 'unist-util-modify-children'\n\n// Merge a sentence into the following sentence, when the sentence does not\n// contain word tokens.\nexport var mergeNonWordSentences = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var position = -1\n  var previous\n  var next\n\n  while (children[++position]) {\n    if (children[position].type === 'WordNode') {\n      return\n    }\n  }\n\n  previous = parent.children[index - 1]\n\n  if (previous) {\n    previous.children = previous.children.concat(children)\n\n    // Remove the child.\n    parent.children.splice(index, 1)\n\n    // Patch position.\n    if (previous.position && child.position) {\n      previous.position.end = child.position.end\n    }\n\n    // Next, iterate over the node *now* at the current position (which was the\n    // next node).\n    return index\n  }\n\n  next = parent.children[index + 1]\n\n  if (next) {\n    next.children = children.concat(next.children)\n\n    // Patch position.\n    if (next.position && child.position) {\n      next.position.start = child.position.start\n    }\n\n    // Remove the child.\n    parent.children.splice(index, 1)\n  }\n})\n","import toString from 'nlcst-to-string'\nimport modifyChildren from 'unist-util-modify-children'\n\n// Full stop characters that should not be treated as terminal sentence markers:\n// A case-insensitive abbreviation.\nvar abbreviationPrefix = new RegExp(\n  '^(' +\n    '[0-9]{1,3}|' +\n    '[a-z]|' +\n    // Common Latin Abbreviations:\n    // Based on: <https://en.wikipedia.org/wiki/List_of_Latin_abbreviations>.\n    // Where only the abbreviations written without joining full stops,\n    // but with a final full stop, were extracted.\n    //\n    // circa, capitulus, confer, compare, centum weight, eadem, (et) alii,\n    // et cetera, floruit, foliis, ibidem, idem, nemine && contradicente,\n    // opere && citato, (per) cent, (per) procurationem, (pro) tempore,\n    // sic erat scriptum, (et) sequentia, statim, videlicet. */\n    'al|ca|cap|cca|cent|cf|cit|con|cp|cwt|ead|etc|ff|' +\n    'fl|ibid|id|nem|op|pro|seq|sic|stat|tem|viz' +\n    ')$'\n)\n\n// Merge a sentence into its next sentence, when the sentence ends with a\n// certain word.\nexport var mergePrefixExceptions = modifyChildren(function (\n  child,\n  index,\n  parent\n) {\n  var children = child.children\n  var period\n  var node\n  var next\n\n  if (children && children.length > 1) {\n    period = children[children.length - 1]\n\n    if (period && toString(period) === '.') {\n      node = children[children.length - 2]\n\n      if (\n        node &&\n        node.type === 'WordNode' &&\n        abbreviationPrefix.test(toString(node).toLowerCase())\n      ) {\n        // Merge period into abbreviation.\n        node.children.push(period)\n        children.pop()\n\n        // Update position.\n        if (period.position && node.position) {\n          node.position.end = period.position.end\n        }\n\n        // Merge sentences.\n        next = parent.children[index + 1]\n\n        if (next) {\n          child.children = children.concat(next.children)\n\n          parent.children.splice(index + 1, 1)\n\n          // Update position.\n          if (next.position && child.position) {\n            child.position.end = next.position.end\n          }\n\n          // Next, iterate over the current node again.\n          return index - 1\n        }\n      }\n    }\n  }\n})\n","import toString from 'nlcst-to-string'\nimport visitChildren from 'unist-util-visit-children'\n\n// Full stop characters that should not be treated as terminal sentence markers:\n// A case-insensitive abbreviation.\nimport {terminalMarker} from '../expressions.js'\n\n// Merge non-terminal-marker full stops into the previous word (if available),\n// or the next word (if available).\nexport var mergeRemainingFullStops = visitChildren(function (child) {\n  var children = child.children\n  var position = children.length\n  var hasFoundDelimiter = false\n  var grandchild\n  var previous\n  var next\n  var nextNext\n\n  while (children[--position]) {\n    grandchild = children[position]\n\n    if (\n      grandchild.type !== 'SymbolNode' &&\n      grandchild.type !== 'PunctuationNode'\n    ) {\n      // This is a sentence without terminal marker, so we 'fool' the code to\n      // make it think we have found one.\n      if (grandchild.type === 'WordNode') {\n        hasFoundDelimiter = true\n      }\n\n      continue\n    }\n\n    // Exit when this token is not a terminal marker.\n    if (!terminalMarker.test(toString(grandchild))) {\n      continue\n    }\n\n    // Ignore the first terminal marker found (starting at the end), as it\n    // should not be merged.\n    if (!hasFoundDelimiter) {\n      hasFoundDelimiter = true\n\n      continue\n    }\n\n    // Only merge a single full stop.\n    if (toString(grandchild) !== '.') {\n      continue\n    }\n\n    previous = children[position - 1]\n    next = children[position + 1]\n\n    if (previous && previous.type === 'WordNode') {\n      nextNext = children[position + 2]\n\n      // Continue when the full stop is followed by a space and another full\n      // stop, such as: `{.} .`\n      if (\n        next &&\n        nextNext &&\n        next.type === 'WhiteSpaceNode' &&\n        toString(nextNext) === '.'\n      ) {\n        continue\n      }\n\n      // Remove `child` from parent.\n      children.splice(position, 1)\n\n      // Add the punctuation mark at the end of the previous node.\n      previous.children.push(grandchild)\n\n      // Update position.\n      if (grandchild.position && previous.position) {\n        previous.position.end = grandchild.position.end\n      }\n\n      position--\n    } else if (next && next.type === 'WordNode') {\n      // Remove `child` from parent.\n      children.splice(position, 1)\n\n      // Add the punctuation mark at the start of the next node.\n      next.children.unshift(grandchild)\n\n      if (grandchild.position && next.position) {\n        next.position.start = grandchild.position.start\n      }\n    }\n  }\n})\n","import modifyChildren from 'unist-util-modify-children'\n\n// Merge multiple words. This merges the children of adjacent words, something\n// which should not occur naturally by parse-latin, but might happen when custom\n// tokens were passed in.\nexport var mergeWords = modifyChildren(function (child, index, parent) {\n  var siblings = parent.children\n  var next\n\n  if (child.type === 'WordNode') {\n    next = siblings[index + 1]\n\n    if (next && next.type === 'WordNode') {\n      // Remove `next` from parent.\n      siblings.splice(index + 1, 1)\n\n      // Add the punctuation mark at the end of the previous node.\n      child.children = child.children.concat(next.children)\n\n      // Update position.\n      if (next.position && child.position) {\n        child.position.end = next.position.end\n      }\n\n      // Next, re-iterate the current node.\n      return index\n    }\n  }\n})\n","import visitChildren from 'unist-util-visit-children'\n\n// Patch the position on a parent node based on its first and last child.\nexport var patchPosition = visitChildren(function (child, index, node) {\n  var siblings = node.children\n\n  if (!child.position) {\n    return\n  }\n\n  if (\n    index < 1 &&\n    /* c8 ignore next */\n    (!node.position || !node.position.start)\n  ) {\n    patch(node)\n    node.position.start = child.position.start\n  }\n\n  if (index === siblings.length - 1 && (!node.position || !node.position.end)) {\n    patch(node)\n    node.position.end = child.position.end\n  }\n})\n\n// Add a `position` object when it does not yet exist on `node`.\nfunction patch(node) {\n  if (!node.position) {\n    node.position = {}\n  }\n}\n","import modifyChildren from 'unist-util-modify-children'\n\n// Remove empty children.\nexport var removeEmptyNodes = modifyChildren(function (child, index, parent) {\n  if ('children' in child && child.children.length === 0) {\n    parent.children.splice(index, 1)\n\n    // Next, iterate over the node *now* at the current position (which was the\n    // next node).\n    return index\n  }\n})\n","import toString from 'nlcst-to-string'\n\n// Factory to create a tokenizer based on a given `expression`.\nexport function tokenizerFactory(childType, expression) {\n  return tokenizer\n\n  // A function that splits.\n  function tokenizer(node) {\n    var children = []\n    var tokens = node.children\n    var type = node.type\n    var index = -1\n    var lastIndex = tokens.length - 1\n    var start = 0\n    var first\n    var last\n    var parent\n\n    while (++index < tokens.length) {\n      if (\n        index === lastIndex ||\n        (tokens[index].type === childType &&\n          expression.test(toString(tokens[index])))\n      ) {\n        first = tokens[start]\n        last = tokens[index]\n\n        parent = {type, children: tokens.slice(start, index + 1)}\n\n        if (first.position && last.position) {\n          parent.position = {\n            start: first.position.start,\n            end: last.position.end\n          }\n        }\n\n        children.push(parent)\n\n        start = index + 1\n      }\n    }\n\n    return children\n  }\n}\n","export var emoji = {\n  '💯': 3,\n  ':100:': 3,\n  '😠': -3,\n  ':angry:': -3,\n  '😧': -3,\n  ':anguished:': -3,\n  '😲': 2,\n  ':astonished:': 2,\n  '🖤': 3,\n  ':black_heart:': 3,\n  '💙': 3,\n  ':blue_heart:': 3,\n  '😊': 2,\n  ':blush:': 2,\n  '💔': -3,\n  ':broken_heart:': -3,\n  '👏': 3,\n  ':clap:': 3,\n  '🤡': 0,\n  ':clown_face:': 0,\n  '😰': -2,\n  ':cold_sweat:': -2,\n  '😖': -2,\n  ':confounded:': -2,\n  '😕': -2,\n  ':confused:': -2,\n  '🤠': 2,\n  ':cowboy_hat_face:': 2,\n  '🤞': 2,\n  ':crossed_fingers:': 2,\n  '😢': -2,\n  ':cry:': -2,\n  '😿': -2,\n  ':crying_cat_face:': -2,\n  '💘': 3,\n  ':cupid:': 3,\n  '😞': -2,\n  ':disappointed:': -2,\n  '😥': -1,\n  ':disappointed_relieved:': -1,\n  '😵': -1,\n  ':dizzy_face:': -1,\n  '🤤': 0,\n  ':drooling_face:': 0,\n  '😑': 0,\n  ':expressionless:': 0,\n  '🤕': -2,\n  ':face_with_head_bandage:': -2,\n  '🤒': -1,\n  ':face_with_thermometer:': -1,\n  '😨': -2,\n  ':fearful:': -2,\n  '😳': -2,\n  ':flushed:': -2,\n  '😦': -1,\n  ':frowning:': -1,\n  '☹️': -2,\n  ':frowning_face:': -2,\n  '🖕': -4,\n  ':middle_finger:': -4,\n  '👻': -1,\n  ':ghost:': -1,\n  '💝': 3,\n  ':gift_heart:': 3,\n  '💚': 3,\n  ':green_heart:': 3,\n  '😬': -2,\n  ':grimacing:': -2,\n  '😁': 2,\n  ':grin:': 2,\n  '😀': 2,\n  ':grinning:': 2,\n  '🤝': 1,\n  ':handshake:': 1,\n  '❤️': 3,\n  ':heart:': 3,\n  '😍': 3,\n  ':heart_eyes:': 3,\n  '😻': 3,\n  ':heart_eyes_cat:': 3,\n  '💓': 3,\n  ':heartbeat:': 3,\n  '💗': 3,\n  ':heartpulse:': 3,\n  '🤗': 2,\n  ':hugs:': 2,\n  '😯': -1,\n  ':hushed:': -1,\n  '👿': -4,\n  ':imp:': -4,\n  '😇': 3,\n  ':innocent:': 3,\n  '😂': 3,\n  ':joy:': 3,\n  '😹': 3,\n  ':joy_cat:': 3,\n  '💋': 2,\n  ':kiss:': 2,\n  '😗': 2,\n  ':kissing:': 2,\n  '😽': 2,\n  ':kissing_cat:': 2,\n  '😚': 2,\n  ':kissing_closed_eyes:': 2,\n  '😘': 3,\n  ':kissing_heart:': 3,\n  '😙': 2,\n  ':kissing_smiling_eyes:': 2,\n  '😆': 1,\n  ':laughing:': 1,\n  '👄': 2,\n  ':lips:': 2,\n  '🤥': -2,\n  ':lying_face:': -2,\n  '😷': -1,\n  ':mask:': -1,\n  '🤑': 0,\n  ':money_mouth_face:': 0,\n  '🤢': -2,\n  ':nauseated_face:': -2,\n  '🤓': -1,\n  ':nerd_face:': -1,\n  '😐': 0,\n  ':neutral_face:': 0,\n  '😶': 0,\n  ':no_mouth:': 0,\n  '👌': 2,\n  ':ok_hand:': 2,\n  '😮': -2,\n  ':open_mouth:': -2,\n  '😔': -1,\n  ':pensive:': -1,\n  '😣': -2,\n  ':persevere:': -2,\n  '😾': -4,\n  ':pouting_cat:': -4,\n  '🙏': 1,\n  ':pray:': 1,\n  '👊': -1,\n  ':fist_oncoming:': -1,\n  '💜': 3,\n  ':purple_heart:': 3,\n  '😡': -4,\n  ':rage:': -4,\n  '🙌': 4,\n  ':raised_hands:': 4,\n  '☺️': 2,\n  ':relaxed:': 2,\n  '😌': 2,\n  ':relieved:': 2,\n  '💞': 3,\n  ':revolving_hearts:': 3,\n  '🤣': 4,\n  ':rofl:': 4,\n  '🙄': -1,\n  ':roll_eyes:': -1,\n  '😱': -3,\n  ':scream:': -3,\n  '🙀': -3,\n  ':scream_cat:': -3,\n  '💩': -3,\n  ':hankey:': -3,\n  '💀': -2,\n  ':skull:': -2,\n  '☠️': -2,\n  ':skull_and_crossbones:': -2,\n  '😴': 0,\n  ':sleeping:': 0,\n  '😪': 0,\n  ':sleepy:': 0,\n  '🙁': -1,\n  ':slightly_frowning_face:': -1,\n  '🙂': 1,\n  ':slightly_smiling_face:': 1,\n  '😄': 2,\n  ':smile:': 2,\n  '😸': 2,\n  ':smile_cat:': 2,\n  '😃': 2,\n  ':smiley:': 2,\n  '😺': 2,\n  ':smiley_cat:': 2,\n  '😈': -3,\n  ':smiling_imp:': -3,\n  '😏': 2,\n  ':smirk:': 2,\n  '😼': 2,\n  ':smirk_cat:': 2,\n  '🤧': -2,\n  ':sneezing_face:': -2,\n  '😭': -3,\n  ':sob:': -3,\n  '💖': 3,\n  ':sparkling_heart:': 3,\n  '😛': 1,\n  ':stuck_out_tongue:': 1,\n  '😝': 0,\n  ':stuck_out_tongue_closed_eyes:': 0,\n  '😜': -1,\n  ':stuck_out_tongue_winking_eye:': -1,\n  '😎': 1,\n  ':sunglasses:': 1,\n  '😓': -1,\n  ':sweat:': -1,\n  '😅': 2,\n  ':sweat_smile:': 2,\n  '🤔': -1,\n  ':thinking:': -1,\n  '👎': -2,\n  ':-1:': -2,\n  '👍': 2,\n  ':+1:': 2,\n  '😫': -2,\n  ':tired_face:': -2,\n  '😤': 0,\n  ':triumph:': 0,\n  '💕': 3,\n  ':two_hearts:': 3,\n  '😒': -2,\n  ':unamused:': -2,\n  '🙃': 0,\n  ':upside_down_face:': 0,\n  '✌️': 2,\n  ':v:': 2,\n  '😩': -2,\n  ':weary:': -2,\n  '😉': 3,\n  ':wink:': 3,\n  '😟': -3,\n  ':worried:': -3,\n  '💛': 3,\n  ':yellow_heart:': 3,\n  '😋': 3,\n  ':yum:': 3,\n  '🤐': -1,\n  ':zipper_mouth_face:': -1\n}\n","/**\n * @typedef {Object} Polarity\n * @property {number} polarity\n * @property {number} positivity\n * @property {number} negativity\n * @property {Array.<string>} positive\n * @property {Array.<string>} negative\n *\n * @typedef {Object.<string, number>} Inject\n */\n\nimport {afinn165} from 'afinn-165'\nimport {emoji} from './emoji.js'\n\nexport var polarities = {}\n\nvar own = {}.hasOwnProperty\n\ninject(afinn165)\ninject(emoji)\n\n/**\n * Get a polarity result from given values, optionally with one time injections.\n *\n * @param {Array.<string>} values\n * @param {Inject} inject\n * @returns {Polarity}\n */\nexport function polarity(values, inject) {\n  var words = values || []\n  var index = words.length === 0 ? 1 : words.length\n  var positivity = 0\n  var negativity = 0\n  /** @type {Array.<string>} */\n  var positive = []\n  /** @type {Array.<string>} */\n  var negative = []\n  /** @type {string} */\n  var value\n  /** @type {number} */\n  var weight\n\n  while (index--) {\n    value = words[index]\n    weight = getPolarity(value, inject)\n\n    if (!weight) {\n      continue\n    }\n\n    if (weight > 0) {\n      positive.push(value)\n      positivity += weight\n    } else {\n      negative.push(value)\n      negativity += weight\n    }\n  }\n\n  return {\n    polarity: positivity + negativity,\n    positivity,\n    negativity,\n    positive,\n    negative\n  }\n}\n\n/**\n * Inject values on the `polarities` object.\n *\n * @param {Inject} values\n */\nexport function inject(values) {\n  /** @type {string} */\n  var value\n\n  for (value in values) {\n    if (own.call(values, value)) {\n      polarities[value] = values[value]\n    }\n  }\n}\n\n/**\n * Get the polarity of a word.\n *\n * @param {string} value\n * @param {Inject} inject\n */\nfunction getPolarity(value, inject) {\n  if (own.call(polarities, value)) {\n    return polarities[value]\n  }\n\n  if (inject && own.call(inject, value)) {\n    return inject[value]\n  }\n\n  return 0\n}\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","export const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","/**\n * Quote a value.\n *\n * @param value\n *   Value(s) to wrap in quotes\n * @param [open='\"']\n *   Opening quote\n * @param [close=open]\n *   Closing quote\n */\nexport const quotation =\n  /**\n   * @type {{\n   *   (value: string, open?: string, close?: string): string\n   *   (value: string[], open?: string, close?: string): string[]\n   * }}\n   */\n  (\n    /**\n     * @param {string|Array<string>} value\n     * @param {string} open\n     * @param {string} close\n     * @returns {string|string[]}\n     */\n    function (value, open, close) {\n      const start = open || '\"'\n      const end = close || start\n      /** @type {string[]} */\n      const result = []\n      let index = -1\n\n      if (Array.isArray(value)) {\n        while (++index < value.length) {\n          result[index] = start + value[index] + end\n        }\n\n        return result\n      }\n\n      if (typeof value === 'string') {\n        return start + value + end\n      }\n\n      throw new TypeError('Expected string or array of strings')\n    }\n  )\n","export const errors = {\n  abandonedHeadElementChild: {\n    reason: 'Unexpected metadata element after head',\n    description:\n      'Unexpected element after head. Expected the element before `</head>`',\n    url: false\n  },\n  abruptClosingOfEmptyComment: {\n    reason: 'Unexpected abruptly closed empty comment',\n    description: 'Unexpected `>` or `->`. Expected `-->` to close comments'\n  },\n  abruptDoctypePublicIdentifier: {\n    reason: 'Unexpected abruptly closed public identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the public identifier'\n  },\n  abruptDoctypeSystemIdentifier: {\n    reason: 'Unexpected abruptly closed system identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the identifier identifier'\n  },\n  absenceOfDigitsInNumericCharacterReference: {\n    reason: 'Unexpected non-digit at start of numeric character reference',\n    description:\n      'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'\n  },\n  cdataInHtmlContent: {\n    reason: 'Unexpected CDATA section in HTML',\n    description:\n      'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'\n  },\n  characterReferenceOutsideUnicodeRange: {\n    reason: 'Unexpected too big numeric character reference',\n    description:\n      'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'\n  },\n  closingOfElementWithOpenChildElements: {\n    reason: 'Unexpected closing tag with open child elements',\n    description:\n      'Unexpectedly closing tag. Expected other tags to be closed first',\n    url: false\n  },\n  controlCharacterInInputStream: {\n    reason: 'Unexpected control character',\n    description:\n      'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  controlCharacterReference: {\n    reason: 'Unexpected control character reference',\n    description:\n      'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  disallowedContentInNoscriptInHead: {\n    reason: 'Disallowed content inside `<noscript>` in `<head>`',\n    description:\n      'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',\n    url: false\n  },\n  duplicateAttribute: {\n    reason: 'Unexpected duplicate attribute',\n    description:\n      'Unexpectedly double attribute. Expected attributes to occur only once'\n  },\n  endTagWithAttributes: {\n    reason: 'Unexpected attribute on closing tag',\n    description: 'Unexpected attribute. Expected `>` instead'\n  },\n  endTagWithTrailingSolidus: {\n    reason: 'Unexpected slash at end of closing tag',\n    description: 'Unexpected `%c-1`. Expected `>` instead'\n  },\n  endTagWithoutMatchingOpenElement: {\n    reason: 'Unexpected unopened end tag',\n    description: 'Unexpected end tag. Expected no end tag or another end tag',\n    url: false\n  },\n  eofBeforeTagName: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected tag name instead'\n  },\n  eofInCdata: {\n    reason: 'Unexpected end of file in CDATA',\n    description: 'Unexpected end of file. Expected `]]>` to close the CDATA'\n  },\n  eofInComment: {\n    reason: 'Unexpected end of file in comment',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInDoctype: {\n    reason: 'Unexpected end of file in doctype',\n    description:\n      'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'\n  },\n  eofInElementThatCanContainOnlyText: {\n    reason: 'Unexpected end of file in element that can only contain text',\n    description: 'Unexpected end of file. Expected text or a closing tag',\n    url: false\n  },\n  eofInScriptHtmlCommentLikeText: {\n    reason: 'Unexpected end of file in comment inside script',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInTag: {\n    reason: 'Unexpected end of file in tag',\n    description: 'Unexpected end of file. Expected `>` to close the tag'\n  },\n  incorrectlyClosedComment: {\n    reason: 'Incorrectly closed comment',\n    description: 'Unexpected `%c-1`. Expected `-->` to close the comment'\n  },\n  incorrectlyOpenedComment: {\n    reason: 'Incorrectly opened comment',\n    description: 'Unexpected `%c`. Expected `<!--` to open the comment'\n  },\n  invalidCharacterSequenceAfterDoctypeName: {\n    reason: 'Invalid sequence after doctype name',\n    description: 'Unexpected sequence at `%c`. Expected `public` or `system`'\n  },\n  invalidFirstCharacterOfTagName: {\n    reason: 'Invalid first character in tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  misplacedDoctype: {\n    reason: 'Misplaced doctype',\n    description: 'Unexpected doctype. Expected doctype before head',\n    url: false\n  },\n  misplacedStartTagForHeadElement: {\n    reason: 'Misplaced `<head>` start tag',\n    description:\n      'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',\n    url: false\n  },\n  missingAttributeValue: {\n    reason: 'Missing attribute value',\n    description:\n      'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'\n  },\n  missingDoctype: {\n    reason: 'Missing doctype before other content',\n    description: 'Expected a `<!doctype html>` before anything else',\n    url: false\n  },\n  missingDoctypeName: {\n    reason: 'Missing doctype name',\n    description: 'Unexpected doctype end at `%c`. Expected `html` instead'\n  },\n  missingDoctypePublicIdentifier: {\n    reason: 'Missing public identifier in doctype',\n    description: 'Unexpected `%c`. Expected identifier for `public` instead'\n  },\n  missingDoctypeSystemIdentifier: {\n    reason: 'Missing system identifier in doctype',\n    description:\n      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `\"about:legacy-compat\"`)'\n  },\n  missingEndTagName: {\n    reason: 'Missing name in end tag',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  missingQuoteBeforeDoctypePublicIdentifier: {\n    reason: 'Missing quote before public identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingQuoteBeforeDoctypeSystemIdentifier: {\n    reason: 'Missing quote before system identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingSemicolonAfterCharacterReference: {\n    reason: 'Missing semicolon after character reference',\n    description: 'Unexpected `%c`. Expected `;` instead'\n  },\n  missingWhitespaceAfterDoctypePublicKeyword: {\n    reason: 'Missing whitespace after public identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceAfterDoctypeSystemKeyword: {\n    reason: 'Missing whitespace after system identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBeforeDoctypeName: {\n    reason: 'Missing whitespace before doctype name',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenAttributes: {\n    reason: 'Missing whitespace between attributes',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {\n    reason:\n      'Missing whitespace between public and system identifiers in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  nestedComment: {\n    reason: 'Unexpected nested comment',\n    description: 'Unexpected `<!--`. Expected `-->`'\n  },\n  nestedNoscriptInHead: {\n    reason: 'Unexpected nested `<noscript>` in `<head>`',\n    description:\n      'Unexpected `<noscript>`. Expected a closing tag or a meta element',\n    url: false\n  },\n  nonConformingDoctype: {\n    reason: 'Unexpected non-conforming doctype declaration',\n    description:\n      'Expected `<!doctype html>` or `<!doctype html system \"about:legacy-compat\">`',\n    url: false\n  },\n  nonVoidHtmlElementStartTagWithTrailingSolidus: {\n    reason: 'Unexpected trailing slash on start tag of non-void element',\n    description: 'Unexpected `/`. Expected `>` instead'\n  },\n  noncharacterCharacterReference: {\n    reason:\n      'Unexpected noncharacter code point referenced by character reference',\n    description: 'Unexpected code point. Do not use noncharacters in HTML'\n  },\n  noncharacterInInputStream: {\n    reason: 'Unexpected noncharacter character',\n    description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'\n  },\n  nullCharacterReference: {\n    reason: 'Unexpected NULL character referenced by character reference',\n    description: 'Unexpected code point. Do not use NULL characters in HTML'\n  },\n  openElementsLeftAfterEof: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected closing tag instead',\n    url: false\n  },\n  surrogateCharacterReference: {\n    reason: 'Unexpected surrogate character referenced by character reference',\n    description:\n      'Unexpected code point. Do not use lone surrogate characters in HTML'\n  },\n  surrogateInInputStream: {\n    reason: 'Unexpected surrogate character',\n    description:\n      'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'\n  },\n  unexpectedCharacterAfterDoctypeSystemIdentifier: {\n    reason: 'Invalid character after system identifier in doctype',\n    description: 'Unexpected character at `%c`. Expected `>`'\n  },\n  unexpectedCharacterInAttributeName: {\n    reason: 'Unexpected character in attribute name',\n    description:\n      'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'\n  },\n  unexpectedCharacterInUnquotedAttributeValue: {\n    reason: 'Unexpected character in unquoted attribute value',\n    description: 'Unexpected `%c`. Quote the attribute value to include it'\n  },\n  unexpectedEqualsSignBeforeAttributeName: {\n    reason: 'Unexpected equals sign before attribute name',\n    description: 'Unexpected `%c`. Add an attribute name before it'\n  },\n  unexpectedNullCharacter: {\n    reason: 'Unexpected NULL character',\n    description:\n      'Unexpected code point `%x`. Do not use NULL characters in HTML'\n  },\n  unexpectedQuestionMarkInsteadOfTagName: {\n    reason: 'Unexpected question mark instead of tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  unexpectedSolidusInTag: {\n    reason: 'Unexpected slash in tag',\n    description:\n      'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'\n  },\n  unknownNamedCharacterReference: {\n    reason: 'Unexpected unknown named character reference',\n    description:\n      'Unexpected character reference. Expected known named character references'\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {errors} from './errors.js'\n\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-'\n\nconst fatalities = {2: true, 1: false, 0: null}\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, options)\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse'\n    const onParseError = settings.emitParseErrors ? onerror : null\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    })\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    })\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code\n      const name = camelcase(code)\n      const setting = settings[name]\n      const config = setting === undefined || setting === null ? true : setting\n      const level = typeof config === 'number' ? config : config ? 1 : 0\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      }\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      }\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {reason: '', description: '', url: ''}\n        const message = file.message(format(info.reason), {start, end})\n        message.source = 'parse-error'\n        message.ruleId = code\n        message.fatal = fatalities[level]\n        message.note = format(info.description)\n        message.url = 'url' in info && info.url === false ? null : base + code\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value\n          .replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */ $1) => {\n            const offset = $1 ? -Number.parseInt($1, 10) : 0\n            const char = doc.charAt(error.startOffset + offset)\n            return char === '`' ? '` ` `' : char\n          })\n          .replace(\n            /%x/g,\n            () =>\n              '0x' +\n              doc.charCodeAt(error.startOffset).toString(16).toUpperCase()\n          )\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast-util-to-nlcst/lib/index.js').ParserInstance} ParserInstance\n * @typedef {import('hast-util-to-nlcst/lib/index.js').ParserConstructor} ParserConstructor\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n * @typedef {import('unified').Parser<any>} Parser\n */\n\nimport {toNlcst} from 'hast-util-to-nlcst'\n\n/**\n * Plugin to bridge or mutate to retext.\n *\n * If a destination processor is given, runs the destination with the new nlcst\n * tree (bridge-mode).\n * If a parser is given, returns the nlcst tree: further plugins run on that\n * tree (mutate-mode).\n *\n * @param options\n *   Either a processor (`unified().use(retextEnglish)…`) or a parser.\n */\nconst rehypeRetext =\n  /**\n   * @type {(import('unified').Plugin<[Processor], HastRoot, HastRoot> & import('unified').Plugin<[Parser], HastRoot, Node>)}\n   */\n  (\n    /**\n     * @param {Processor|Parser} destination\n     */\n    function (destination) {\n      return destination && 'run' in destination\n        ? bridge(destination)\n        : mutate(destination)\n    }\n  )\n\nexport default rehypeRetext\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Parser], HastRoot, Node>}\n */\nfunction mutate(parser) {\n  if (!parser) {\n    throw new Error(\n      'Expected `parser` (such as from `retext-english` or `parse-english`) or `processor` (a unified pipeline) as `options`'\n    )\n  }\n\n  // Assume the parser is a retext parser.\n  const Parser = /** @type {ParserInstance|ParserConstructor} */ (parser)\n  return (node, file) => toNlcst(node, file, Parser)\n}\n\n/**\n * Bridge-mode.\n * Runs the destination with the new nlcst tree.\n *\n * @type {import('unified').Plugin<[Processor], HastRoot>}\n */\nfunction bridge(destination) {\n  return (node, file, next) => {\n    // Assume the parser is a retext parser.\n    const Parser = /** @type {ParserInstance|ParserConstructor} */ (\n      destination.freeze().Parser\n    )\n\n    destination.run(toNlcst(node, file, Parser), file, (error) => {\n      next(error)\n    })\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-frontmatter').Options} Options\n */\n\nimport {frontmatter} from 'micromark-extension-frontmatter'\nimport {\n  frontmatterFromMarkdown,\n  frontmatterToMarkdown\n} from 'mdast-util-frontmatter'\n\n/**\n * Plugin to add support for frontmatter.\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkFrontmatter(options = 'yaml') {\n  const data = this.data()\n\n  add('micromarkExtensions', frontmatter(options))\n  add('fromMarkdownExtensions', frontmatterFromMarkdown(options))\n  add('toMarkdownExtensions', frontmatterToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-mdxjs').Options} Options\n * @typedef {import('mdast-util-mdx')} DoNotTouchAsThisImportItIncludesMdxInTree\n */\n\nimport {mdxjs} from 'micromark-extension-mdxjs'\nimport {mdxFromMarkdown, mdxToMarkdown} from 'mdast-util-mdx'\n\n/**\n * Plugin to support MDX (import/exports: `export {x} from 'y'`; expressions:\n * `{1 + 1}`; and JSX: `<Video id={123} />`).\n *\n * @type {import('unified').Plugin<[Options?]|[], Root>}\n */\nexport default function remarkMdx(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', mdxjs(options))\n  add('fromMarkdownExtensions', mdxFromMarkdown)\n  add('toMarkdownExtensions', mdxToMarkdown)\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('unified-message-control')} MessageControl\n * @typedef {Omit<import('unified-message-control').OptionsWithoutReset, 'marker'>|Omit<import('unified-message-control').OptionsWithReset, 'marker'>} Options\n */\n\nimport unifiedMessageControl from 'unified-message-control'\nimport {commentMarker} from 'mdast-comment-marker'\n\nconst test = [\n  'html', // Comments are `html` nodes in mdast.\n  'comment', // In MDX@1, comments have their own node.\n  'mdxFlowExpression', // In MDX@2, comments exist in bracketed expressions.\n  'mdxTextExpression'\n]\n\n/**\n * Plugin to enable, disable, and ignore messages.\n *\n * @type {import('unified').Plugin<[Options], Root>}\n * @returns {(node: Root, file: VFile) => void}\n */\nexport default function remarkMessageControl(options) {\n  return unifiedMessageControl(\n    Object.assign({marker: commentMarker, test}, options)\n  )\n}\n","/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nimport remarkRetext from './lib/index.js'\n\nexport default remarkRetext\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-nlcst').ParserInstance} ParserInstance\n * @typedef {import('mdast-util-to-nlcst').ParserConstructor} ParserConstructor\n * @typedef {import('mdast-util-to-nlcst').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n * @typedef {import('unified').Parser<any>} Parser\n */\n\nimport {toNlcst} from 'mdast-util-to-nlcst'\n\n/**\n * Plugin to support retext.\n *\n * *   If a destination processor is given, runs the plugins attached to it with\n *     the new nlcst tree (bridge-mode).\n *     This given processor must have a parser attached (this can be done by\n *     using the plugin `retext-english` or similar) and should use other retext\n *     plugins.\n * *   If a parser is given, runs further plugins attached to the same processor\n *     with the new tree (mutate-mode).\n *     Such parsers are exported by packages like `retext-english` as `Parser`.\n *     You should use other retext plugins after `remark-retext`.\n *\n * @param destination\n *   Either a processor (`unified().use(retextEnglish)…`) or a parser.\n * @param options\n *   Configuration passed to `mdast-util-to-nlcst`.\n */\nconst remarkRetext =\n  /**\n   * @type {(import('unified').Plugin<[Processor, Options?]|[Processor], MdastRoot, MdastRoot> & import('unified').Plugin<[Parser, Options?]|[Parser], MdastRoot, Node>)}\n   */\n  (\n    /**\n     * @param {Processor|Parser} destination\n     * @param {Options|undefined} options\n     */\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination, options)\n    }\n  )\n\nexport default remarkRetext\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Parser, Options?], MdastRoot, Node>}\n */\nfunction mutate(parser, options) {\n  // Assume the parser is a retext parser.\n  const Parser = /** @type {ParserInstance|ParserConstructor} */ (parser)\n  return (node, file) => toNlcst(node, file, Parser, options)\n}\n\n/**\n * Bridge-mode.\n * Runs the destination with the new nlcst tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    // Assume the parser is a retext parser.\n    const Parser = /** @type {ParserConstructor|ParserInstance} */ (\n      destination.freeze().Parser\n    )\n\n    destination.run(toNlcst(node, file, Parser, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n","import retextEnglish, {Parser} from './lib/index.js'\n\nexport {Parser}\nexport default retextEnglish\n","/**\n * @typedef {import('nlcst').Root} Root\n */\n\nimport {unherit} from 'unherit'\n// @ts-expect-error: untyped.\nimport {ParseEnglish} from 'parse-english'\n\n/** @type {import('unified').ParserClass<Root>} */\nexport const Parser = ParseEnglish\n\n/** @type {import('unified').Plugin<void[], string, Root>} */\nexport default function retextEnglish() {\n  Object.assign(this, {Parser: unherit(ParseEnglish)})\n}\n","import {factory} from './lib/factory.js'\nimport {patterns} from './lib/en.js'\n\nconst retextEquality = factory(patterns, 'en')\n\nexport default retextEquality\n","/**\n * @typedef {import('./lib/factory.js').Options} Options\n */\n\nimport retextEquality from './en.js'\n\nexport default retextEquality\n","/**\n * @typedef Pattern\n * @property {string} id\n * @property {'or'|'basic'} type\n * @property {string[]} categories\n * @property {Record<string, string>} [considerate]\n * @property {Record<string, string>} inconsiderate\n * @property {string} [condition]\n * @property {string} [note]\n * @property {boolean} [apostrophe]\n */\n\n/** @type {Pattern[]} */\nexport const patterns = [\n  {\n    id: 'learning-disabled',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with learning disabilities': 'a'\n    },\n    inconsiderate: {\n      'learning disabled': 'a'\n    },\n    note: 'Refer to the person, rather than the disability, first.'\n  },\n  {\n    id: 'invalid',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'turned off': 'a',\n      'has a disability': 'a',\n      'person with a disability': 'a',\n      'people with disabilities': 'a'\n    },\n    inconsiderate: {\n      disabled: 'a',\n      invalid: 'a'\n    },\n    note: 'Refer to the person, rather than the disability, first.'\n  },\n  {\n    id: 'birth-defect',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'has a disability': 'a',\n      'person with a disability': 'a',\n      'people with disabilities': 'a'\n    },\n    inconsiderate: {\n      'birth defect': 'a'\n    },\n    note: 'Assumes/implies that a person with a disability is deficient or inferior to others. When possible, specify the functional ability or its restriction. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'suffers-from-disabilities',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'has a disability': 'a',\n      'person with a disability': 'a',\n      'people with disabilities': 'a'\n    },\n    inconsiderate: {\n      'suffers from disabilities': 'a',\n      'suffering from disabilities': 'a',\n      'suffering from a disability': 'a',\n      'afflicted with disabilities': 'a',\n      'afflicted with a disability': 'a'\n    },\n    note: 'Assumes that a person with a disability has a reduced quality of life. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'intellectually-disabled-people',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'people with intellectual disabilities': 'a'\n    },\n    inconsiderate: {\n      'intellectually disabled people': 'a'\n    },\n    note: 'Refer to the person, rather than the disability, first. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'intellectually-disabled',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with an intellectual disability': 'a'\n    },\n    inconsiderate: {\n      'intellectually disabled': 'a',\n      'has intellectual issues': 'a',\n      'suffers from intellectual disabilities': 'a',\n      'suffering from intellectual disabilities': 'a',\n      'suffering from an intellectual disability': 'a',\n      'afflicted with intellectual disabilities': 'a',\n      'afflicted with a intellectual disability': 'a'\n    },\n    note: 'Assumes that a person with an intellectual disability has a reduced quality of life. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'nuts',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      rude: 'a',\n      malicious: 'a',\n      mean: 'a',\n      disgusting: 'a',\n      incredible: 'a',\n      vile: 'a',\n      'person with symptoms of mental illness': 'a',\n      'person with mental illness': 'a',\n      'person with symptoms of a mental disorder': 'a',\n      'person with a mental disorder': 'a'\n    },\n    inconsiderate: {\n      batshit: 'a',\n      psycho: 'a',\n      crazy: 'a',\n      delirious: 'a',\n      insane: 'a',\n      insanity: 'a',\n      loony: 'a',\n      lunacy: 'a',\n      lunatic: 'a',\n      'mentally ill': 'a',\n      psychopathology: 'a',\n      'mental defective': 'a',\n      moron: 'a',\n      moronic: 'a',\n      nuts: 'a',\n      'mental case': 'a',\n      mental: 'a'\n    },\n    note: 'Describe the behavior or illness without derogatory words. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'insanely',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      incredibly: 'a'\n    },\n    inconsiderate: {\n      insanely: 'a'\n    },\n    note: 'Describe the behavior or illness without derogatory words.'\n  },\n  {\n    id: 'sane',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      correct: 'a',\n      adequate: 'a',\n      sufficient: 'a',\n      consistent: 'a',\n      valid: 'a',\n      coherent: 'a',\n      sensible: 'a',\n      reasonable: 'a'\n    },\n    inconsiderate: {\n      sane: 'a'\n    },\n    note: 'When describing a mathematical or programmatic value, using the word “sane” needlessly invokes the topic of mental health.  Consider using a domain-specific or neutral term instead.'\n  },\n  {\n    id: 'sanity-check',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      check: 'a',\n      assertion: 'a',\n      validation: 'a',\n      'smoke test': 'a'\n    },\n    inconsiderate: {\n      'sanity check': 'a'\n    },\n    note: 'When describing a mathematical or programmatic value, using the phrase “sanity check” needlessly invokes the topic of mental health.  Consider using simply “check”, or a domain-specific or neutral term, instead.'\n  },\n  {\n    id: 'bipolar',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      fluctuating: 'a',\n      'person with bipolar disorder': 'a'\n    },\n    inconsiderate: {\n      bipolar: 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'schizo',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with schizophrenia': 'a'\n    },\n    inconsiderate: {\n      schizophrenic: 'a',\n      schizo: 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'manic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with schizophrenia': 'a'\n    },\n    inconsiderate: {\n      'suffers from schizophrenia': 'a',\n      'suffering from schizophrenia': 'a',\n      'afflicted with schizophrenia': 'a',\n      manic: 'a'\n    },\n    note: 'Assumes a person with schizophrenia experiences a reduced quality of life. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'handicapped-parking',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'accessible parking': 'a'\n    },\n    inconsiderate: {\n      'handicapped parking': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'handicapped',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a handicap': 'a',\n      accessible: 'a'\n    },\n    inconsiderate: {\n      handicapped: 'a'\n    },\n    note: 'Refer to the person, rather than the disability, first. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'amputee',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with an amputation': 'a'\n    },\n    inconsiderate: {\n      amputee: 'a'\n    },\n    note: 'Refer to the person, rather than the condition, first. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'gimp',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a limp': 'a'\n    },\n    inconsiderate: {\n      cripple: 'a',\n      crippled: 'a',\n      gimp: 'a'\n    },\n    note: 'Refer to the specific disability.'\n  },\n  {\n    id: 'mongoloid',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with Down Syndrome': 'a'\n    },\n    inconsiderate: {\n      mongoloid: 'a'\n    }\n  },\n  {\n    id: 'stroke-victim',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'individual who has had a stroke': 'a'\n    },\n    inconsiderate: {\n      'stroke victim': 'a',\n      'suffering from a stroke': 'a',\n      'victim of a stroke': 'a'\n    },\n    note: 'Refer to the person, rather than the condition, first.'\n  },\n  {\n    id: 'multiple-sclerosis-victim',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person who has multiple sclerosis': 'a'\n    },\n    inconsiderate: {\n      'suffers from multiple sclerosis': 'a',\n      'suffering from multiple sclerosis': 'a',\n      'victim of multiple sclerosis': 'a',\n      'multiple sclerosis victim': 'a',\n      'afflicted with multiple sclerosis': 'a'\n    }\n  },\n  {\n    id: 'suffers-from-md',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person who has muscular dystrophy': 'a'\n    },\n    inconsiderate: {\n      'suffers from muscular dystrophy': 'a',\n      'afflicted with muscular dystrophy': 'a',\n      'suffers from MD': 'a',\n      'afflicted with MD': 'a'\n    },\n    note: \"Refer to a person's condition as a state, not as an affliction. (source: https://ncdj.org/style-guide)\"\n  },\n  {\n    id: 'family-burden',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'with family support needs': 'a'\n    },\n    inconsiderate: {\n      'family burden': 'a'\n    }\n  },\n  {\n    id: 'asylum',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'psychiatric hospital': 'a',\n      'mental health hospital': 'a'\n    },\n    inconsiderate: {\n      asylum: 'a'\n    }\n  },\n  {\n    id: 'bedlam',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      chaos: 'a',\n      hectic: 'a',\n      pandemonium: 'a'\n    },\n    inconsiderate: {\n      bedlam: 'a',\n      madhouse: 'a',\n      'loony bin': 'a'\n    }\n  },\n  {\n    id: 'downs-syndrome',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Down Syndrome': 'a'\n    },\n    inconsiderate: {\n      'downs syndrome': 'a'\n    },\n    note: 'Source: https://media.specialolympics.org/soi/files/press-kit/2014_FactSheet_Final.pdf'\n  },\n  {\n    id: 'retard',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      silly: 'a',\n      dullard: 'a',\n      'person with Down Syndrome': 'a',\n      'person with developmental disabilities': 'a',\n      delay: 'a',\n      'hold back': 'a'\n    },\n    inconsiderate: {\n      retard: 'a',\n      retarded: 'a',\n      'short bus': 'a'\n    }\n  },\n  {\n    id: 'retards',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      sillies: 'a',\n      dullards: 'a',\n      'people with developmental disabilities': 'a',\n      'people with Down’s Syndrome': 'a',\n      delays: 'a',\n      'holds back': 'a'\n    },\n    inconsiderate: {\n      retards: 'a'\n    }\n  },\n  {\n    id: 'psychotic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a psychotic condition': 'a',\n      'person with psychosis': 'a'\n    },\n    inconsiderate: {\n      psychotic: 'a',\n      'suffers from psychosis': 'a',\n      'suffering from psychosis': 'a',\n      'afflicted with psychosis': 'a',\n      'victim of psychosis': 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition.'\n  },\n  {\n    id: 'lame',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      boring: 'a',\n      dull: 'a'\n    },\n    inconsiderate: {\n      lame: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'aids-victim',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with AIDS': 'a'\n    },\n    inconsiderate: {\n      'suffering from aids': 'a',\n      'suffer from aids': 'a',\n      'suffers from aids': 'a',\n      'afflicted with aids': 'a',\n      'victim of aids': 'a',\n      'aids victim': 'a'\n    }\n  },\n  {\n    id: 'wheelchair-bound',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'uses a wheelchair': 'a'\n    },\n    inconsiderate: {\n      'confined to a wheelchair': 'a',\n      'bound to a wheelchair': 'a',\n      'restricted to a wheelchair': 'a',\n      'wheelchair bound': 'a'\n    }\n  },\n  {\n    id: 'special-olympians',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      athletes: 'a',\n      'Special Olympics athletes': 'a'\n    },\n    inconsiderate: {\n      'special olympians': 'a',\n      'special olympic athletes': 'a'\n    },\n    note: 'When possible, use the exact discipline of sport. (source: https://media.specialolympics.org/soi/files/press-kit/2014_FactSheet_Final.pdf)'\n  },\n  {\n    id: 'ablebodied',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'non-disabled': 'a'\n    },\n    inconsiderate: {\n      ablebodied: 'a'\n    },\n    note: 'Can imply that people with disabilities lack the ability to use their bodies well. Sometimes `typical` can be used. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'addict',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a drug addiction': 'a',\n      'person recovering from a drug addiction': 'a'\n    },\n    inconsiderate: {\n      addict: 'a',\n      junkie: 'a'\n    },\n    note: 'Addiction is a neurobiological disease. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'addicts',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'people with a drug addiction': 'a',\n      'people recovering from a drug addiction': 'a'\n    },\n    inconsiderate: {\n      addicts: 'a',\n      junkies: 'a'\n    },\n    note: 'Addiction is a neurobiological disease. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'alcoholic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'someone with an alcohol problem': 'a'\n    },\n    inconsiderate: {\n      alcoholic: 'a',\n      'alcohol abuser': 'a'\n    },\n    note: 'Alcoholism is a neurobiological disease. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'deafmute',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      deaf: 'a'\n    },\n    inconsiderate: {\n      'deaf and dumb': 'a',\n      deafmute: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'senile',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with dementia': 'a'\n    },\n    inconsiderate: {\n      demented: 'a',\n      senile: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'depressed',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      sad: 'a',\n      blue: 'a',\n      'bummed out': 'a',\n      'person with seasonal affective disorder': 'a',\n      'person with psychotic depression': 'a',\n      'person with postpartum depression': 'a'\n    },\n    inconsiderate: {\n      depressed: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'dwarf',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with dwarfism': 'a',\n      'little person': 'a',\n      'little people': 'a',\n      LP: 'a',\n      'person of short stature': 'a'\n    },\n    inconsiderate: {\n      'vertically challenged': 'a',\n      midget: 'a',\n      'small person': 'a',\n      dwarf: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/,https://www.lpaonline.org/faq-#Midget'\n  },\n  {\n    id: 'dyslexic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with dyslexia': 'a'\n    },\n    inconsiderate: {\n      dyslexic: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'epileptic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with epilepsy': 'a'\n    },\n    inconsiderate: {\n      epileptic: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'hearing-impaired',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'hard of hearing': 'a',\n      'partially deaf': 'a',\n      'partial hearing loss': 'a',\n      deaf: 'a'\n    },\n    inconsiderate: {\n      'hearing impaired': 'a',\n      'hearing impairment': 'a'\n    },\n    note: 'When possible, ask the person what they prefer. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'victim-of-polio',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      polio: 'a',\n      'person who had polio': 'a'\n    },\n    inconsiderate: {\n      'infantile paralysis': 'a',\n      'suffers from polio': 'a',\n      'suffering from polio': 'a',\n      'suffering from a polio': 'a',\n      'afflicted with polio': 'a',\n      'afflicted with a polio': 'a',\n      'victim of polio': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'victim-of-an-injury',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'sustain an injury': 'a',\n      'receive an injury': 'a'\n    },\n    inconsiderate: {\n      'suffer from an injury': 'a',\n      'suffers from an injury': 'a',\n      'suffering from an injury': 'a',\n      'afflicted with an injury': 'a',\n      'victim of an injury': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'victim-of-injuries',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'sustain injuries': 'a',\n      'receive injuries': 'a'\n    },\n    inconsiderate: {\n      'suffer from injuries': 'a',\n      'suffers from injuries': 'a',\n      'suffering from injuries': 'a',\n      'afflicted with injuries': 'a',\n      'victim of injuries': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'paraplegic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with paraplegia': 'a'\n    },\n    inconsiderate: {\n      paraplegic: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'quadriplegic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with quadriplegia': 'a'\n    },\n    inconsiderate: {\n      quadriplegic: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'spaz',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with cerebral palsy': 'a',\n      twitch: 'a',\n      flinch: 'a',\n      hectic: 'a'\n    },\n    inconsiderate: {\n      spaz: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'spastic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with cerebral palsy': 'a',\n      twitch: 'a',\n      flinch: 'a'\n    },\n    inconsiderate: {\n      spastic: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'stammering',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      stuttering: 'a',\n      'disfluency of speech': 'a'\n    },\n    inconsiderate: {\n      stammering: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'stutterer',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person who stutters': 'a'\n    },\n    inconsiderate: {\n      stutterer: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'tourettes-syndrome',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Tourette syndrome': 'a'\n    },\n    inconsiderate: {\n      'tourettes syndrome': 'a',\n      'tourettes disorder': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'rehab-center',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'treatment center': 'a'\n    },\n    inconsiderate: {\n      'rehab center': 'a',\n      'detox center': 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'rehab',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      treatment: 'a'\n    },\n    inconsiderate: {\n      rehab: 'a',\n      detox: 'a'\n    },\n    note: 'Source: https://ncdj.org/style-guide/'\n  },\n  {\n    id: 'sociopath',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a personality disorder': 'a',\n      'person with psychopathic personality': 'a'\n    },\n    inconsiderate: {\n      sociopath: 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'sociopaths',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'people with psychopathic personalities': 'a',\n      'people with a personality disorder': 'a'\n    },\n    inconsiderate: {\n      sociopaths: 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition. (source: https://ncdj.org/style-guide/)'\n  },\n  {\n    id: 'dumb',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      foolish: 'a',\n      ludicrous: 'a',\n      speechless: 'a',\n      silent: 'a'\n    },\n    inconsiderate: {\n      dumb: 'a'\n    },\n    note: 'Dumb here is used in 2 different contexts , the inability to talk or as a curse word. (source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html)'\n  },\n  {\n    id: 'wacko',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      foolish: 'a',\n      ludicrous: 'a',\n      unintelligent: 'a'\n    },\n    inconsiderate: {\n      simpleton: 'a',\n      stupid: 'a',\n      wacko: 'a',\n      whacko: 'a',\n      'low iq': 'a'\n    },\n    note: 'Source: http://www.mmonjejr.com/2014/02/deconstructing-stupid.html'\n  },\n  {\n    id: 'panic-attack',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'fit of terror': 'a',\n      scare: 'a'\n    },\n    inconsiderate: {\n      'panic attack': 'a'\n    }\n  },\n  {\n    id: 'bony',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      thin: 'a',\n      slim: 'a'\n    },\n    inconsiderate: {\n      anorexic: 'a',\n      bony: 'a'\n    }\n  },\n  {\n    id: 'ocd',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'has an anxiety disorder': 'a',\n      obsessive: 'a',\n      pedantic: 'a',\n      niggly: 'a',\n      picky: 'a'\n    },\n    inconsiderate: {\n      neurotic: 'a',\n      ocd: 'a',\n      'o.c.d': 'a',\n      'o.c.d.': 'a'\n    },\n    note: 'Only use terms describing mental illness when referring to a professionally diagnosed medical condition. (source: https://english.stackexchange.com/questions/247550/)'\n  },\n  {\n    id: 'insomnia',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      restlessness: 'a',\n      sleeplessness: 'a'\n    },\n    inconsiderate: {\n      insomnia: 'a'\n    }\n  },\n  {\n    id: 'insomniac',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person who has insomnia': 'a'\n    },\n    inconsiderate: {\n      insomniac: 'a'\n    }\n  },\n  {\n    id: 'insomniacs',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'people who have insomnia': 'a'\n    },\n    inconsiderate: {\n      insomniacs: 'a'\n    }\n  },\n  {\n    id: 'barren',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      empty: 'a',\n      sterile: 'a',\n      infertile: 'a'\n    },\n    inconsiderate: {\n      barren: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'deaf-to',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      careless: 'a',\n      heartless: 'a',\n      indifferent: 'a',\n      insensitive: 'a'\n    },\n    inconsiderate: {\n      'blind to': 'a',\n      'blind eye to': 'a',\n      'blinded by': 'a',\n      'deaf to': 'a',\n      'deaf ear to': 'a',\n      'deafened by': 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'cretin',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      creep: 'a',\n      fool: 'a'\n    },\n    inconsiderate: {\n      cretin: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'daft',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      absurd: 'a',\n      foolish: 'a'\n    },\n    inconsiderate: {\n      daft: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'idiot',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      foolish: 'a',\n      ludicrous: 'a',\n      silly: 'a'\n    },\n    inconsiderate: {\n      feebleminded: 'a',\n      'feeble minded': 'a',\n      idiot: 'a',\n      imbecile: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'harelipped',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with a cleft-lip and palate': 'a'\n    },\n    inconsiderate: {\n      harelipped: 'a',\n      cleftlipped: 'a'\n    },\n    note: \"Sometimes it's cleft lip or palate, not both. Specify when possible. (source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html)\"\n  },\n  {\n    id: 'harelip',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'cleft-lip and palate': 'a'\n    },\n    inconsiderate: {\n      harelip: 'a',\n      'hare lip': 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'maniac',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      fanatic: 'a',\n      zealot: 'a',\n      enthusiast: 'a'\n    },\n    inconsiderate: {\n      maniac: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'buckteeth',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person with prominent teeth': 'a',\n      'prominent teeth': 'a'\n    },\n    inconsiderate: {\n      bucktoothed: 'a',\n      buckteeth: 'a'\n    }\n  },\n  {\n    id: 'special',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'has a disability': 'a',\n      'person with a disability': 'a',\n      'people with disabilities': 'a'\n    },\n    inconsiderate: {\n      challenged: 'a',\n      diffability: 'a',\n      'differently abled': 'a',\n      handicapable: 'a',\n      special: 'a',\n      'special needs': 'a',\n      'specially abled': 'a'\n    },\n    note: 'Euphemisms for disabilities can be infantilizing. (source: http://cdrnys.org/blog/disability-dialogue/the-disability-dialogue-4-disability-euphemisms-that-need-to-bite-the-dust/,https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html)'\n  },\n  {\n    id: 'libtard',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      disagreeable: 'a',\n      uneducated: 'a',\n      ignorant: 'a',\n      naive: 'a',\n      inconsiderate: 'a'\n    },\n    inconsiderate: {\n      fucktard: 'a',\n      libtard: 'a',\n      contard: 'a'\n    },\n    note: 'Source: https://www.autistichoya.com/p/ableist-words-and-terms-to-avoid.html'\n  },\n  {\n    id: 'add',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      disorganized: 'a',\n      distracted: 'a',\n      energetic: 'a',\n      hyperactive: 'a',\n      impetuous: 'a',\n      impulsive: 'a',\n      inattentive: 'a',\n      restless: 'a',\n      unfocused: 'a'\n    },\n    inconsiderate: {\n      ADD: 'a',\n      adhd: 'a',\n      'a.d.d.': 'a',\n      'a.d.h.d.': 'a'\n    }\n  },\n  {\n    id: 'dummy',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'test double': 'a',\n      placeholder: 'a',\n      fake: 'a',\n      stub: 'a'\n    },\n    inconsiderate: {\n      dummyvariable: 'a',\n      dummyvalue: 'a',\n      dummyobject: 'a',\n      dummy: 'a'\n    },\n    note: 'Dummy can refer to the inability to talk or be used as a derogatory word meaning stupid. In computer programming it is used where a value or behavior is unimportant. There are better alternatives for other use cases also.'\n  },\n  {\n    id: 'binge',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      enthusiastic: 'a',\n      spree: 'a'\n    },\n    inconsiderate: {\n      binge: 'a'\n    },\n    note: 'Binge might be insensitive towards folks with eating or drinking disorders (source: https://github.com/retextjs/retext-equality/issues/110)'\n  },\n  {\n    id: 'obvious',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      obvious: 'a',\n      obviously: 'a'\n    },\n    note: 'Not everything is as obvious as you might think. And if it isn’t obvious to the reader, it can hurt. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'just',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      just: 'a'\n    },\n    note: 'Not everything is as easy as you might think. And if it isn’t easy for the reader, it can hurt. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'basically',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      basically: 'a'\n    },\n    note: 'It’s probably not that basic. If you’re going to explain a confusing previous sentence with a clearer next sentence, why not drop the former and only use the latter? (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'simple',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      simple: 'a',\n      simply: 'a'\n    },\n    note: 'It’s probably not that simple. Even if it is, you probably don’t need to specifically say it. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'easy',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      easy: 'a',\n      easily: 'a'\n    },\n    note: 'It’s probably not that easy. Even if it is, you probably don’t need to specifically say it. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'of-course',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      'of course': 'a'\n    },\n    note: 'If it’s self-evident then maybe you don’t need to describe it. If it isn’t, don’t say it. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'clearly',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      clearly: 'a'\n    },\n    note: 'If it’s self-evident then maybe you don’t need to describe it. If it isn’t, don’t say it. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'everyone-knows',\n    type: 'basic',\n    categories: ['a'],\n    inconsiderate: {\n      'everyone knows': 'a'\n    },\n    note: 'If it’s self-evident then maybe you don’t need to describe it. If it isn’t, don’t say it. (source: https://css-tricks.com/words-avoid-educational-writing/)'\n  },\n  {\n    id: 'her-him',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      their: 'a',\n      theirs: 'a',\n      them: 'a'\n    },\n    inconsiderate: {\n      her: 'female',\n      hers: 'female',\n      him: 'male',\n      his: 'male'\n    },\n    condition: 'when referring to a person'\n  },\n  {\n    id: 'he-she',\n    type: 'or',\n    apostrophe: true,\n    categories: ['female', 'male'],\n    considerate: {\n      they: 'a',\n      it: 'a'\n    },\n    inconsiderate: {\n      she: 'female',\n      he: 'male',\n      \"she'd\": 'female',\n      \"he'd\": 'male',\n      \"she'll\": 'female',\n      \"he'll\": 'male',\n      \"she's\": 'female',\n      \"he's\": 'male'\n    }\n  },\n  {\n    id: 'herself-himself',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      themselves: 'a',\n      theirself: 'a',\n      self: 'a'\n    },\n    inconsiderate: {\n      herself: 'female',\n      himself: 'male'\n    }\n  },\n  {\n    id: 'boy-girl',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      kid: 'a',\n      child: 'a',\n      youth: 'a'\n    },\n    inconsiderate: {\n      girl: 'female',\n      boy: 'male'\n    },\n    condition: 'when referring to a person'\n  },\n  {\n    id: 'gals-man',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      people: 'a',\n      persons: 'a',\n      folks: 'a'\n    },\n    inconsiderate: {\n      women: 'female',\n      girls: 'female',\n      gals: 'female',\n      ladies: 'female',\n      man: 'male',\n      boys: 'male',\n      men: 'male',\n      guys: 'male',\n      dudes: 'male',\n      gents: 'male',\n      gentlemen: 'male'\n    }\n  },\n  {\n    id: 'gal-guy',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      person: 'a',\n      friend: 'a',\n      pal: 'a',\n      folk: 'a',\n      individual: 'a'\n    },\n    inconsiderate: {\n      woman: 'female',\n      gal: 'female',\n      lady: 'female',\n      babe: 'female',\n      bimbo: 'female',\n      chick: 'female',\n      guy: 'male',\n      lad: 'male',\n      fellow: 'male',\n      dude: 'male',\n      bro: 'male',\n      gentleman: 'male'\n    }\n  },\n  {\n    id: 'fatherland-motherland',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'native land': 'a',\n      homeland: 'a'\n    },\n    inconsiderate: {\n      motherland: 'female',\n      fatherland: 'male'\n    }\n  },\n  {\n    id: 'father-tongue-mother-tongue',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'native tongue': 'a',\n      'native language': 'a'\n    },\n    inconsiderate: {\n      'mother tongue': 'female',\n      'father tongue': 'male'\n    }\n  },\n  {\n    id: 'freshmen-freshwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'first-year students': 'a',\n      freshers: 'a'\n    },\n    inconsiderate: {\n      freshwomen: 'female',\n      freshmen: 'male'\n    }\n  },\n  {\n    id: 'garbageman-garbagewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'garbage collector': 'a',\n      'waste collector': 'a',\n      'trash collector': 'a'\n    },\n    inconsiderate: {\n      garbagewoman: 'female',\n      garbageman: 'male'\n    }\n  },\n  {\n    id: 'garbagemen-garbagewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'garbage collectors': 'a',\n      'waste collectors': 'a',\n      'trash collectors': 'a'\n    },\n    inconsiderate: {\n      garbagewomen: 'female',\n      garbagemen: 'male'\n    }\n  },\n  {\n    id: 'chairman-chairwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      chair: 'a',\n      head: 'a',\n      chairperson: 'a',\n      coordinator: 'a',\n      'committee head': 'a',\n      moderator: 'a',\n      'presiding officer': 'a'\n    },\n    inconsiderate: {\n      chairwoman: 'female',\n      chairman: 'male'\n    }\n  },\n  {\n    id: 'committee-man-committee-woman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'committee member': 'a'\n    },\n    inconsiderate: {\n      'committee woman': 'female',\n      'committee man': 'male'\n    }\n  },\n  {\n    id: 'cowboy-cowgirl',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      cowhand: 'a'\n    },\n    inconsiderate: {\n      cowgirl: 'female',\n      cowboy: 'male'\n    }\n  },\n  {\n    id: 'cowboys-cowgirls',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      cowhands: 'a'\n    },\n    inconsiderate: {\n      cowgirls: 'female',\n      cowboys: 'male'\n    }\n  },\n  {\n    id: 'cattleman-cattlewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'cattle rancher': 'a'\n    },\n    inconsiderate: {\n      cattlewoman: 'female',\n      cattleman: 'male'\n    }\n  },\n  {\n    id: 'cattlemen-cattlewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'cattle ranchers': 'a'\n    },\n    inconsiderate: {\n      cattlewomen: 'female',\n      cattlemen: 'male'\n    }\n  },\n  {\n    id: 'chairmen-chairwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      chairs: 'a',\n      chairpersons: 'a',\n      coordinators: 'a'\n    },\n    inconsiderate: {\n      chairwomen: 'female',\n      chairmen: 'male'\n    }\n  },\n  {\n    id: 'postman-postwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'mail carrier': 'a',\n      'letter carrier': 'a',\n      'postal worker': 'a'\n    },\n    inconsiderate: {\n      postwoman: 'female',\n      mailwoman: 'female',\n      postman: 'male',\n      mailman: 'male'\n    }\n  },\n  {\n    id: 'postmen-postwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'mail carriers': 'a',\n      'letter carriers': 'a',\n      'postal workers': 'a'\n    },\n    inconsiderate: {\n      postwomen: 'female',\n      mailwomen: 'female',\n      postmen: 'male',\n      mailmen: 'male'\n    }\n  },\n  {\n    id: 'chick-cop-policeman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      officer: 'a',\n      'police officer': 'a'\n    },\n    inconsiderate: {\n      policewoman: 'female',\n      policeman: 'male',\n      'chick cop': 'female'\n    }\n  },\n  {\n    id: 'policemen-policewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      officers: 'a',\n      'police officers': 'a'\n    },\n    inconsiderate: {\n      policewomen: 'female',\n      policemen: 'male'\n    }\n  },\n  {\n    id: 'steward-stewardess',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'flight attendant': 'a'\n    },\n    inconsiderate: {\n      stewardess: 'female',\n      steward: 'male'\n    }\n  },\n  {\n    id: 'stewardesses-stewards',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'flight attendants': 'a'\n    },\n    inconsiderate: {\n      stewardesses: 'female',\n      stewards: 'male'\n    }\n  },\n  {\n    id: 'congressman-congresswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'member of congress': 'a',\n      'congress person': 'a',\n      legislator: 'a',\n      representative: 'a'\n    },\n    inconsiderate: {\n      congresswoman: 'female',\n      congressman: 'male'\n    }\n  },\n  {\n    id: 'congressmen-congresswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'members of congress': 'a',\n      'congress persons': 'a',\n      legislators: 'a',\n      representatives: 'a'\n    },\n    inconsiderate: {\n      congresswomen: 'female',\n      congressmen: 'male'\n    }\n  },\n  {\n    id: 'fireman-firewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'fire fighter': 'a',\n      'fire officer': 'a'\n    },\n    inconsiderate: {\n      firewoman: 'female',\n      fireman: 'male'\n    }\n  },\n  {\n    id: 'firemen-firewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'fire fighters': 'a'\n    },\n    inconsiderate: {\n      firewomen: 'female',\n      firemen: 'male'\n    }\n  },\n  {\n    id: 'fisherman-fisherwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      fisher: 'a',\n      'crew member': 'a',\n      fisherfolk: 'a',\n      angler: 'a'\n    },\n    inconsiderate: {\n      fisherwoman: 'female',\n      fisherman: 'male'\n    }\n  },\n  {\n    id: 'fishermen-fisherwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      fishers: 'a'\n    },\n    inconsiderate: {\n      fisherwomen: 'female',\n      fishermen: 'male'\n    }\n  },\n  {\n    id: 'brotherhood-sisterhood',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      kinship: 'a',\n      community: 'a'\n    },\n    inconsiderate: {\n      sisterhood: 'female',\n      brotherhood: 'male'\n    }\n  },\n  {\n    id: 'common-girl-common-man',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'common person': 'a',\n      'average person': 'a'\n    },\n    inconsiderate: {\n      'common girl': 'female',\n      'common man': 'male'\n    }\n  },\n  {\n    id: 'salaryman-salarywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'business executive': 'a',\n      entrepreneur: 'a',\n      'business person': 'a',\n      professional: 'a'\n    },\n    inconsiderate: {\n      businesswoman: 'female',\n      salarywoman: 'female',\n      businessman: 'male',\n      salaryman: 'male'\n    }\n  },\n  {\n    id: 'salarymen-salarywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'business executives': 'a',\n      entrepreneurs: 'a'\n    },\n    inconsiderate: {\n      businesswomen: 'female',\n      salarywomen: 'female',\n      'career girl': 'female',\n      'career woman': 'female',\n      businessmen: 'male',\n      salarymen: 'male'\n    }\n  },\n  {\n    id: 'janitor-janitress',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      cleaner: 'a'\n    },\n    inconsiderate: {\n      'cleaning lady': 'female',\n      'cleaning girl': 'female',\n      'cleaning woman': 'female',\n      janitress: 'female',\n      'cleaning man': 'male',\n      'cleaning boy': 'male',\n      janitor: 'male'\n    }\n  },\n  {\n    id: 'janitors-janitresses',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      cleaners: 'a',\n      housekeeping: 'a'\n    },\n    inconsiderate: {\n      'cleaning ladies': 'female',\n      'cleaning girls': 'female',\n      janitresses: 'female',\n      'cleaning men': 'male',\n      janitors: 'male'\n    }\n  },\n  {\n    id: 'delivery-boy-delivery-girl',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      courier: 'a',\n      messenger: 'a'\n    },\n    inconsiderate: {\n      'delivery girl': 'female',\n      'delivery boy': 'male'\n    }\n  },\n  {\n    id: 'foreman-forewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      supervisor: 'a',\n      'shift boss': 'a'\n    },\n    inconsiderate: {\n      forewoman: 'female',\n      foreman: 'male'\n    }\n  },\n  {\n    id: 'frontman,-front-man-frontwoman,-front-woman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      lead: 'a',\n      front: 'a',\n      figurehead: 'a'\n    },\n    inconsiderate: {\n      'frontwoman, front woman': 'female',\n      'frontman, front man': 'male'\n    }\n  },\n  {\n    id: 'front-men,-frontmen-front-women,-frontwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      figureheads: 'a'\n    },\n    inconsiderate: {\n      'front women, frontwomen': 'female',\n      'front men, frontmen': 'male'\n    }\n  },\n  {\n    id: 'foremen-forewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      supervisors: 'a',\n      'shift bosses': 'a'\n    },\n    inconsiderate: {\n      forewomen: 'female',\n      foremen: 'male'\n    }\n  },\n  {\n    id: 'insurance-man-insurance-woman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'insurance agent': 'a'\n    },\n    inconsiderate: {\n      'insurance woman': 'female',\n      'insurance man': 'male'\n    }\n  },\n  {\n    id: 'insurance-men-insurance-women',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'insurance agents': 'a'\n    },\n    inconsiderate: {\n      'insurance women': 'female',\n      'insurance men': 'male'\n    }\n  },\n  {\n    id: 'landlady-landlord',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      proprietor: 'a',\n      'building manager': 'a'\n    },\n    inconsiderate: {\n      landlady: 'female',\n      landlord: 'male'\n    }\n  },\n  {\n    id: 'landladies-landlords',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      proprietors: 'a',\n      'building managers': 'a'\n    },\n    inconsiderate: {\n      landladies: 'female',\n      landlords: 'male'\n    }\n  },\n  {\n    id: 'alumna-alumnus',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      graduate: 'a'\n    },\n    inconsiderate: {\n      alumna: 'female',\n      alumnus: 'male'\n    }\n  },\n  {\n    id: 'alumnae-alumni',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      graduates: 'a'\n    },\n    inconsiderate: {\n      alumnae: 'female',\n      alumni: 'male'\n    }\n  },\n  {\n    id: 'newsman-newswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      anchor: 'a',\n      journalist: 'a'\n    },\n    inconsiderate: {\n      newswoman: 'female',\n      newspaperwoman: 'female',\n      anchorwoman: 'female',\n      newsman: 'male',\n      newspaperman: 'male',\n      anchorman: 'male'\n    }\n  },\n  {\n    id: 'newsmen-newswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      anchors: 'a',\n      journalists: 'a'\n    },\n    inconsiderate: {\n      newswomen: 'female',\n      newspaperwomen: 'female',\n      anchorwomen: 'female',\n      newsmen: 'male',\n      newspapermen: 'male',\n      anchormen: 'male'\n    }\n  },\n  {\n    id: 'repairman-repairwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      repairer: 'a',\n      technician: 'a'\n    },\n    inconsiderate: {\n      repairwoman: 'female',\n      repairman: 'male'\n    }\n  },\n  {\n    id: 'repairmen-repairwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      technicians: 'a'\n    },\n    inconsiderate: {\n      repairwomen: 'female',\n      repairmen: 'male'\n    }\n  },\n  {\n    id: 'saleslady-salesman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      salesperson: 'a',\n      'sales clerk': 'a',\n      'sales rep': 'a',\n      'sales agent': 'a',\n      'sales attendant': 'a',\n      seller: 'a',\n      'shop assistant': 'a'\n    },\n    inconsiderate: {\n      saleswoman: 'female',\n      'sales woman': 'female',\n      saleslady: 'female',\n      salesman: 'male',\n      'sales man': 'male'\n    }\n  },\n  {\n    id: 'salesmen-saleswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'sales clerks': 'a',\n      'sales reps': 'a',\n      'sales agents': 'a',\n      sellers: 'a'\n    },\n    inconsiderate: {\n      saleswomen: 'female',\n      'sales women': 'female',\n      salesladies: 'female',\n      salesmen: 'male',\n      'sales men': 'male'\n    }\n  },\n  {\n    id: 'serviceman-servicewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      soldier: 'a',\n      'service representative': 'a'\n    },\n    inconsiderate: {\n      servicewoman: 'female',\n      serviceman: 'male'\n    }\n  },\n  {\n    id: 'servicemen-servicewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      soldiers: 'a',\n      'service representatives': 'a'\n    },\n    inconsiderate: {\n      servicewomen: 'female',\n      servicemen: 'male'\n    }\n  },\n  {\n    id: 'waiter-waitress',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      server: 'a'\n    },\n    inconsiderate: {\n      waitress: 'female',\n      waiter: 'male'\n    }\n  },\n  {\n    id: 'waiters-waitresses',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      servers: 'a'\n    },\n    inconsiderate: {\n      waitresses: 'female',\n      waiters: 'male'\n    }\n  },\n  {\n    id: 'workman-workwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      worker: 'a',\n      'wage earner': 'a',\n      taxpayer: 'a'\n    },\n    inconsiderate: {\n      workwoman: 'female',\n      'working woman': 'female',\n      workman: 'male',\n      'working man': 'male'\n    }\n  },\n  {\n    id: 'workmen-workwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      workers: 'a'\n    },\n    inconsiderate: {\n      workwomen: 'female',\n      workmen: 'male'\n    }\n  },\n  {\n    id: 'actor-actress',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      performer: 'a',\n      star: 'a',\n      artist: 'a',\n      entertainer: 'a'\n    },\n    inconsiderate: {\n      actress: 'female',\n      actor: 'male'\n    }\n  },\n  {\n    id: 'actors-actresses',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      performers: 'a',\n      stars: 'a',\n      artists: 'a',\n      entertainers: 'a'\n    },\n    inconsiderate: {\n      actresses: 'female',\n      actors: 'male'\n    }\n  },\n  {\n    id: 'aircrewwoman-airman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      pilot: 'a',\n      aviator: 'a',\n      airstaff: 'a'\n    },\n    inconsiderate: {\n      aircrewwoman: 'female',\n      'aircrew woman': 'female',\n      aircrewman: 'male',\n      airman: 'male'\n    }\n  },\n  {\n    id: 'aircrewwomen-airmen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      pilots: 'a',\n      aviators: 'a',\n      airstaff: 'a'\n    },\n    inconsiderate: {\n      aircrewwomen: 'female',\n      'aircrew women': 'female',\n      aircrewmen: 'male',\n      airmen: 'male'\n    }\n  },\n  {\n    id: 'alderman-alderwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'cabinet member': 'a'\n    },\n    inconsiderate: {\n      alderwoman: 'female',\n      alderman: 'male'\n    }\n  },\n  {\n    id: 'aldermen-alderwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      cabinet: 'a',\n      'cabinet members': 'a',\n      alderperson: 'a'\n    },\n    inconsiderate: {\n      alderwomen: 'female',\n      aldermen: 'male'\n    }\n  },\n  {\n    id: 'assemblyman-assemblywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'assembly person': 'a',\n      'assembly worker': 'a'\n    },\n    inconsiderate: {\n      assemblywoman: 'female',\n      assemblyman: 'male'\n    }\n  },\n  {\n    id: 'aunt-uncle',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      relative: 'a'\n    },\n    inconsiderate: {\n      kinswoman: 'female',\n      aunt: 'female',\n      kinsman: 'male',\n      uncle: 'male'\n    }\n  },\n  {\n    id: 'aunts-uncles',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      relatives: 'a'\n    },\n    inconsiderate: {\n      kinswomen: 'female',\n      aunts: 'female',\n      kinsmen: 'male',\n      uncles: 'male'\n    }\n  },\n  {\n    id: 'boogeyman-boogeywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      boogeymonster: 'a'\n    },\n    inconsiderate: {\n      boogeywoman: 'female',\n      boogeyman: 'male'\n    }\n  },\n  {\n    id: 'boogieman-boogiewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      boogeymonster: 'a'\n    },\n    inconsiderate: {\n      boogiewoman: 'female',\n      boogieman: 'male'\n    }\n  },\n  {\n    id: 'bogeyman-bogeywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bogeymonster: 'a'\n    },\n    inconsiderate: {\n      bogeywoman: 'female',\n      bogeyman: 'male'\n    }\n  },\n  {\n    id: 'bogieman-bogiewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bogeymonster: 'a'\n    },\n    inconsiderate: {\n      bogiewoman: 'female',\n      bogieman: 'male'\n    }\n  },\n  {\n    id: 'boogiemen-boogiewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      boogeymonsters: 'a'\n    },\n    inconsiderate: {\n      boogiewomen: 'female',\n      boogiemen: 'male'\n    }\n  },\n  {\n    id: 'bogiemen-bogiewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bogeymonsters: 'a'\n    },\n    inconsiderate: {\n      bogiewomen: 'female',\n      bogiemen: 'male'\n    }\n  },\n  {\n    id: 'bondsman-bondswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bonder: 'a'\n    },\n    inconsiderate: {\n      bondswoman: 'female',\n      bondsman: 'male'\n    }\n  },\n  {\n    id: 'bondsmen-bondswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bonders: 'a'\n    },\n    inconsiderate: {\n      bondswomen: 'female',\n      bondsmen: 'male'\n    }\n  },\n  {\n    id: 'husband-wife',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      partner: 'a',\n      'significant other': 'a',\n      spouse: 'a'\n    },\n    inconsiderate: {\n      wife: 'female',\n      husband: 'male'\n    },\n    note: 'Source: https://www.bustle.com/articles/108321-6-reasons-to-refer-to-your-significant-other-as-your-partner'\n  },\n  {\n    id: 'husbands-wives',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      partners: 'a',\n      'significant others': 'a',\n      spouses: 'a'\n    },\n    inconsiderate: {\n      wives: 'female',\n      husbands: 'male'\n    },\n    note: 'Source: https://www.bustle.com/articles/108321-6-reasons-to-refer-to-your-significant-other-as-your-partner'\n  },\n  {\n    id: 'boyfriend-girlfriend',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      partner: 'a',\n      friend: 'a',\n      'significant other': 'a'\n    },\n    inconsiderate: {\n      girlfriend: 'female',\n      boyfriend: 'male'\n    },\n    note: 'Source: https://www.bustle.com/articles/108321-6-reasons-to-refer-to-your-significant-other-as-your-partner'\n  },\n  {\n    id: 'boyfriends-girlfriends',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      partners: 'a',\n      friends: 'a',\n      'significant others': 'a'\n    },\n    inconsiderate: {\n      girlfriends: 'female',\n      boyfriends: 'male'\n    },\n    note: 'Source: https://www.bustle.com/articles/108321-6-reasons-to-refer-to-your-significant-other-as-your-partner'\n  },\n  {\n    id: 'boyhood-girlhood',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      childhood: 'a'\n    },\n    inconsiderate: {\n      girlhood: 'female',\n      boyhood: 'male'\n    }\n  },\n  {\n    id: 'boyish-girly',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      childish: 'a'\n    },\n    inconsiderate: {\n      girly: 'female',\n      girlish: 'female',\n      boyish: 'male'\n    }\n  },\n  {\n    id: 'journeyman-journeywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      journeyperson: 'a'\n    },\n    inconsiderate: {\n      journeywoman: 'female',\n      journeyman: 'male'\n    }\n  },\n  {\n    id: 'journeymen-journeywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      journeypersons: 'a'\n    },\n    inconsiderate: {\n      journeywomen: 'female',\n      journeymen: 'male'\n    }\n  },\n  {\n    id: 'godfather-godmother',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      godparent: 'a',\n      elder: 'a',\n      patron: 'a'\n    },\n    inconsiderate: {\n      godmother: 'female',\n      patroness: 'female',\n      godfather: 'male'\n    }\n  },\n  {\n    id: 'granddaughter-grandson',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      grandchild: 'a'\n    },\n    inconsiderate: {\n      granddaughter: 'female',\n      grandson: 'male'\n    }\n  },\n  {\n    id: 'granddaughters-grandsons',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      grandchildren: 'a'\n    },\n    inconsiderate: {\n      granddaughters: 'female',\n      grandsons: 'male'\n    }\n  },\n  {\n    id: 'forefather-foremother',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      ancestor: 'a'\n    },\n    inconsiderate: {\n      foremother: 'female',\n      forefather: 'male'\n    }\n  },\n  {\n    id: 'forefathers-foremothers',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      ancestors: 'a'\n    },\n    inconsiderate: {\n      foremothers: 'female',\n      forefathers: 'male'\n    }\n  },\n  {\n    id: 'gramps-granny',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      grandparent: 'a',\n      ancestor: 'a'\n    },\n    inconsiderate: {\n      granny: 'female',\n      grandma: 'female',\n      grandmother: 'female',\n      grandpappy: 'male',\n      granddaddy: 'male',\n      gramps: 'male',\n      grandpa: 'male',\n      grandfather: 'male'\n    }\n  },\n  {\n    id: 'grandfathers-grandmothers',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      grandparents: 'a',\n      ancestors: 'a'\n    },\n    inconsiderate: {\n      grandmothers: 'female',\n      grandfathers: 'male'\n    }\n  },\n  {\n    id: 'bride-groom',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      spouse: 'a',\n      newlywed: 'a'\n    },\n    inconsiderate: {\n      bride: 'female',\n      groom: 'male'\n    }\n  },\n  {\n    id: 'brother-sister',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      sibling: 'a'\n    },\n    inconsiderate: {\n      sister: 'female',\n      brother: 'male'\n    }\n  },\n  {\n    id: 'brothers-sisters',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      siblings: 'a'\n    },\n    inconsiderate: {\n      sisters: 'female',\n      brothers: 'male'\n    }\n  },\n  {\n    id: 'cameraman-camerawoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'camera operator': 'a',\n      'camera person': 'a'\n    },\n    inconsiderate: {\n      camerawoman: 'female',\n      cameraman: 'male'\n    }\n  },\n  {\n    id: 'cameramen-camerawomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'camera operators': 'a'\n    },\n    inconsiderate: {\n      camerawomen: 'female',\n      cameramen: 'male'\n    }\n  },\n  {\n    id: 'caveman-cavewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      troglodyte: 'a',\n      hominidae: 'a'\n    },\n    inconsiderate: {\n      cavewoman: 'female',\n      caveman: 'male'\n    }\n  },\n  {\n    id: 'cavemen-cavewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      troglodytae: 'a',\n      troglodyti: 'a',\n      troglodytes: 'a',\n      hominids: 'a'\n    },\n    inconsiderate: {\n      cavewomen: 'female',\n      cavemen: 'male'\n    }\n  },\n  {\n    id: 'clergyman-clergywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      clergyperson: 'a',\n      clergy: 'a',\n      cleric: 'a'\n    },\n    inconsiderate: {\n      clergywoman: 'female',\n      clergyman: 'male'\n    }\n  },\n  {\n    id: 'clergymen-clergywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      clergies: 'a',\n      clerics: 'a'\n    },\n    inconsiderate: {\n      clergywomen: 'female',\n      clergymen: 'male'\n    }\n  },\n  {\n    id: 'councilman-councilwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'council member': 'a'\n    },\n    inconsiderate: {\n      councilwoman: 'female',\n      councilman: 'male'\n    }\n  },\n  {\n    id: 'councilmen-councilwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'council members': 'a'\n    },\n    inconsiderate: {\n      councilwomen: 'female',\n      councilmen: 'male'\n    }\n  },\n  {\n    id: 'countryman-countrywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'country person': 'a'\n    },\n    inconsiderate: {\n      countrywoman: 'female',\n      countryman: 'male'\n    }\n  },\n  {\n    id: 'countrymen-countrywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'country folk': 'a'\n    },\n    inconsiderate: {\n      countrywomen: 'female',\n      countrymen: 'male'\n    }\n  },\n  {\n    id: 'handyman-handywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      artisan: 'a',\n      craftsperson: 'a',\n      'skilled worker': 'a'\n    },\n    inconsiderate: {\n      handywoman: 'female',\n      craftswoman: 'female',\n      handyman: 'male',\n      craftsman: 'male'\n    }\n  },\n  {\n    id: 'host-hostess',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      presenter: 'a',\n      entertainer: 'a',\n      emcee: 'a'\n    },\n    inconsiderate: {\n      hostess: 'female',\n      host: 'male'\n    }\n  },\n  {\n    id: 'hostesses-hosts',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      presenters: 'a',\n      entertainers: 'a',\n      emcees: 'a'\n    },\n    inconsiderate: {\n      hostesses: 'female',\n      hosts: 'male'\n    }\n  },\n  {\n    id: 'handymen-handywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      artisans: 'a',\n      craftspersons: 'a',\n      'skilled workers': 'a'\n    },\n    inconsiderate: {\n      handywomen: 'female',\n      craftswomen: 'female',\n      handymen: 'male',\n      craftsmen: 'male'\n    }\n  },\n  {\n    id: 'hangman-hangwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      guillotine: 'a'\n    },\n    inconsiderate: {\n      hangwoman: 'female',\n      hangman: 'male'\n    }\n  },\n  {\n    id: 'hangmen-hangwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      guillotines: 'a'\n    },\n    inconsiderate: {\n      hangwomen: 'female',\n      hangmen: 'male'\n    }\n  },\n  {\n    id: 'henchman-henchwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      sidekick: 'a'\n    },\n    inconsiderate: {\n      henchwoman: 'female',\n      henchman: 'male'\n    }\n  },\n  {\n    id: 'henchmen-henchwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      sidekicks: 'a'\n    },\n    inconsiderate: {\n      henchwomen: 'female',\n      henchmen: 'male'\n    }\n  },\n  {\n    id: 'hero-heroine',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'role-model': 'a',\n      mentor: 'a'\n    },\n    inconsiderate: {\n      heroine: 'female',\n      hero: 'male'\n    }\n  },\n  {\n    id: 'heroes-heroines',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'role-models': 'a',\n      mentor: 'a'\n    },\n    inconsiderate: {\n      heroines: 'female',\n      heroes: 'male'\n    }\n  },\n  {\n    id: 'maternal-paternal',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      parental: 'a',\n      warm: 'a',\n      intimate: 'a'\n    },\n    inconsiderate: {\n      maternal: 'female',\n      paternal: 'male',\n      fraternal: 'male'\n    }\n  },\n  {\n    id: 'maternity-paternity',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      parental: 'a'\n    },\n    inconsiderate: {\n      maternity: 'female',\n      paternity: 'male'\n    }\n  },\n  {\n    id: 'dads-moms',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      parents: 'a'\n    },\n    inconsiderate: {\n      mamas: 'female',\n      mothers: 'female',\n      moms: 'female',\n      mums: 'female',\n      mommas: 'female',\n      mommies: 'female',\n      papas: 'male',\n      fathers: 'male',\n      dads: 'male',\n      daddies: 'male'\n    }\n  },\n  {\n    id: 'dad-mom',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      parent: 'a'\n    },\n    inconsiderate: {\n      mama: 'female',\n      mother: 'female',\n      mom: 'female',\n      mum: 'female',\n      momma: 'female',\n      mommy: 'female',\n      papa: 'male',\n      father: 'male',\n      dad: 'male',\n      pop: 'male',\n      daddy: 'male'\n    }\n  },\n  {\n    id: 'daughter-son',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      child: 'a'\n    },\n    inconsiderate: {\n      daughter: 'female',\n      son: 'male'\n    }\n  },\n  {\n    id: 'daughters-sons',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      children: 'a'\n    },\n    inconsiderate: {\n      daughters: 'female',\n      sons: 'male'\n    }\n  },\n  {\n    id: 'doorman-doorwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      concierge: 'a'\n    },\n    inconsiderate: {\n      doorwoman: 'female',\n      doorman: 'male'\n    }\n  },\n  {\n    id: 'doormen-doorwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      concierges: 'a'\n    },\n    inconsiderate: {\n      doorwomen: 'female',\n      doormen: 'male'\n    }\n  },\n  {\n    id: 'feminin-manly',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      humanly: 'a',\n      mature: 'a'\n    },\n    inconsiderate: {\n      feminin: 'female',\n      dudely: 'male',\n      manly: 'male'\n    }\n  },\n  {\n    id: 'females-males',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      humans: 'a'\n    },\n    inconsiderate: {\n      females: 'female',\n      males: 'male'\n    }\n  },\n  {\n    id: 'king-queen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      ruler: 'a'\n    },\n    inconsiderate: {\n      empress: 'female',\n      queen: 'female',\n      emperor: 'male',\n      king: 'male'\n    }\n  },\n  {\n    id: 'kings-queens',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      rulers: 'a'\n    },\n    inconsiderate: {\n      empresses: 'female',\n      queens: 'female',\n      emperors: 'male',\n      kings: 'male'\n    }\n  },\n  {\n    id: 'kingsize-queensize',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      jumbo: 'a',\n      gigantic: 'a'\n    },\n    inconsiderate: {\n      queensize: 'female',\n      kingsize: 'male'\n    }\n  },\n  {\n    id: 'kingmaker-queenmaker',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'power behind the throne': 'a'\n    },\n    inconsiderate: {\n      queenmaker: 'female',\n      kingmaker: 'male'\n    }\n  },\n  {\n    id: 'layman-laywoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      civilian: 'a'\n    },\n    inconsiderate: {\n      laywoman: 'female',\n      layman: 'male'\n    }\n  },\n  {\n    id: 'laymen-laywomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      civilians: 'a'\n    },\n    inconsiderate: {\n      laywomen: 'female',\n      laymen: 'male'\n    }\n  },\n  {\n    id: 'dame-lord',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      official: 'a',\n      owner: 'a',\n      expert: 'a',\n      superior: 'a',\n      chief: 'a',\n      ruler: 'a'\n    },\n    inconsiderate: {\n      dame: 'female',\n      lord: 'male'\n    }\n  },\n  {\n    id: 'dames-lords',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      officials: 'a',\n      chiefs: 'a',\n      rulers: 'a'\n    },\n    inconsiderate: {\n      dames: 'female',\n      lords: 'male'\n    }\n  },\n  {\n    id: 'manhood-womanhood',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      adulthood: 'a',\n      personhood: 'a',\n      maturity: 'a'\n    },\n    inconsiderate: {\n      womanhood: 'female',\n      masculinity: 'male',\n      manhood: 'male'\n    }\n  },\n  {\n    id: 'femininity-manliness',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      humanity: 'a'\n    },\n    inconsiderate: {\n      femininity: 'female',\n      manliness: 'male'\n    }\n  },\n  {\n    id: 'marksman-markswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      shooter: 'a'\n    },\n    inconsiderate: {\n      markswoman: 'female',\n      marksman: 'male'\n    }\n  },\n  {\n    id: 'marksmen-markswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      shooters: 'a'\n    },\n    inconsiderate: {\n      markswomen: 'female',\n      marksmen: 'male'\n    }\n  },\n  {\n    id: 'middleman-middlewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      intermediary: 'a',\n      'go-between': 'a'\n    },\n    inconsiderate: {\n      middlewoman: 'female',\n      middleman: 'male'\n    }\n  },\n  {\n    id: 'middlemen-middlewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      intermediaries: 'a',\n      'go-betweens': 'a'\n    },\n    inconsiderate: {\n      middlewomen: 'female',\n      middlemen: 'male'\n    }\n  },\n  {\n    id: 'milkman-milkwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'milk person': 'a'\n    },\n    inconsiderate: {\n      milkwoman: 'female',\n      milkman: 'male'\n    }\n  },\n  {\n    id: 'milkmen-milkwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'milk people': 'a'\n    },\n    inconsiderate: {\n      milkwomen: 'female',\n      milkmen: 'male'\n    }\n  },\n  {\n    id: 'nephew-niece',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      nibling: 'a',\n      'sibling’s child': 'a'\n    },\n    inconsiderate: {\n      niece: 'female',\n      nephew: 'male'\n    }\n  },\n  {\n    id: 'nephews-nieces',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      niblings: 'a',\n      'sibling’s children': 'a'\n    },\n    inconsiderate: {\n      nieces: 'female',\n      nephews: 'male'\n    }\n  },\n  {\n    id: 'nobleman-noblewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      noble: 'a'\n    },\n    inconsiderate: {\n      noblewoman: 'female',\n      nobleman: 'male'\n    }\n  },\n  {\n    id: 'noblemen-noblewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      nobles: 'a'\n    },\n    inconsiderate: {\n      noblewomen: 'female',\n      noblemen: 'male'\n    }\n  },\n  {\n    id: 'ombudsman-ombudswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      notary: 'a',\n      'consumer advocate': 'a',\n      'trouble shooter': 'a',\n      omsbudperson: 'a',\n      mediator: 'a'\n    },\n    inconsiderate: {\n      ombudswoman: 'female',\n      ombudsman: 'male'\n    }\n  },\n  {\n    id: 'ombudsmen-ombudswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      notaries: 'a',\n      omsbudpersons: 'a',\n      omsbudpeople: 'a',\n      mediators: 'a'\n    },\n    inconsiderate: {\n      ombudswomen: 'female',\n      ombudsmen: 'male'\n    }\n  },\n  {\n    id: 'prince-princess',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      heir: 'a'\n    },\n    inconsiderate: {\n      princess: 'female',\n      prince: 'male'\n    }\n  },\n  {\n    id: 'princes-princesses',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      heirs: 'a'\n    },\n    inconsiderate: {\n      princesses: 'female',\n      princes: 'male'\n    }\n  },\n  {\n    id: 'sandman-sandwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      fairy: 'a'\n    },\n    inconsiderate: {\n      sandwoman: 'female',\n      sandman: 'male'\n    }\n  },\n  {\n    id: 'sandmen-sandwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      fairies: 'a'\n    },\n    inconsiderate: {\n      sandwomen: 'female',\n      sandmen: 'male'\n    }\n  },\n  {\n    id: 'showman-showwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      promoter: 'a'\n    },\n    inconsiderate: {\n      showwoman: 'female',\n      showman: 'male'\n    }\n  },\n  {\n    id: 'showmen-showwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      promoters: 'a'\n    },\n    inconsiderate: {\n      showwomen: 'female',\n      'show women': 'female',\n      showmen: 'male'\n    }\n  },\n  {\n    id: 'spaceman-spacewoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      astronaut: 'a'\n    },\n    inconsiderate: {\n      spacewoman: 'female',\n      spaceman: 'male'\n    }\n  },\n  {\n    id: 'spacemen-spacewomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      astronauts: 'a'\n    },\n    inconsiderate: {\n      spacewomen: 'female',\n      spacemen: 'male'\n    }\n  },\n  {\n    id: 'spokesman-spokeswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      speaker: 'a',\n      spokesperson: 'a',\n      representative: 'a'\n    },\n    inconsiderate: {\n      spokeswoman: 'female',\n      spokesman: 'male'\n    }\n  },\n  {\n    id: 'spokesmen-spokeswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      speakers: 'a',\n      spokespersons: 'a'\n    },\n    inconsiderate: {\n      spokeswomen: 'female',\n      spokesmen: 'male'\n    }\n  },\n  {\n    id: 'sportsman-sportswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      athlete: 'a',\n      'sports person': 'a'\n    },\n    inconsiderate: {\n      sportswoman: 'female',\n      sportsman: 'male'\n    }\n  },\n  {\n    id: 'sportsmen-sportswomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      athletes: 'a',\n      'sports persons': 'a'\n    },\n    inconsiderate: {\n      sportswomen: 'female',\n      sportsmen: 'male'\n    }\n  },\n  {\n    id: 'statesman-stateswoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      senator: 'a'\n    },\n    inconsiderate: {\n      stateswoman: 'female',\n      statesman: 'male'\n    }\n  },\n  {\n    id: 'stepbrother-stepsister',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'step-sibling': 'a'\n    },\n    inconsiderate: {\n      stepsister: 'female',\n      stepbrother: 'male'\n    }\n  },\n  {\n    id: 'stepbrothers-stepsisters',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'step-siblings': 'a'\n    },\n    inconsiderate: {\n      stepsisters: 'female',\n      stepbrothers: 'male'\n    }\n  },\n  {\n    id: 'stepdad-stepmom',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'step-parent': 'a'\n    },\n    inconsiderate: {\n      stepmom: 'female',\n      stepmother: 'female',\n      stepdad: 'male',\n      stepfather: 'male'\n    }\n  },\n  {\n    id: 'stepfathers-stepmothers',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'step-parents': 'a'\n    },\n    inconsiderate: {\n      stepmothers: 'female',\n      stepfathers: 'male'\n    }\n  },\n  {\n    id: 'superman-superwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      titan: 'a'\n    },\n    inconsiderate: {\n      superwoman: 'female',\n      superman: 'male'\n    }\n  },\n  {\n    id: 'supermen-superwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      titans: 'a'\n    },\n    inconsiderate: {\n      superwomen: 'female',\n      supermen: 'male'\n    }\n  },\n  {\n    id: 'unmanly-unwomanly',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      inhumane: 'a'\n    },\n    inconsiderate: {\n      unwomanly: 'female',\n      unwomenly: 'female',\n      unmanly: 'male',\n      unmenly: 'male'\n    }\n  },\n  {\n    id: 'watchman-watchwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      watcher: 'a'\n    },\n    inconsiderate: {\n      watchwoman: 'female',\n      watchman: 'male'\n    }\n  },\n  {\n    id: 'watchmen-watchwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      watchers: 'a'\n    },\n    inconsiderate: {\n      watchwomen: 'female',\n      watchmen: 'male'\n    }\n  },\n  {\n    id: 'weatherman-weatherwoman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'weather forecaster': 'a',\n      meteorologist: 'a'\n    },\n    inconsiderate: {\n      weatherwoman: 'female',\n      weatherman: 'male'\n    }\n  },\n  {\n    id: 'weathermen-weatherwomen',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'weather forecasters': 'a',\n      meteorologists: 'a'\n    },\n    inconsiderate: {\n      weatherwomen: 'female',\n      weathermen: 'male'\n    }\n  },\n  {\n    id: 'widow-widower',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      bereaved: 'a'\n    },\n    inconsiderate: {\n      widow: 'female',\n      widows: 'female',\n      widower: 'male',\n      widowers: 'male'\n    }\n  },\n  {\n    id: 'own-man-own-woman',\n    type: 'or',\n    categories: ['female', 'male'],\n    considerate: {\n      'own person': 'a'\n    },\n    inconsiderate: {\n      'own woman': 'female',\n      'own man': 'male'\n    }\n  },\n  {\n    id: 'frenchmen',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      french: 'a',\n      'the french': 'a'\n    },\n    inconsiderate: {\n      frenchmen: 'male'\n    }\n  },\n  {\n    id: 'ladylike',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      courteous: 'a',\n      cultured: 'a'\n    },\n    inconsiderate: {\n      ladylike: 'female'\n    }\n  },\n  {\n    id: 'like-a-man',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      resolutely: 'a',\n      bravely: 'a'\n    },\n    inconsiderate: {\n      'like a man': 'male'\n    }\n  },\n  {\n    id: 'maiden-name',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      'birth name': 'a'\n    },\n    inconsiderate: {\n      'maiden name': 'female'\n    }\n  },\n  {\n    id: 'maiden-voyage',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      'first voyage': 'a'\n    },\n    inconsiderate: {\n      'maiden voyage': 'female'\n    }\n  },\n  {\n    id: 'maiden-flight',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      'first flight': 'a'\n    },\n    inconsiderate: {\n      'maiden flight': 'female'\n    }\n  },\n  {\n    id: 'man-enough',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'strong enough': 'a'\n    },\n    inconsiderate: {\n      'man enough': 'male'\n    }\n  },\n  {\n    id: 'oneupmanship',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      upstaging: 'a',\n      competitiveness: 'a'\n    },\n    inconsiderate: {\n      oneupmanship: 'male'\n    }\n  },\n  {\n    id: 'mrs-',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      'ms.': 'a'\n    },\n    inconsiderate: {\n      'miss.': 'female',\n      'mrs.': 'female'\n    }\n  },\n  {\n    id: 'manmade',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      manufactured: 'a',\n      artificial: 'a',\n      synthetic: 'a',\n      'machine-made': 'a',\n      constructed: 'a'\n    },\n    inconsiderate: {\n      manmade: 'male'\n    }\n  },\n  {\n    id: 'man-of-action',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      dynamo: 'a'\n    },\n    inconsiderate: {\n      'man of action': 'male'\n    }\n  },\n  {\n    id: 'man-of-letters',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      scholar: 'a',\n      writer: 'a',\n      'literary figure': 'a'\n    },\n    inconsiderate: {\n      'man of letters': 'male'\n    }\n  },\n  {\n    id: 'man-of-the-world',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      sophisticate: 'a'\n    },\n    inconsiderate: {\n      'man of the world': 'male'\n    }\n  },\n  {\n    id: 'fellowship',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      camaraderie: 'a',\n      community: 'a',\n      organization: 'a'\n    },\n    inconsiderate: {\n      fellowship: 'male'\n    }\n  },\n  {\n    id: 'freshman',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'first-year student': 'a',\n      fresher: 'a'\n    },\n    inconsiderate: {\n      freshman: 'male',\n      freshwoman: 'male'\n    }\n  },\n  {\n    id: 'workmanship',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'quality construction': 'a',\n      expertise: 'a'\n    },\n    inconsiderate: {\n      workmanship: 'male'\n    }\n  },\n  {\n    id: 'housewife',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      homemaker: 'a',\n      homeworker: 'a'\n    },\n    inconsiderate: {\n      housewife: 'female'\n    }\n  },\n  {\n    id: 'housewives',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      homemakers: 'a',\n      homeworkers: 'a'\n    },\n    inconsiderate: {\n      housewives: 'female'\n    }\n  },\n  {\n    id: 'motherly',\n    type: 'basic',\n    categories: ['female'],\n    considerate: {\n      loving: 'a',\n      warm: 'a',\n      nurturing: 'a'\n    },\n    inconsiderate: {\n      motherly: 'female'\n    }\n  },\n  {\n    id: 'manpower',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'human resources': 'a',\n      workforce: 'a',\n      personnel: 'a',\n      staff: 'a',\n      labor: 'a',\n      'labor force': 'a',\n      staffing: 'a',\n      'combat personnel': 'a'\n    },\n    inconsiderate: {\n      manpower: 'male'\n    }\n  },\n  {\n    id: 'master-of-ceremonies',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      emcee: 'a',\n      moderator: 'a',\n      convenor: 'a'\n    },\n    inconsiderate: {\n      'master of ceremonies': 'male'\n    }\n  },\n  {\n    id: 'masterful',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      skilled: 'a',\n      authoritative: 'a',\n      commanding: 'a'\n    },\n    inconsiderate: {\n      masterful: 'male'\n    }\n  },\n  {\n    id: 'mastermind',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      genius: 'a',\n      creator: 'a',\n      instigator: 'a',\n      oversee: 'a',\n      launch: 'a',\n      originate: 'a'\n    },\n    inconsiderate: {\n      mastermind: 'male'\n    }\n  },\n  {\n    id: 'masterpiece',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'work of genius': 'a',\n      'chef d’oeuvre': 'a'\n    },\n    inconsiderate: {\n      masterpiece: 'male'\n    }\n  },\n  {\n    id: 'masterplan',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      vision: 'a',\n      'comprehensive plan': 'a'\n    },\n    inconsiderate: {\n      masterplan: 'male'\n    }\n  },\n  {\n    id: 'masterstroke',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'trump card': 'a',\n      'stroke of genius': 'a'\n    },\n    inconsiderate: {\n      masterstroke: 'male'\n    }\n  },\n  {\n    id: 'madman',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      fanatic: 'a',\n      zealot: 'a',\n      enthusiast: 'a'\n    },\n    inconsiderate: {\n      madman: 'male',\n      'mad man': 'male'\n    }\n  },\n  {\n    id: 'madmen',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      fanatics: 'a',\n      zealots: 'a',\n      enthusiasts: 'a'\n    },\n    inconsiderate: {\n      madmen: 'male',\n      'mad men': 'male'\n    }\n  },\n  {\n    id: 'mankind',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      humankind: 'a'\n    },\n    inconsiderate: {\n      mankind: 'male'\n    }\n  },\n  {\n    id: 'manhour',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'staff hour': 'a',\n      'hour of work': 'a'\n    },\n    inconsiderate: {\n      manhour: 'male',\n      'man hour': 'male'\n    }\n  },\n  {\n    id: 'manhours',\n    type: 'basic',\n    categories: ['male'],\n    considerate: {\n      'staff hours': 'a',\n      'hours of work': 'a',\n      'hours of labor': 'a',\n      hours: 'a'\n    },\n    inconsiderate: {\n      manhours: 'male',\n      'man hours': 'male'\n    }\n  },\n  {\n    id: 'manned',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      staffed: 'a',\n      crewed: 'a',\n      piloted: 'a'\n    },\n    inconsiderate: {\n      manned: 'a'\n    },\n    note: 'Using gender neutral language means users will help to break up gender stereotypes.'\n  },\n  {\n    id: 'unmanned',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      robotic: 'a',\n      automated: 'a'\n    },\n    inconsiderate: {\n      unmanned: 'a'\n    },\n    note: 'Using gender neutral language means users will help to break up gender stereotypes.'\n  },\n  {\n    id: 'moaning',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      whining: 'a',\n      complaining: 'a',\n      crying: 'a'\n    },\n    inconsiderate: {\n      bitching: 'a',\n      moaning: 'a'\n    }\n  },\n  {\n    id: 'moan',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      whine: 'a',\n      complain: 'a',\n      cry: 'a'\n    },\n    inconsiderate: {\n      bitch: 'a',\n      moan: 'a'\n    }\n  },\n  {\n    id: 'wifebeater',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'tank top': 'a',\n      'sleeveless undershirt': 'a'\n    },\n    inconsiderate: {\n      'wife beater': 'a',\n      wifebeater: 'a'\n    }\n  },\n  {\n    id: 'ancient-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'ancient civilization': 'a',\n      'ancient people': 'a'\n    },\n    inconsiderate: {\n      'ancient man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'authoress',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      author: 'a',\n      writer: 'a'\n    },\n    inconsiderate: {\n      authoress: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'average-housewife',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'average consumer': 'a',\n      'average household': 'a',\n      'average homemaker': 'a'\n    },\n    inconsiderate: {\n      'average housewife': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'average-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'average person': 'a'\n    },\n    inconsiderate: {\n      'average man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'average-working-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'average wage earner': 'a',\n      'average taxpayer': 'a'\n    },\n    inconsiderate: {\n      'average working man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'aviatrix',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      aviator: 'a'\n    },\n    inconsiderate: {\n      aviatrix: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'brotherhood-of-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'the human family': 'a'\n    },\n    inconsiderate: {\n      'brotherhood of man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'calendar-girl',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      model: 'a'\n    },\n    inconsiderate: {\n      'calendar girl': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'call-girl',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      escort: 'a',\n      prostitute: 'a',\n      'sex worker': 'a'\n    },\n    inconsiderate: {\n      'call girl': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'churchman',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      cleric: 'a',\n      'practicing Christian': 'a',\n      'pillar of the Church': 'a'\n    },\n    inconsiderate: {\n      churchman: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'english-master',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'english coordinator': 'a',\n      'senior teacher of english': 'a'\n    },\n    inconsiderate: {\n      'english master': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'englishmen',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'the english': 'a'\n    },\n    inconsiderate: {\n      englishmen: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'executrix',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      executor: 'a'\n    },\n    inconsiderate: {\n      executrix: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'father-of-*',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'founder of': 'a'\n    },\n    inconsiderate: {\n      'father of *': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'founding-father',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'the founders': 'a',\n      'founding leaders': 'a',\n      forebears: 'a'\n    },\n    inconsiderate: {\n      'founding father': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'housemaid',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'house worker': 'a',\n      'domestic help': 'a'\n    },\n    inconsiderate: {\n      housemaid: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'industrial-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'industrial civilization': 'a',\n      'industrial people': 'a'\n    },\n    inconsiderate: {\n      'industrial man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'lady-doctor',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      doctor: 'a'\n    },\n    inconsiderate: {\n      'lady doctor': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'leading-lady',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      lead: 'a'\n    },\n    inconsiderate: {\n      'leading lady': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'maiden',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      virgin: 'a'\n    },\n    inconsiderate: {\n      maiden: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'maiden-race',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'first race': 'a'\n    },\n    inconsiderate: {\n      'maiden race': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'maiden-speech',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'first speech': 'a'\n    },\n    inconsiderate: {\n      'maiden speech': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'man-a-desk',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'staff a desk': 'a'\n    },\n    inconsiderate: {\n      'man a desk': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'man-in-the-street',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'ordinary citizen': 'a',\n      'typical person': 'a',\n      'average person': 'a'\n    },\n    inconsiderate: {\n      'man in the street': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'man-of-the-land',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      farmer: 'a',\n      'rural worker': 'a',\n      grazier: 'a',\n      landowner: 'a',\n      'rural community': 'a',\n      'country people': 'a',\n      'country folk': 'a'\n    },\n    inconsiderate: {\n      'man of the land': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'mans-best-friend',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'a faithful dog': 'a'\n    },\n    inconsiderate: {\n      'mans best friend': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'man-the-booth',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'staff the booth': 'a'\n    },\n    inconsiderate: {\n      'man the booth': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'man-the-phones',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'answer the phones': 'a'\n    },\n    inconsiderate: {\n      'man the phones': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'mansized-task',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'a demanding task': 'a',\n      'a big job': 'a'\n    },\n    inconsiderate: {\n      'mansized task': 'a',\n      'man sized task': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'master-key',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'pass key': 'a',\n      original: 'a'\n    },\n    inconsiderate: {\n      'master key': 'a',\n      'master copy': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'master-plan',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'grand scheme': 'a',\n      'guiding principles': 'a'\n    },\n    inconsiderate: {\n      'master plan': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'master-the-art',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'become skilled': 'a'\n    },\n    inconsiderate: {\n      'master the art': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'men-of-science',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      scientists: 'a'\n    },\n    inconsiderate: {\n      'men of science': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'midwife',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'birthing nurse': 'a'\n    },\n    inconsiderate: {\n      midwife: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'modern-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'modern civilization': 'a',\n      'modern people': 'a'\n    },\n    inconsiderate: {\n      'modern man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'no-mans-land',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'unoccupied territory': 'a',\n      wasteland: 'a',\n      deathtrap: 'a'\n    },\n    inconsiderate: {\n      'no mans land': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'office-girls',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'administrative staff': 'a'\n    },\n    inconsiderate: {\n      'office girls': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'poetess',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      poet: 'a'\n    },\n    inconsiderate: {\n      poetess: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'railwayman',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'railway worker': 'a'\n    },\n    inconsiderate: {\n      railwayman: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'sportsmanlike',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      fair: 'a',\n      sporting: 'a'\n    },\n    inconsiderate: {\n      sportsmanlike: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'sportsmanship',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      fairness: 'a',\n      'good humor': 'a',\n      'sense of fair play': 'a'\n    },\n    inconsiderate: {\n      sportsmanship: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'statesmanlike',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      diplomatic: 'a'\n    },\n    inconsiderate: {\n      statesmanlike: 'a',\n      'statesman like': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'stockman',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'cattle worker': 'a',\n      farmhand: 'a',\n      drover: 'a'\n    },\n    inconsiderate: {\n      stockman: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'tradesmans-entrance',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'service entrance': 'a'\n    },\n    inconsiderate: {\n      'tradesmans entrance': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'tax-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'tax commissioner': 'a',\n      'tax office': 'a',\n      'tax collector': 'a'\n    },\n    inconsiderate: {\n      'tax man': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'usherette',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      usher: 'a'\n    },\n    inconsiderate: {\n      usherette: 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'woman-lawyer',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      lawyer: 'a'\n    },\n    inconsiderate: {\n      'woman lawyer': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'woman-painter',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      painter: 'a'\n    },\n    inconsiderate: {\n      'woman painter': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'working-wife',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'wage or salary earning woman': 'a',\n      'two-income family': 'a'\n    },\n    inconsiderate: {\n      'working mother': 'a',\n      'working wife': 'a'\n    },\n    note: 'Source: https://radyananda.wordpress.com/2009/06/06/nonsexist-alternative-language-handbook-for-conscious-writers/'\n  },\n  {\n    id: 'homosexual',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      gay: 'a',\n      'gay man': 'a',\n      lesbian: 'a',\n      'gay person/people': 'a'\n    },\n    inconsiderate: {\n      homosexual: 'a'\n    },\n    note: 'This term has a clinical history and is used to imply LGBTQ+ people are diseased or psychologically/emotionally disordered (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'homosexual-relations',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      relationship: 'a'\n    },\n    inconsiderate: {\n      'homosexual relations': 'a',\n      'homosexual relationship': 'a'\n    },\n    note: 'Avoid labeling something as LGBTQ+ unless you would call the same thing “straight” (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'homosexual-couple',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      couple: 'a'\n    },\n    inconsiderate: {\n      'homosexual couple': 'a'\n    },\n    note: 'Avoid labeling something as LGBTQ+ unless you would call the same thing “straight” (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'sexual-preference',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'sexual orientation': 'a',\n      orientation: 'a'\n    },\n    inconsiderate: {\n      'sexual preference': 'a'\n    },\n    note: 'Implies that being LGBTQ+ is a choice (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'gay-lifestyle',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'gay lives': 'a',\n      'gay/lesbian lives': 'a'\n    },\n    inconsiderate: {\n      'gay lifestyle': 'a',\n      'homosexual lifestyle': 'a'\n    },\n    note: 'Implies that being LGBTQ+ is a choice (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'gay-agenda',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'gay issues': 'a'\n    },\n    inconsiderate: {\n      'gay agenda': 'a',\n      'homosexual agenda': 'a'\n    },\n    note: 'Used by anti-LGBTQ+ extremists to create a climate of fear around LGBTQ+ issues (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'gay-rights',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'equal rights': 'a',\n      'civil rights for gay people': 'a'\n    },\n    inconsiderate: {\n      'special rights': 'a',\n      'gay rights': 'a'\n    },\n    note: 'LGBTQ+ rights are human rights (source: https://www.glaad.org/reference/style)'\n  },\n  {\n    id: 'fag',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      gay: 'a'\n    },\n    inconsiderate: {\n      fag: 'a',\n      faggot: 'a',\n      dyke: 'a',\n      homo: 'a',\n      sodomite: 'a'\n    },\n    note: 'Derogatory terms for LGBTQ+ people are offensive (source: https://www.glaad.org/reference/offensive)'\n  },\n  {\n    id: 'bi',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      bisexual: 'a'\n    },\n    inconsiderate: {\n      bi: 'a'\n    },\n    note: 'Avoid using slang shorthand (source: https://www.glaad.org/reference/style)'\n  },\n  {\n    id: 'homosexual-marriage',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'gay marriage': 'a',\n      'same-sex marriage': 'a'\n    },\n    inconsiderate: {\n      'homosexual marriage': 'a'\n    },\n    note: 'Homosexual has a clinical history and is used to imply LGBTQ+ people are diseased or psychologically/emotionally disordered (source: https://www.glaad.org/reference/style)'\n  },\n  {\n    id: 'tranny',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      transgender: 'a'\n    },\n    inconsiderate: {\n      tranny: 'a'\n    },\n    note: 'Derogatory terms for LGBTQ+ people are offensive (source: https://www.glaad.org/reference/style)'\n  },\n  {\n    id: 'transvestite',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'cross-dresser': 'a'\n    },\n    inconsiderate: {\n      transvestite: 'a'\n    },\n    note: 'Avoid using outdated / offensive terms (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'sexchange',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      transition: 'a',\n      'gender confirmation surgery': 'a'\n    },\n    inconsiderate: {\n      sexchange: 'a',\n      'sex change': 'a'\n    },\n    note: 'Avoid overemphasizing surgery when discussing transgender people or the process of transition - it’s not a necessary component (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'sex-change-operation',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'sex reassignment surgery': 'a',\n      'gender confirmation surgery': 'a'\n    },\n    inconsiderate: {\n      'sex change operation': 'a'\n    },\n    note: 'Shift focus away from the assigned sex and towards the identified gender (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'transgenders',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'transgender people': 'a'\n    },\n    inconsiderate: {\n      transgenders: 'a'\n    },\n    note: 'Transgender should be used as an adjective, not as a noun (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'transgendered',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      transgender: 'a'\n    },\n    inconsiderate: {\n      transgendered: 'a'\n    },\n    note: 'Transgender is already an adjective (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'transgenderism',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'being transgender': 'a',\n      'the movement for transgender equality': 'a'\n    },\n    inconsiderate: {\n      transgenderism: 'a'\n    },\n    note: 'This is a term used by anti-transgender activists to dehumanize transgender people and reduce who they are to a condition (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'born-a-man',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'assigned male at birth': 'a',\n      'designated male at birth': 'a'\n    },\n    inconsiderate: {\n      'biologically male': 'a',\n      'born a man': 'a',\n      'genetically male': 'a'\n    },\n    note: 'Assigned birth gender is complicated; gender identity is more than what your parents decided you were at birth'\n  },\n  {\n    id: 'born-a-woman',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'assigned female at birth': 'a',\n      'designated female at birth': 'a'\n    },\n    inconsiderate: {\n      'biologically female': 'a',\n      'born a woman': 'a',\n      'genetically female': 'a'\n    },\n    note: 'Assigned birth gender is complicated; gender identity is more than what your parents decided you were at birth'\n  },\n  {\n    id: 'bathroom-bill',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'non-discrimination law': 'a',\n      'non-discrimination ordinance': 'a'\n    },\n    inconsiderate: {\n      'bathroom bill': 'a'\n    },\n    note: 'A term created and used by far-right extremists to oppose nondiscrimination laws that protect transgender people (source: https://www.glaad.org/reference/transgender)'\n  },\n  {\n    id: 'hermaphroditic',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      intersex: 'a'\n    },\n    inconsiderate: {\n      hermaphroditic: 'a',\n      pseudohermaphroditic: 'a',\n      'pseudo hermaphroditic': 'a'\n    },\n    note: 'These terms are stigmatizing to patients and their families because intersex status is more complicated than the mere presence or absence of certain gonadal tissues (source: http://www.isna.org/node/979)'\n  },\n  {\n    id: 'hermaphrodite',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person who is intersex': 'a',\n      person: 'a',\n      'intersex person': 'a'\n    },\n    inconsiderate: {\n      hermaphrodite: 'a',\n      pseudohermaphrodite: 'a',\n      'pseudo hermaphrodite': 'a'\n    },\n    note: 'These terms are stigmatizing to patients and their families because intersex status is more complicated than the mere presence or absence of certain gonadal tissues (source: http://www.isna.org/node/979)'\n  },\n  {\n    id: 'heshe',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'transgender person': 'a',\n      person: 'a'\n    },\n    inconsiderate: {\n      shemale: 'a',\n      'she male': 'a',\n      heshe: 'a',\n      shehe: 'a'\n    },\n    note: 'This word dehumanizes transgender people (source: https://www.reddit.com/r/asktransgender/comments/23wbq1/is_the_term_shemale_seen_as_offensive/)'\n  },\n  {\n    id: 'gender-pronoun',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      pronoun: 'a',\n      pronouns: 'a'\n    },\n    inconsiderate: {\n      'preferred pronoun': 'a',\n      'preferred pronouns': 'a',\n      'gender pronoun': 'a',\n      'gender pronouns': 'a'\n    },\n    note: \"Preferred pronoun sounds like it is optional to use someone's correct pronoun (source: https://www.selfdefined.app/definitions/pronouns/)\"\n  },\n  {\n    id: 'islamist',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      muslim: 'a',\n      'person of Islamic faith': 'a',\n      fanatic: 'a',\n      zealot: 'a',\n      'follower of islam': 'a',\n      'follower of the islamic faith': 'a'\n    },\n    inconsiderate: {\n      islamist: 'a'\n    },\n    note: 'Source: https://www.usnews.com/news/newsgram/articles/2013/04/04/the-associated-press-revises-islamist-another-politically-charged-term'\n  },\n  {\n    id: 'islamists',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      muslims: 'a',\n      'people of Islamic faith': 'a',\n      fanatics: 'a',\n      zealots: 'a'\n    },\n    inconsiderate: {\n      islamists: 'a'\n    },\n    note: 'Source: https://www.usnews.com/news/newsgram/articles/2013/04/04/the-associated-press-revises-islamist-another-politically-charged-term'\n  },\n  {\n    id: 'master',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      primary: 'a',\n      hub: 'a',\n      reference: 'a'\n    },\n    inconsiderate: {\n      master: 'a'\n    },\n    note: 'Avoid using the term `master`; these suggestions are for the computer term, but there are better alternatives for other cases too'\n  },\n  {\n    id: 'masters',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      primaries: 'a',\n      hubs: 'a',\n      references: 'a'\n    },\n    inconsiderate: {\n      masters: 'a'\n    },\n    note: 'Avoid using the term `master`; these suggestions are for the computer term, but there are better alternatives for other cases too'\n  },\n  {\n    id: 'eskimo',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Inuit: 'a'\n    },\n    inconsiderate: {\n      eskimo: 'a'\n    }\n  },\n  {\n    id: 'eskimos',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Inuits: 'a'\n    },\n    inconsiderate: {\n      eskimos: 'a'\n    }\n  },\n  {\n    id: 'oriental',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Asian person': 'a'\n    },\n    inconsiderate: {\n      oriental: 'a'\n    }\n  },\n  {\n    id: 'orientals',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Asian people': 'a'\n    },\n    inconsiderate: {\n      orientals: 'a'\n    }\n  },\n  {\n    id: 'nonwhite',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'person of color': 'a',\n      'people of color': 'a'\n    },\n    inconsiderate: {\n      nonwhite: 'a',\n      'non white': 'a'\n    }\n  },\n  {\n    id: 'ghetto',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      projects: 'a',\n      urban: 'a'\n    },\n    inconsiderate: {\n      ghetto: 'a'\n    }\n  },\n  {\n    id: 'redskin',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Native American': 'a'\n    },\n    inconsiderate: {\n      'red indian': 'a',\n      pocahontas: 'a',\n      redskin: 'a'\n    }\n  },\n  {\n    id: 'redskins',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Native American People': 'a'\n    },\n    inconsiderate: {\n      'red indians': 'a',\n      redskins: 'a'\n    }\n  },\n  {\n    id: 'totem',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      favorite: 'a',\n      inspiration: 'a',\n      'personal interest': 'a',\n      'personality type': 'a'\n    },\n    inconsiderate: {\n      'animal spirit': 'a',\n      'dream catcher': 'a',\n      'spirit animal': 'a',\n      totem: 'a'\n    },\n    note: 'Avoid using terms that oversimplify the complex and varied beliefs of indigenous religions. (source: https://www.worldreligionnews.com/opinion/spirit-animal-not-joke-oppression,https://www.spiralnature.com/spirituality/spirit-animal-cultural-appropriation)'\n  },\n  {\n    id: 'long-time-no-see',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'I haven’t seen you in a long time': 'a',\n      'it’s been a long time': 'a'\n    },\n    inconsiderate: {\n      'long time no hear': 'a',\n      'long time no see': 'a'\n    },\n    note: 'Avoid using phrases that implicitly mock people with limited knowledge of the English language. (source: https://www.npr.org/sections/codeswitch/2014/03/09/288300303/who-first-said-long-time-no-see-and-in-which-language)'\n  },\n  {\n    id: 'indian-country',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'enemy territory': 'a'\n    },\n    inconsiderate: {\n      'Indian country': 'a'\n    },\n    note: 'Avoid using phrases referring to the genocidal United States “Indian Removal” laws. (source: https://newsmaven.io/indiancountrytoday/archive/off-the-reservation-a-teachable-moment-nW1d7U0JRkOszhtg8N1V1A/)'\n  },\n  {\n    id: 'off-reserve',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      disobey: 'a',\n      endure: 'a',\n      'object to': 'a',\n      oppose: 'a',\n      resist: 'a'\n    },\n    inconsiderate: {\n      'jump the reservation': 'a',\n      'off reserve': 'a',\n      'off the reservation': 'a'\n    },\n    note: 'Avoid using phrases referring to the genocidal United States “Indian Removal” laws. (source: http://blog.nativepartnership.org/off-the-reservation/,https://www.wsj.com/articles/off-the-reservation-is-a-phrase-with-a-dark-past-1462552837,https://www.npr.org/sections/codeswitch/2014/06/29/326690947/should-saying-someone-is-off-the-reservation-be-off-limits,https://nowtoronto.com/news/native-references-and-terms-that-are-offensive-to-indigenous-people/)'\n  },\n  {\n    id: 'on-the-warpath',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      defend: 'a'\n    },\n    inconsiderate: {\n      'circle the wagons': 'a',\n      'on the warpath': 'a'\n    },\n    note: 'Avoid using phrases referring to colonial stereotypes regarding Native Americans. (source: https://idioms.thefreedictionary.com/circle+the+wagons,https://idioms.thefreedictionary.com/go+on+the+warpath)'\n  },\n  {\n    id: 'too-many-chiefs',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'too many chefs in the kitchen': 'a',\n      'too many cooks spoil the broth': 'a'\n    },\n    inconsiderate: {\n      'too many chiefs': 'a'\n    },\n    note: 'Avoid using phrases referring to colonial stereotypes regarding Native Americans. (source: https://idioms.thefreedictionary.com/too+many+chiefs+and+not+enough+Indians)'\n  },\n  {\n    id: 'natives-are-restless',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      dissatisfied: 'a',\n      frustrated: 'a'\n    },\n    inconsiderate: {\n      'natives are restless': 'a',\n      'natives are becoming restless': 'a',\n      'natives are getting restless': 'a',\n      'natives are growing restless': 'a'\n    },\n    note: 'Avoid using phrases referring to colonial stereotypes regarding indigenous peoples. (source: https://tvtropes.org/pmwiki/pmwiki.php/Main/TheNativesAreRestless)'\n  },\n  {\n    id: 'powwow',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      conference: 'a',\n      gathering: 'a',\n      meeting: 'a'\n    },\n    inconsiderate: {\n      'pow wow': 'a',\n      powwow: 'a'\n    },\n    note: 'Avoid casually using this term, which refers to traditional indigenous celebration ceremonies that were banned by genocidal laws in the United States and Canada — Native people died fighting for this right. (source: https://twitter.com/chadloder/status/1203507070772793345,http://nativeappropriations.com/2012/09/paul-frank-offends-every-native-person-on-the-planet-with-fashion-night-out-dream-catchin-pow-wow.html,https://www.britannica.com/topic/powwow,https://nowtoronto.com/news/native-references-and-terms-that-are-offensive-to-indigenous-people/)'\n  },\n  {\n    id: 'indian-give',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'go back on one’s offer': 'a'\n    },\n    inconsiderate: {\n      'indian give': 'a',\n      'indian giver': 'a'\n    },\n    note: 'Avoid using phrases referring to colonial stereotypes regarding Native Americans.'\n  },\n  {\n    id: 'pinoys',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Filipinos: 'a',\n      'Filipino people': 'a'\n    },\n    inconsiderate: {\n      pinoys: 'a',\n      pinays: 'a'\n    }\n  },\n  {\n    id: 'towel-heads',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Arabs: 'a',\n      'Middle Eastern People': 'a'\n    },\n    inconsiderate: {\n      'sand niggers': 'a',\n      'towel heads': 'a'\n    }\n  },\n  {\n    id: 'latino',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Latinx: 'a'\n    },\n    inconsiderate: {\n      latino: 'a',\n      latina: 'a'\n    },\n    note: 'Whenever possible, try to be gender inclusive.'\n  },\n  {\n    id: 'japs',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Japanese person': 'a',\n      'Japanese people': 'a'\n    },\n    inconsiderate: {\n      japs: 'a'\n    }\n  },\n  {\n    id: 'hymie',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'Jewish person': 'a'\n    },\n    inconsiderate: {\n      shlomo: 'a',\n      shyster: 'a',\n      hymie: 'a'\n    }\n  },\n  {\n    id: 'goy',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'a person who is not Jewish': 'a',\n      'not Jewish': 'a'\n    },\n    inconsiderate: {\n      goyim: 'a',\n      goyum: 'a',\n      goy: 'a'\n    }\n  },\n  {\n    id: 'spade',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'a Black person': 'a'\n    },\n    inconsiderate: {\n      spade: 'a'\n    }\n  },\n  {\n    id: 'gyp',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      Nomad: 'a',\n      Traveler: 'a',\n      Roma: 'a',\n      Romani: 'a'\n    },\n    inconsiderate: {\n      gyppo: 'a',\n      gypsy: 'a',\n      Gipsy: 'a',\n      gyp: 'a'\n    },\n    note: 'Gypsy is insensitive, use Roma or Romani. They’re not Egyptian as the name suggests. (source: en.wikipedia.org/wiki/Romani_people#cite_ref-80)'\n  },\n  {\n    id: 'blacklist',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      blocklist: 'a',\n      wronglist: 'a',\n      banlist: 'a',\n      'deny list': 'a'\n    },\n    inconsiderate: {\n      blacklist: 'a',\n      'black list': 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'blacklisted',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      blocklisted: 'a',\n      wronglisted: 'a',\n      banlisted: 'a',\n      'deny-listed': 'a'\n    },\n    inconsiderate: {\n      blacklisted: 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'blacklisting',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      blocklisting: 'a',\n      wronglisting: 'a',\n      banlisting: 'a',\n      'deny-listing': 'a'\n    },\n    inconsiderate: {\n      blacklisting: 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'whitelist',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      passlist: 'a',\n      alrightlist: 'a',\n      safelist: 'a',\n      'allow list': 'a'\n    },\n    inconsiderate: {\n      whitelist: 'a',\n      'white list': 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'whitelisted',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      passlisted: 'a',\n      alrightlisted: 'a',\n      safelisted: 'a',\n      'allow-listed': 'a'\n    },\n    inconsiderate: {\n      whitelisted: 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'whitelisting',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      passlisting: 'a',\n      alrightlisting: 'a',\n      safelisting: 'a',\n      'allow-listing': 'a'\n    },\n    inconsiderate: {\n      whitelisting: 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'whitespace',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      space: 'a',\n      blank: 'a'\n    },\n    inconsiderate: {\n      whitespace: 'a',\n      'white space': 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'whitespaces',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      space: 'a',\n      blank: 'a'\n    },\n    inconsiderate: {\n      whitespaces: 'a',\n      'white spaces': 'a'\n    },\n    note: 'Replace racially-charged language with more accurate and inclusive words'\n  },\n  {\n    id: 'savage',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      simple: 'a',\n      indigenous: 'a',\n      'hunter-gatherer': 'a'\n    },\n    inconsiderate: {\n      primitive: 'a',\n      savage: 'a',\n      'stone age': 'a'\n    },\n    note: 'Avoid using terms that imply a group has not changed over time and that they are inferior'\n  },\n  {\n    id: 'tribe',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      society: 'a',\n      community: 'a'\n    },\n    inconsiderate: {\n      tribe: 'a'\n    },\n    note: 'Avoid using terms that make some groups sound inferior'\n  },\n  {\n    id: 'sophisticated-culture',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'complex culture': 'a'\n    },\n    inconsiderate: {\n      'sophisticated culture': 'a'\n    },\n    note: 'Avoid using terms that make some groups sound inferior. Replace “sophisticated” with a neutral term such as “complex”'\n  },\n  {\n    id: 'sophisticated-technology',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'complex technology': 'a'\n    },\n    inconsiderate: {\n      'sophisticated technology': 'a'\n    },\n    note: 'Avoid using terms that make some groups sound inferior. Replace “sophisticated” with a neutral term such as “complex”'\n  },\n  {\n    id: 'bugreport',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'bug report': 'a',\n      snapshot: 'a'\n    },\n    inconsiderate: {\n      bugreport: 'a'\n    },\n    note: 'Avoid using `bugreport`, as the word `bugre` is a slur in Brazilian Portuguese'\n  },\n  {\n    id: 'grandfather-clause',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'legacy policy': 'a',\n      'legacy clause': 'a',\n      'deprecation policy': 'a'\n    },\n    inconsiderate: {\n      'grandfather clause': 'a',\n      'grandfather policy': 'a'\n    },\n    note: 'Avoid using phrases referring to racist United States “Jim Crow” laws. (source: https://en.wikipedia.org/wiki/Grandfather_clause#Origin)'\n  },\n  {\n    id: 'grandfathering',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      deprecate: 'a'\n    },\n    inconsiderate: {\n      grandfathering: 'a'\n    },\n    note: 'Avoid using phrases referring to racist United States “Jim Crow” laws. (source: https://en.wikipedia.org/wiki/Grandfather_clause#Origin)'\n  },\n  {\n    id: 'grandfathered',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      deprecated: 'a'\n    },\n    inconsiderate: {\n      grandfathered: 'a'\n    },\n    note: 'Avoid using phrases referring to racist United States “Jim Crow” laws. (source: https://en.wikipedia.org/wiki/Grandfather_clause#Origin)'\n  },\n  {\n    id: 'make-*-great-again',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      improve: 'a'\n    },\n    inconsiderate: {\n      'make * great again': 'a',\n      'make * * great again': 'a',\n      'make * * * great again': 'a',\n      'make * * * * great again': 'a',\n      'make * * * * * great again': 'a'\n    }\n  },\n  {\n    id: 'committed-suicide',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'died by suicide': 'a'\n    },\n    inconsiderate: {\n      'committed suicide': 'a',\n      'completed suicide': 'a'\n    },\n    note: 'Source: https://www.afsp.org/news-events/for-the-media/reporting-on-suicide, https://www.speakingofsuicide.com/2013/04/13/language/'\n  },\n  {\n    id: 'commit-suicide',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'die by suicide': 'a'\n    },\n    inconsiderate: {\n      'commit suicide': 'a',\n      'complete suicide': 'a',\n      'successful suicide': 'a'\n    },\n    note: 'Committing suicide is not successful/unsuccessful, that sends the wrong message (source: https://www.afsp.org/news-events/for-the-media/reporting-on-suicide, https://www.speakingofsuicide.com/2013/04/13/language/)'\n  },\n  {\n    id: 'suicide-pact',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'rise in suicides': 'a'\n    },\n    inconsiderate: {\n      'suicide epidemic': 'a',\n      'epidemic of suicides': 'a',\n      'suicide pact': 'a'\n    },\n    note: 'Using sensational words can cause copycat suicides or contagion (source: https://www.afsp.org/news-events/for-the-media/reporting-on-suicide)'\n  },\n  {\n    id: 'failed-suicide',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'suicide attempt': 'a',\n      'attempted suicide': 'a'\n    },\n    inconsiderate: {\n      'failed suicide': 'a',\n      'failed attempt': 'a',\n      'suicide failure': 'a'\n    },\n    note: 'Attempted suicide should not be depicted as a failure (source: https://www.speakingofsuicide.com/2013/04/13/language, https://www.afsp.org/news-events/for-the-media/reporting-on-suicide)'\n  },\n  {\n    id: 'suicide-note',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'a note from the deceased': 'a'\n    },\n    inconsiderate: {\n      'suicide note': 'a'\n    },\n    note: 'Source: https://www.afsp.org/news-events/for-the-media/reporting-on-suicide'\n  },\n  {\n    id: 'hang',\n    type: 'basic',\n    categories: ['a'],\n    considerate: {\n      'the app froze': 'a',\n      'the app stopped responding': 'a',\n      'the app stopped responding to events': 'a',\n      'the app became unresponsive': 'a'\n    },\n    inconsiderate: {\n      hang: 'a',\n      hanged: 'a'\n    },\n    note: 'When describing the behavior of computer software, using the word “hanged” needlessly invokes the topic of death by self-harm or lynching.  Consider using the word “froze” or the phrase “stopped responding to events” or “became unresponsive” instead.'\n  }\n]\n","/**\n * @typedef {import('nlcst').Root} Root\n * @typedef {import('nlcst').Sentence} Sentence\n * @typedef {import('nlcst').SentenceContent} SentenceContent\n * @typedef {import('nlcst').Content} Content\n * @typedef {import('nlcst').Parent} Parent\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('nlcst-search').Handler} SearchHandle\n * @typedef {import('./en.js').Pattern} Pattern\n *\n * @typedef Match\n * @property {string} type\n * @property {Parent} parent\n * @property {Content[]} nodes\n * @property {number} start\n * @property {number} end\n *\n * @typedef Options\n * @property {string[]} [ignore]\n * @property {boolean} [noBinary=false]\n */\n\nimport {normalize} from 'nlcst-normalize'\nimport {search} from 'nlcst-search'\nimport {toString} from 'nlcst-to-string'\nimport {quotation} from 'quotation'\nimport {visit, SKIP} from 'unist-util-visit'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\nconst word = convert('WordNode')\nconst whiteSpace = convert('WhiteSpaceNode')\nconst punctuation = convert('PunctuationNode')\n\n/**\n * @param {Pattern[]} patterns\n * @param {string} lang\n */\nexport function factory(patterns, lang) {\n  // Needed for other languages.\n  /* c8 ignore next */\n  const source = 'retext-equality' + (lang === 'en' ? '' : '-' + lang)\n\n  // Several pattern types can be handled.\n  // Handlers are stored in this map by type.\n  const handlers = {or, basic}\n\n  // Internal mapping.\n  /** @type {Record<string, Pattern>} */\n  const byId = {}\n  /** @type {Pattern[]} */\n  const byIndex = []\n  /** @type {string[]} */\n  const apostrophes = []\n  /** @type {string[]} */\n  const list = []\n\n  unpack()\n\n  /** @type {import('unified').Plugin<[Options?], Root>} */\n  return (options = {}) => {\n    const ignore = options.ignore || []\n    const noBinary = options.noBinary\n    let index = -1\n    /** @type {string[]} */\n    const noNormalize = []\n    /** @type {string[]} */\n    const normalize = []\n\n    while (++index < list.length) {\n      const item = list[index]\n\n      if (ignore.includes(item)) {\n        continue\n      }\n\n      if (apostrophes.includes(item)) {\n        noNormalize.push(item)\n      } else {\n        normalize.push(item)\n      }\n    }\n\n    return (tree, file) => {\n      visit(tree, 'ParagraphNode', (node) => {\n        /** @type {Record<string, Match[]>} */\n        const matches = {}\n\n        search(node, normalize, handle)\n        search(node, noNormalize, handle, true)\n\n        /** @type {string} */\n        let key\n\n        // Ignore or emit offending words based on their pattern.\n        for (key in matches) {\n          if (own.call(matches, key)) {\n            const pattern = byId[key]\n            handlers[\n              pattern.type === 'or' && noBinary ? 'basic' : pattern.type\n            ](matches[key], pattern, file)\n          }\n        }\n\n        return SKIP\n\n        // Handle a match.\n        /** @type {SearchHandle} */\n        function handle(match, position, parent, phrase) {\n          const index = list.indexOf(phrase)\n          const pattern = byIndex[index]\n          const id = pattern.id\n\n          if (phrase !== phrase.toLowerCase() && toString(match) !== phrase) {\n            return\n          }\n\n          if (!(id in matches)) {\n            matches[id] = []\n          }\n\n          matches[id].push({\n            type: pattern.inconsiderate[phrase],\n            parent,\n            nodes: match,\n            start: position,\n            end: position + match.length - 1\n          })\n        }\n      })\n    }\n  }\n\n  function unpack() {\n    let index = -1\n\n    while (++index < patterns.length) {\n      const pattern = patterns[index]\n      /** @type {string} */\n      let phrase\n\n      byId[pattern.id] = pattern\n\n      for (phrase in pattern.inconsiderate) {\n        if (own.call(pattern.inconsiderate, phrase)) {\n          list.push(phrase)\n          byIndex.push(pattern)\n          if (pattern.apostrophe) apostrophes.push(phrase)\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle matches for a `basic` pattern.\n   * **Basic** patterns need no extra logic, every match is emitted as a\n   * warning.\n   *\n   * @param {Match[]} matches\n   * @param {Pattern} pattern\n   * @param {VFile} file\n   * @returns {void}\n   */\n  function basic(matches, pattern, file) {\n    let index = -1\n\n    while (++index < matches.length) {\n      warn(file, matches[index], pattern)\n    }\n  }\n\n  /**\n   * Handle matches for an **or** pattern.\n   * **Or** patterns emit a warning unless every category is present.\n   *\n   * For example, when `him` and `her` occur adjacent to each other, they are not\n   * warned about.\n   * But when they occur alone, they are.\n   *\n   * @param {Match[]} matches\n   * @param {Pattern} pattern\n   * @param {VFile} file\n   * @returns {void}\n   */\n  function or(matches, pattern, file) {\n    let index = -1\n\n    while (++index < matches.length) {\n      const match = matches[index]\n      const siblings = match.parent.children\n      const next = matches[index + 1]\n\n      if (next && next.parent === match.parent && next.type !== match.type) {\n        let start = match.end\n\n        while (++start < next.start) {\n          const sibling = siblings[start]\n\n          if (\n            whiteSpace(sibling) ||\n            (word(sibling) && /(and|or)/.test(normalize(sibling))) ||\n            (punctuation(sibling) && normalize(sibling) === '/')\n          ) {\n            continue\n          }\n\n          break\n        }\n\n        // If we didn’t break…\n        if (start === next.start) {\n          index++\n          continue\n        }\n      }\n\n      warn(file, match, pattern)\n    }\n  }\n\n  /**\n   * @param {VFile} file\n   * @param {Match} match\n   * @param {Pattern} pattern\n   * @returns {void}\n   */\n  function warn(file, match, pattern) {\n    const actual = toString(match.nodes)\n    /** @type {string[]|undefined} */\n    let expected\n\n    if (pattern.considerate) {\n      expected = Object.keys(pattern.considerate)\n\n      // Capitalize suggestions.\n      if (actual.charAt(0).toUpperCase() === actual.charAt(0)) {\n        let index = -1\n\n        while (++index < expected.length) {\n          expected[index] =\n            expected[index].charAt(0).toUpperCase() + expected[index].slice(1)\n        }\n      }\n    }\n\n    Object.assign(\n      file.message(\n        quotation(actual, '`') +\n          ' may be insensitive' +\n          (pattern.condition ? ', ' + pattern.condition : '') +\n          ', ' +\n          (expected\n            ? 'use ' + quotation(expected, '`').join(', ') + ' instead'\n            : 'try not to use it'),\n        match.nodes[0],\n        [source, pattern.id].join(':')\n      ),\n      {actual, expected, note: pattern.note}\n    )\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('./factory.js').Options} Options\n */\n\nimport {cuss} from 'cuss'\nimport pluralize from 'pluralize'\nimport {factory} from './factory.js'\n\nconst retextProfanitiesEn = factory({\n  lang: 'en',\n  cuss,\n  pluralize,\n  // Misclassified singulars and plurals.\n  ignorePluralize: [\n    'children',\n    'dy', // Singular of `dies`.\n    'pro', // Singular of `pros`.\n    'so', // Singular of `sos`.\n    'dice', // Plural of `die`.\n    'fus' // Plural of `fu`.\n  ],\n  // List of values not to normalize.\n  regular: ['hell']\n})\n\nexport default retextProfanitiesEn\n","/**\n * @typedef {import('nlcst').Root} Root\n *\n * @typedef Config\n * @property {string} lang\n * @property {Record<string, number>} cuss\n * @property {{singular: (word: string) => string, plural: (word: string) => string}} [pluralize]\n * @property {string[]} [ignorePluralize]\n * @property {string[]} [regular]\n *\n * @typedef Options\n *   Configuration.\n * @property {string[]} [ignore]\n *   Phrases *not* to warn about.\n * @property {0|1|2} [sureness=0]\n *   Minimum *sureness* to warn about, see `cuss`.\n */\n\nimport {search} from 'nlcst-search'\nimport {toString} from 'nlcst-to-string'\nimport {quotation} from 'quotation'\nimport {pointStart, pointEnd} from 'unist-util-position'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Config} config\n */\nexport function factory(config) {\n  const regular = config.regular || []\n  const words = unpack()\n  const source =\n    'retext-profanities' + (config.lang === 'en' ? '' : '-' + config.lang)\n\n  /**\n   * Plugin to check for profane and vulgar wording.\n   * Uses `cuss` for sureness.\n   *\n   * @type {import('unified').Plugin<[Options?], Root>}\n   */\n  return (options = {}) => {\n    const ignore = options.ignore || []\n    const sureness = options.sureness || 0\n    const phrases = Object.keys(words).filter((d) => !ignore.includes(d))\n    const normals =\n      regular.length > 0 ? phrases.filter((d) => !regular.includes(d)) : phrases\n    const literals = regular.filter((d) => phrases.includes(d))\n\n    return (tree, file) => {\n      search(tree, normals, handle)\n      search(tree, literals, handle, true)\n\n      /** @type {import('nlcst-search').Handler} */\n      function handle(match, _, _1, phrase) {\n        const profanitySeverity = words[phrase]\n        const actual = toString(match)\n\n        if (profanitySeverity < sureness) {\n          return\n        }\n\n        Object.assign(\n          file.message(\n            [\n              profanitySeverity === 0\n                ? 'Be careful with'\n                : profanitySeverity === 1\n                ? 'Reconsider using'\n                : 'Don’t use',\n              quotation(actual, '`') + ',',\n              profanitySeverity === 0\n                ? 'it’s profane in some cases'\n                : profanitySeverity === 1\n                ? 'it may be profane'\n                : 'it’s profane'\n            ].join(' '),\n            {\n              start: pointStart(match[0]),\n              end: pointEnd(match[match.length - 1])\n            },\n            [source, phrase.replace(/\\W+/g, '-')].join(':')\n          ),\n          {profanitySeverity, actual, expected: []}\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {Record<string, number>}\n   */\n  function unpack() {\n    /** @type {Record<string, number>} */\n    const result = {}\n    /** @type {string} */\n    let key\n\n    for (key in config.cuss) {\n      if (own.call(config.cuss, key)) {\n        add(key, config.cuss[key])\n\n        if (config.pluralize) {\n          add(config.pluralize.singular(key), config.cuss[key])\n          add(config.pluralize.plural(key), config.cuss[key])\n        }\n      }\n    }\n\n    /**\n     * @param {string} key\n     * @param {number} value\n     */\n    function add(key, value) {\n      if (!config.ignorePluralize || !config.ignorePluralize.includes(key)) {\n        result[key] = value\n      }\n    }\n\n    return result\n  }\n}\n","/**\n * @typedef {import('./factory.js').Options} Options\n */\n\nimport retextProfanities from './en.js'\n\nexport default retextProfanities\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array.<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","/**\n * @typedef {Object} CoreOptions\n * @property {string[]} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef {Object} FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {string[]} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {string[]} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {Object} FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Object.<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Create a custom constructor which can be modified without affecting the\n * original class.\n *\n * @template {{prototype: object, new (...args: any[]): any}} Class\n * @param {Class} Super\n * @return {Class}\n */\nexport function unherit(Super) {\n  const Of = class extends Super {}\n\n  // Clone values.\n  const proto = Of.prototype\n  /** @type {string} */\n  let key\n\n  // We specifically want to get *all* fields, not just own fields.\n  // eslint-disable-next-line guard-for-in\n  for (key in proto) {\n    /** @type {unknown} */\n    const value = proto[key]\n\n    if (value && typeof value === 'object') {\n      // @ts-expect-error: shallow clone arrays or other values.\n      proto[key] = 'concat' in value ? value.concat() : Object.assign({}, value)\n    }\n  }\n\n  return Of\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile-message').VFileMessage} VFileMessage\n *\n * @typedef {OptionsWithoutReset|OptionsWithReset} Options\n * @typedef {OptionsBaseFields & OptionsWithoutResetFields} OptionsWithoutReset\n * @typedef {OptionsBaseFields & OptionsWithResetFields} OptionsWithReset\n *\n * @typedef OptionsWithoutResetFields\n * @property {false} [reset]\n *   Whether to treat all messages as turned off initially.\n * @property {string[]} [disable]\n *   List of `ruleId`s to turn off.\n *\n * @typedef OptionsWithResetFields\n * @property {true} reset\n *   Whether to treat all messages as turned off initially.\n * @property {string[]} [enable]\n *   List of `ruleId`s to initially turn on.\n *\n * @typedef OptionsBaseFields\n * @property {string} name\n *   Name of markers that can control the message sources.\n *\n *   For example, `{name: 'alpha'}` controls `alpha` markers:\n *\n *   ```html\n *   <!--alpha ignore-->\n *   ```\n * @property {MarkerParser} marker\n *   Parse a possible marker to a comment marker object (Marker).\n *   If the marker isn't a marker, should return `null`.\n * @property {Test} [test]\n *   Test for possible markers\n * @property {string[]} [known]\n *   List of allowed `ruleId`s. When given a warning is shown\n *   when someone tries to control an unknown rule.\n *\n *   For example, `{name: 'alpha', known: ['bravo']}` results in a warning if\n *   `charlie` is configured:\n *\n *   ```html\n *   <!--alpha ignore charlie-->\n *   ```\n * @property {string|string[]} [source]\n *   Sources that can be controlled with `name` markers.\n *   Defaults to `name`.\n *\n * @callback MarkerParser\n *   Parse a possible comment marker node to a Marker.\n * @param {Node} node\n *   Node to parse\n *\n * @typedef Marker\n *   A comment marker.\n * @property {string} name\n *   Name of marker.\n * @property {string} attributes\n *   Value after name.\n * @property {Record<string, string|number|boolean>} parameters\n *   Parsed attributes.\n * @property {Node} node\n *   Reference to given node.\n *\n * @typedef Mark\n * @property {Point|undefined} point\n * @property {boolean} state\n */\n\nimport {location} from 'vfile-location'\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @type {import('unified').Plugin<[Options]>}\n * @returns {(tree: Node, file: VFile) => void}\n */\nexport default function messageControl(options) {\n  if (!options || typeof options !== 'object' || !options.name) {\n    throw new Error(\n      'Expected `name` in `options`, got `' + (options || {}).name + '`'\n    )\n  }\n\n  if (!options.marker) {\n    throw new Error(\n      'Expected `marker` in `options`, got `' + options.marker + '`'\n    )\n  }\n\n  const enable = 'enable' in options && options.enable ? options.enable : []\n  const disable = 'disable' in options && options.disable ? options.disable : []\n  let reset = options.reset\n  const sources =\n    typeof options.source === 'string'\n      ? [options.source]\n      : options.source || [options.name]\n\n  return transformer\n\n  /**\n   * @param {Node} tree\n   * @param {VFile} file\n   */\n  function transformer(tree, file) {\n    const toOffset = location(file).toOffset\n    const initial = !reset\n    const gaps = detectGaps(tree, file)\n    /** @type {Record<string, Mark[]>} */\n    const scope = {}\n    /** @type {Mark[]} */\n    const globals = []\n\n    visit(tree, options.test, visitor)\n\n    file.messages = file.messages.filter((m) => filter(m))\n\n    /**\n     * @param {Node} node\n     * @param {number|null} position\n     * @param {Parent|null} parent\n     */\n    function visitor(node, position, parent) {\n      /** @type {Marker|null} */\n      const mark = options.marker(node)\n\n      if (!mark || mark.name !== options.name) {\n        return\n      }\n\n      const ruleIds = mark.attributes.split(/\\s/g)\n      const point = mark.node.position && mark.node.position.start\n      const next =\n        (parent && position !== null && parent.children[position + 1]) ||\n        undefined\n      const tail = (next && next.position && next.position.end) || undefined\n      let index = -1\n\n      /** @type {string} */\n      // @ts-expect-error: we’ll check for unknown values next.\n      const verb = ruleIds.shift()\n\n      if (verb !== 'enable' && verb !== 'disable' && verb !== 'ignore') {\n        file.fail(\n          'Unknown keyword `' +\n            verb +\n            '`: expected ' +\n            \"`'enable'`, `'disable'`, or `'ignore'`\",\n          mark.node\n        )\n      }\n\n      // Apply to all rules.\n      if (ruleIds.length > 0) {\n        while (++index < ruleIds.length) {\n          const ruleId = ruleIds[index]\n\n          if (isKnown(ruleId, verb, mark.node)) {\n            toggle(point, verb === 'enable', ruleId)\n\n            if (verb === 'ignore') {\n              toggle(tail, true, ruleId)\n            }\n          }\n        }\n      } else if (verb === 'ignore') {\n        toggle(point, false)\n        toggle(tail, true)\n      } else {\n        toggle(point, verb === 'enable')\n        reset = verb !== 'enable'\n      }\n    }\n\n    /**\n     * @param {VFileMessage} message\n     * @returns {boolean}\n     */\n    function filter(message) {\n      let gapIndex = gaps.length\n\n      // Keep messages from a different source.\n      if (!message.source || !sources.includes(message.source)) {\n        return true\n      }\n\n      // We only ignore messages if they‘re disabled, *not* when they’re not in\n      // the document.\n      if (!message.line) {\n        message.line = 1\n      }\n\n      if (!message.column) {\n        message.column = 1\n      }\n\n      // Check whether the warning is inside a gap.\n      // @ts-expect-error: we just normalized `null` to `number`s.\n      const offset = toOffset(message)\n\n      while (gapIndex--) {\n        if (gaps[gapIndex][0] <= offset && gaps[gapIndex][1] > offset) {\n          return false\n        }\n      }\n\n      // Check whether allowed by specific and global states.\n      return (\n        (!message.ruleId ||\n          check(message, scope[message.ruleId], message.ruleId)) &&\n        check(message, globals)\n      )\n    }\n\n    /**\n     * Helper to check (and possibly warn) if a `ruleId` is unknown.\n     *\n     * @param {string} ruleId\n     * @param {string} verb\n     * @param {Node} node\n     * @returns {boolean}\n     */\n    function isKnown(ruleId, verb, node) {\n      const result = options.known ? options.known.includes(ruleId) : true\n\n      if (!result) {\n        file.message(\n          'Unknown rule: cannot ' + verb + \" `'\" + ruleId + \"'`\",\n          node\n        )\n      }\n\n      return result\n    }\n\n    /**\n     * Get the latest state of a rule.\n     * When without `ruleId`, gets global state.\n     *\n     * @param {string|undefined} ruleId\n     * @returns {boolean}\n     */\n    function getState(ruleId) {\n      const ranges = ruleId ? scope[ruleId] : globals\n\n      if (ranges && ranges.length > 0) {\n        return ranges[ranges.length - 1].state\n      }\n\n      if (!ruleId) {\n        return !reset\n      }\n\n      return reset ? enable.includes(ruleId) : !disable.includes(ruleId)\n    }\n\n    /**\n     * Handle a rule.\n     *\n     * @param {Point|undefined} point\n     * @param {boolean} state\n     * @param {string|undefined} [ruleId]\n     * @returns {void}\n     */\n    function toggle(point, state, ruleId) {\n      let markers = ruleId ? scope[ruleId] : globals\n\n      if (!markers) {\n        markers = []\n        scope[String(ruleId)] = markers\n      }\n\n      const previousState = getState(ruleId)\n\n      if (state !== previousState) {\n        markers.push({state, point})\n      }\n\n      // Toggle all known rules.\n      if (!ruleId) {\n        for (ruleId in scope) {\n          if (own.call(scope, ruleId)) {\n            toggle(point, state, ruleId)\n          }\n        }\n      }\n    }\n\n    /**\n     * Check all `ranges` for `message`.\n     *\n     * @param {VFileMessage} message\n     * @param {Mark[]|undefined} ranges\n     * @param {string|undefined} [ruleId]\n     * @returns {boolean}\n     */\n    function check(message, ranges, ruleId) {\n      if (ranges && ranges.length > 0) {\n        // Check the state at the message’s position.\n        let index = ranges.length\n\n        while (index--) {\n          const range = ranges[index]\n\n          if (\n            message.line &&\n            message.column &&\n            range.point &&\n            range.point.line &&\n            range.point.column &&\n            (range.point.line < message.line ||\n              (range.point.line === message.line &&\n                range.point.column <= message.column))\n          ) {\n            return range.state === true\n          }\n        }\n      }\n\n      // The first marker ocurred after the first message, so we check the\n      // initial state.\n      if (!ruleId) {\n        return Boolean(initial || reset)\n      }\n\n      return reset ? enable.includes(ruleId) : !disable.includes(ruleId)\n    }\n  }\n}\n\n/**\n * Detect gaps in `tree`.\n *\n * @param {Node} tree\n * @param {VFile} file\n */\nfunction detectGaps(tree, file) {\n  /** @type {Node[]} */\n  // @ts-expect-error: fine.\n  const children = tree.children || []\n  const lastNode = children[children.length - 1]\n  /** @type {[number, number][]} */\n  const gaps = []\n  let offset = 0\n  /** @type {boolean|undefined} */\n  let gap\n\n  // Find all gaps.\n  visit(tree, one)\n\n  // Get the end of the document.\n  // This detects if the last node was the last node.\n  // If not, there’s an extra gap between the last node and the end of the\n  // document.\n  if (\n    lastNode &&\n    lastNode.position &&\n    lastNode.position.end &&\n    offset === lastNode.position.end.offset &&\n    file.toString().slice(offset).trim() !== ''\n  ) {\n    update()\n\n    update(\n      tree &&\n        tree.position &&\n        tree.position.end &&\n        tree.position.end.offset &&\n        tree.position.end.offset - 1\n    )\n  }\n\n  return gaps\n\n  /**\n   * @param {Node} node\n   */\n  function one(node) {\n    update(node.position && node.position.start && node.position.start.offset)\n\n    if (!('children' in node)) {\n      update(node.position && node.position.end && node.position.end.offset)\n    }\n  }\n\n  /**\n   * Detect a new position.\n   *\n   * @param {number|undefined} [latest]\n   * @returns {void}\n   */\n  function update(latest) {\n    if (latest === null || latest === undefined) {\n      gap = true\n    } else if (offset < latest) {\n      if (gap) {\n        gaps.push([offset, latest])\n        gap = undefined\n      }\n\n      offset = latest\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {number|null} index Position of `node` in `parent`\n * @param {Parent|null} parent Parent of `node`\n * @returns {VisitorResult}\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\nexport const visit =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        var parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n","/**\n * @typedef {import('unist').Position} Position\n *\n * @typedef {[number, number]} RangeLike\n *\n * @typedef PointLike\n * @property {number|null|undefined} [line]\n * @property {number|null|undefined} [column]\n *\n * @typedef LocLike\n * @property {PointLike|null|undefined} [start]\n * @property {PointLike|null|undefined} [end]\n *\n * @typedef NodeLike\n * @property {LocLike|null|undefined} [loc]\n * @property {RangeLike|null|undefined} [range]\n * @property {number|null|undefined} [start]\n * @property {number|null|undefined} [end]\n */\n\n/**\n * Given an estree `node`, returns a unist `position`.\n * @param {NodeLike|null} [value]\n * @returns {Position}\n */\nexport function positionFromEstree(value) {\n  /** @type {NodeLike} */\n  const node = value || {}\n  /** @type {LocLike} */\n  const loc = node.loc || {}\n  /** @type {RangeLike} */\n  const range = node.range || [0, 0]\n  const startOffset = range[0] || node.start\n  const endOffset = range[1] || node.end\n\n  return {\n    start: {\n      // @ts-expect-error: return no point / no position next major.\n      line:\n        loc.start && typeof loc.start.line === 'number' && loc.start.line > -1\n          ? loc.start.line\n          : undefined,\n      // @ts-expect-error: return no point / no position next major.\n      column:\n        loc.start &&\n        typeof loc.start.column === 'number' &&\n        loc.start.column > -1\n          ? loc.start.column + 1\n          : undefined,\n      offset:\n        typeof startOffset === 'number' && startOffset > -1\n          ? startOffset\n          : undefined\n    },\n    end: {\n      // @ts-expect-error: return no point / no position next major.\n      line:\n        loc.end && typeof loc.end.line === 'number' && loc.end.line > -1\n          ? loc.end.line\n          : undefined,\n      // @ts-expect-error: return no point / no position next major.\n      column:\n        loc.end && typeof loc.end.column === 'number' && loc.end.column > -1\n          ? loc.end.column + 1\n          : undefined,\n      offset:\n        typeof endOffset === 'number' && endOffset > -1 ? endOffset : undefined\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\nexport var pointStart = point('start')\nexport var pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike} [node]\n * @returns {Position}\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    /** @type {Point} */\n    // @ts-ignore looks like a point\n    var point = (node && node.position && node.position[type]) || {}\n\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {CONTINUE|SKIP|EXIT} Action Union of the action types\n * @typedef {number} Index Move to the sibling at index next (after node itself is completely traversed). Useful if mutating the tree, such as removing the node the visitor is currently on, or any of its previous siblings (or next siblings, in case of reverse) Results less than 0 or greater than or equal to children.length stop traversing the parent\n * @typedef {[(Action|null|undefined|void)?, (Index|null|undefined)?]} ActionTuple List with one or two values, the first an action, the second an index.\n * @typedef {null|undefined|Action|Index|ActionTuple|void} VisitorResult Any value that can be returned from a visitor\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {Array.<Parent>} ancestors Ancestors of node\n * @returns {VisitorResult}\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-ignore no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      var is = convert(test)\n      var step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array.<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Object.<string, unknown>} */\n        var value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string} */\n        var name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          var result = []\n          /** @type {ActionTuple} */\n          var subresult\n          /** @type {number} */\n          var offset\n          /** @type {Array.<Parent>} */\n          var grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          if (node.children && result[0] !== SKIP) {\n            // @ts-ignore looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-ignore looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-ignore looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test, optional\n * @param visitor Function to run for each node\n * @param reverse Fisit the tree in reverse, defaults to false\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types').Action} Action\n * @typedef {import('./complex-types').Index} Index\n * @typedef {import('./complex-types').ActionTuple} ActionTuple\n * @typedef {import('./complex-types').VisitorResult} VisitorResult\n * @typedef {import('./complex-types').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass a test\n *\n * @param tree Abstract syntax tree to walk\n * @param test Test node, optional\n * @param visitor Function to run for each node\n * @param reverse Visit the tree in reverse order, defaults to false\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types').Visitor<Node>} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array.<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Object.<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array.<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","import { dequal } from 'dequal';\nimport { compare, lines } from 'uvu/diff';\n\nfunction dedent(str) {\n\tstr = str.replace(/\\r?\\n/g, '\\n');\n  let arr = str.match(/^[ \\t]*(?=\\S)/gm);\n  let i = 0, min = 1/0, len = (arr||[]).length;\n  for (; i < len; i++) min = Math.min(min, arr[i].length);\n  return len && min ? str.replace(new RegExp(`^[ \\\\t]{${min}}`, 'gm'), '') : str;\n}\n\nexport class Assertion extends Error {\n\tconstructor(opts={}) {\n\t\tsuper(opts.message);\n\t\tthis.name = 'Assertion';\n\t\tthis.code = 'ERR_ASSERTION';\n\t\tif (Error.captureStackTrace) {\n\t\t\tError.captureStackTrace(this, this.constructor);\n\t\t}\n\t\tthis.details = opts.details || false;\n\t\tthis.generated = !!opts.generated;\n\t\tthis.operator = opts.operator;\n\t\tthis.expects = opts.expects;\n\t\tthis.actual = opts.actual;\n\t}\n}\n\nfunction assert(bool, actual, expects, operator, detailer, backup, msg) {\n\tif (bool) return;\n\tlet message = msg || backup;\n\tif (msg instanceof Error) throw msg;\n\tlet details = detailer && detailer(actual, expects);\n\tthrow new Assertion({ actual, expects, operator, message, details, generated: !msg });\n}\n\nexport function ok(val, msg) {\n\tassert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);\n}\n\nexport function is(val, exp, msg) {\n\tassert(val === exp, val, exp, 'is', compare, 'Expected values to be strictly equal:', msg);\n}\n\nexport function equal(val, exp, msg) {\n\tassert(dequal(val, exp), val, exp, 'equal', compare, 'Expected values to be deeply equal:', msg);\n}\n\nexport function unreachable(msg) {\n\tassert(false, true, false, 'unreachable', false, 'Expected not to be reached!', msg);\n}\n\nexport function type(val, exp, msg) {\n\tlet tmp = typeof val;\n\tassert(tmp === exp, tmp, exp, 'type', false, `Expected \"${tmp}\" to be \"${exp}\"`, msg);\n}\n\nexport function instance(val, exp, msg) {\n\tlet name = '`' + (exp.name || exp.constructor.name) + '`';\n\tassert(val instanceof exp, val, exp, 'instance', false, `Expected value to be an instance of ${name}`, msg);\n}\n\nexport function match(val, exp, msg) {\n\tif (typeof exp === 'string') {\n\t\tassert(val.includes(exp), val, exp, 'match', false, `Expected value to include \"${exp}\" substring`, msg);\n\t} else {\n\t\tassert(exp.test(val), val, exp, 'match', false, `Expected value to match \\`${String(exp)}\\` pattern`, msg);\n\t}\n}\n\nexport function snapshot(val, exp, msg) {\n\tval=dedent(val); exp=dedent(exp);\n\tassert(val === exp, val, exp, 'snapshot', lines, 'Expected value to match snapshot:', msg);\n}\n\nconst lineNums = (x, y) => lines(x, y, 1);\nexport function fixture(val, exp, msg) {\n\tval=dedent(val); exp=dedent(exp);\n\tassert(val === exp, val, exp, 'fixture', lineNums, 'Expected value to match fixture:', msg);\n}\n\nexport function throws(blk, exp, msg) {\n\tif (!msg && typeof exp === 'string') {\n\t\tmsg = exp; exp = null;\n\t}\n\n\ttry {\n\t\tblk();\n\t\tassert(false, false, true, 'throws', false, 'Expected function to throw', msg);\n\t} catch (err) {\n\t\tif (err instanceof Assertion) throw err;\n\n\t\tif (typeof exp === 'function') {\n\t\t\tassert(exp(err), false, true, 'throws', false, 'Expected function to throw matching exception', msg);\n\t\t} else if (exp instanceof RegExp) {\n\t\t\tassert(exp.test(err.message), false, true, 'throws', false, `Expected function to throw exception matching \\`${String(exp)}\\` pattern`, msg);\n\t\t}\n\t}\n}\n\n// ---\n\nexport function not(val, msg) {\n\tassert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);\n}\n\nnot.ok = not;\n\nis.not = function (val, exp, msg) {\n\tassert(val !== exp, val, exp, 'is.not', false, 'Expected values not to be strictly equal', msg);\n}\n\nnot.equal = function (val, exp, msg) {\n\tassert(!dequal(val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);\n}\n\nnot.type = function (val, exp, msg) {\n\tlet tmp = typeof val;\n\tassert(tmp !== exp, tmp, exp, 'not.type', false, `Expected \"${tmp}\" not to be \"${exp}\"`, msg);\n}\n\nnot.instance = function (val, exp, msg) {\n\tlet name = '`' + (exp.name || exp.constructor.name) + '`';\n\tassert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);\n}\n\nnot.snapshot = function (val, exp, msg) {\n\tval=dedent(val); exp=dedent(exp);\n\tassert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);\n}\n\nnot.fixture = function (val, exp, msg) {\n\tval=dedent(val); exp=dedent(exp);\n\tassert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);\n}\n\nnot.match = function (val, exp, msg) {\n\tif (typeof exp === 'string') {\n\t\tassert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include \"${exp}\" substring`, msg);\n\t} else {\n\t\tassert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \\`${String(exp)}\\` pattern`, msg);\n\t}\n}\n\nnot.throws = function (blk, exp, msg) {\n\tif (!msg && typeof exp === 'string') {\n\t\tmsg = exp; exp = null;\n\t}\n\n\ttry {\n\t\tblk();\n\t} catch (err) {\n\t\tif (typeof exp === 'function') {\n\t\t\tassert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);\n\t\t} else if (exp instanceof RegExp) {\n\t\t\tassert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \\`${String(exp)}\\` pattern`, msg);\n\t\t} else if (!exp) {\n\t\t\tassert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);\n\t\t}\n\t}\n}\n","import kleur from 'kleur';\nimport * as diff from 'diff';\n\nconst colors = {\n\t'--': kleur.red,\n\t'··': kleur.grey,\n\t'++': kleur.green,\n};\n\nconst TITLE = kleur.dim().italic;\nconst TAB=kleur.dim('→'), SPACE=kleur.dim('·'), NL=kleur.dim('↵');\nconst LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + '\\n';\nconst LINE = (num, x) => kleur.dim('L' + String(num).padStart(x, '0') + ' ');\nconst PRETTY = str => str.replace(/[ ]/g, SPACE).replace(/\\t/g, TAB).replace(/(\\r?\\n)/g, NL);\n\nfunction line(obj, prev, pad) {\n\tlet char = obj.removed ? '--' : obj.added ? '++' : '··';\n\tlet arr = obj.value.replace(/\\r?\\n$/, '').split('\\n');\n\tlet i=0, tmp, out='';\n\n\tif (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\\n';\n\telse if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\\n';\n\n\tfor (; i < arr.length; i++) {\n\t\ttmp = arr[i];\n\t\tif (tmp != null) {\n\t\t\tif (prev) out += LINE(prev + i, pad);\n\t\t\tout += LOG(char, tmp || '\\n');\n\t\t}\n\t}\n\n\treturn out;\n}\n\n// TODO: want better diffing\n//~> complex items bail outright\nexport function arrays(input, expect) {\n\tlet arr = diff.diffArrays(input, expect);\n\tlet i=0, j=0, k=0, tmp, val, char, isObj, str;\n\tlet out = LOG('··', '[');\n\n\tfor (; i < arr.length; i++) {\n\t\tchar = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';\n\n\t\tif (tmp.added) {\n\t\t\tout += colors[char]().underline(TITLE('Expected:')) + '\\n';\n\t\t} else if (tmp.removed) {\n\t\t\tout += colors[char]().underline(TITLE('Actual:')) + '\\n';\n\t\t}\n\n\t\tfor (j=0; j < tmp.value.length; j++) {\n\t\t\tisObj = (tmp.value[j] && typeof tmp.value[j] === 'object');\n\t\t\tval = stringify(tmp.value[j]).split(/\\r?\\n/g);\n\t\t\tfor (k=0; k < val.length;) {\n\t\t\t\tstr = '  ' + val[k++] + (isObj ? '' : ',');\n\t\t\t\tif (isObj && k === val.length && (j + 1) < tmp.value.length) str += ',';\n\t\t\t\tout += LOG(char, str);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out + LOG('··', ']');\n}\n\nexport function lines(input, expect, linenum = 0) {\n\tlet i=0, tmp, output='';\n\tlet arr = diff.diffLines(input, expect);\n\tlet pad = String(expect.split(/\\r?\\n/g).length - linenum).length;\n\n\tfor (; i < arr.length; i++) {\n\t\toutput += line(tmp = arr[i], linenum, pad);\n\t\tif (linenum && !tmp.removed) linenum += tmp.count;\n\t}\n\n\treturn output;\n}\n\nexport function chars(input, expect) {\n\tlet arr = diff.diffChars(input, expect);\n\tlet i=0, output='', tmp;\n\n\tlet l1 = input.length;\n\tlet l2 = expect.length;\n\n\tlet p1 = PRETTY(input);\n\tlet p2 = PRETTY(expect);\n\n\ttmp = arr[i];\n\n\tif (l1 === l2) {\n\t\t// no length offsets\n\t} else if (tmp.removed && arr[i + 1]) {\n\t\tlet del = tmp.count - arr[i + 1].count;\n\t\tif (del == 0) {\n\t\t\t// wash~\n\t\t} else if (del > 0) {\n\t\t\texpect = ' '.repeat(del) + expect;\n\t\t\tp2 = ' '.repeat(del) + p2;\n\t\t\tl2 += del;\n\t\t} else if (del < 0) {\n\t\t\tinput = ' '.repeat(-del) + input;\n\t\t\tp1 = ' '.repeat(-del) + p1;\n\t\t\tl1 += -del;\n\t\t}\n\t}\n\n\toutput += direct(p1, p2, l1, l2);\n\n\tif (l1 === l2) {\n\t\tfor (tmp='  '; i < l1; i++) {\n\t\t\ttmp += input[i] === expect[i] ? ' ' : '^';\n\t\t}\n\t} else {\n\t\tfor (tmp='  '; i < arr.length; i++) {\n\t\t\ttmp += ((arr[i].added || arr[i].removed) ? '^' : ' ').repeat(Math.max(arr[i].count, 0));\n\t\t\tif (i + 1 < arr.length && ((arr[i].added && arr[i+1].removed) || (arr[i].removed && arr[i+1].added))) {\n\t\t\t\tarr[i + 1].count -= arr[i].count;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output + kleur.red(tmp);\n}\n\nexport function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {\n\tlet gutter = 4;\n\tlet lenC = Math.max(lenA, lenB);\n\tlet typeA=typeof input, typeB=typeof expect;\n\n\tif (typeA !== typeB) {\n\t\tgutter = 2;\n\n\t\tlet delA = gutter + lenC - lenA;\n\t\tlet delB = gutter + lenC - lenB;\n\n\t\tinput += ' '.repeat(delA) + kleur.dim(`[${typeA}]`);\n\t\texpect += ' '.repeat(delB) + kleur.dim(`[${typeB}]`);\n\n\t\tlenA += delA + typeA.length + 2;\n\t\tlenB += delB + typeB.length + 2;\n\t\tlenC = Math.max(lenA, lenB);\n\t}\n\n\tlet output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\\n';\n\treturn output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\\n';\n}\n\nexport function sort(input, expect) {\n\tvar k, i=0, tmp, isArr = Array.isArray(input);\n\tvar keys=[], out=isArr ? Array(input.length) : {};\n\n\tif (isArr) {\n\t\tfor (i=0; i < out.length; i++) {\n\t\t\ttmp = input[i];\n\t\t\tif (!tmp || typeof tmp !== 'object') out[i] = tmp;\n\t\t\telse out[i] = sort(tmp, expect[i]); // might not be right\n\t\t}\n\t} else {\n\t\tfor (k in expect)\n\t\t\tkeys.push(k);\n\n\t\tfor (; i < keys.length; i++) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {\n\t\t\t\tif (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;\n\t\t\t\telse out[k] = sort(tmp, expect[k]);\n\t\t\t}\n\t\t}\n\n\t\tfor (k in input) {\n\t\t\tif (!out.hasOwnProperty(k)) {\n\t\t\t\tout[k] = input[k]; // expect didnt have\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n}\n\nexport function circular() {\n\tvar cache = new Set;\n\treturn function print(key, val) {\n\t\tif (val === void 0) return '[__VOID__]';\n\t\tif (typeof val === 'number' && val !== val) return '[__NAN__]';\n\t\tif (!val || typeof val !== 'object') return val;\n\t\tif (cache.has(val)) return '[Circular]';\n\t\tcache.add(val); return val;\n\t}\n}\n\nexport function stringify(input) {\n\treturn JSON.stringify(input, circular(), 2).replace(/\"\\[__NAN__\\]\"/g, 'NaN').replace(/\"\\[__VOID__\\]\"/g, 'undefined');\n}\n\nexport function compare(input, expect) {\n\tif (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);\n\tif (expect instanceof RegExp) return chars(''+input, ''+expect);\n\n\tlet isA = input && typeof input == 'object';\n\tlet isB = expect && typeof expect == 'object';\n\n\tif (isA && isB) input = sort(input, expect);\n\tif (isB) expect = stringify(expect);\n\tif (isA) input = stringify(input);\n\n\tif (expect && typeof expect == 'object') {\n\t\tinput = stringify(sort(input, expect));\n\t\texpect = stringify(expect);\n\t}\n\n\tisA = typeof input == 'string';\n\tisB = typeof expect == 'string';\n\n\tif (isA && /\\r?\\n/.test(input)) return lines(input, ''+expect);\n\tif (isB && /\\r?\\n/.test(expect)) return lines(''+input, expect);\n\tif (isA && isB) return chars(input, expect);\n\n\treturn direct(input, expect);\n}\n","'use strict';\n\nlet FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;\nif (typeof process !== 'undefined') {\n\t({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env);\n\tisTTY = process.stdout && process.stdout.isTTY;\n}\n\nconst $ = {\n\tenabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (\n\t\tFORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY\n\t),\n\n\t// modifiers\n\treset: init(0, 0),\n\tbold: init(1, 22),\n\tdim: init(2, 22),\n\titalic: init(3, 23),\n\tunderline: init(4, 24),\n\tinverse: init(7, 27),\n\thidden: init(8, 28),\n\tstrikethrough: init(9, 29),\n\n\t// colors\n\tblack: init(30, 39),\n\tred: init(31, 39),\n\tgreen: init(32, 39),\n\tyellow: init(33, 39),\n\tblue: init(34, 39),\n\tmagenta: init(35, 39),\n\tcyan: init(36, 39),\n\twhite: init(37, 39),\n\tgray: init(90, 39),\n\tgrey: init(90, 39),\n\n\t// background colors\n\tbgBlack: init(40, 49),\n\tbgRed: init(41, 49),\n\tbgGreen: init(42, 49),\n\tbgYellow: init(43, 49),\n\tbgBlue: init(44, 49),\n\tbgMagenta: init(45, 49),\n\tbgCyan: init(46, 49),\n\tbgWhite: init(47, 49)\n};\n\nfunction run(arr, str) {\n\tlet i=0, tmp, beg='', end='';\n\tfor (; i < arr.length; i++) {\n\t\ttmp = arr[i];\n\t\tbeg += tmp.open;\n\t\tend += tmp.close;\n\t\tif (!!~str.indexOf(tmp.close)) {\n\t\t\tstr = str.replace(tmp.rgx, tmp.close + tmp.open);\n\t\t}\n\t}\n\treturn beg + str + end;\n}\n\nfunction chain(has, keys) {\n\tlet ctx = { has, keys };\n\n\tctx.reset = $.reset.bind(ctx);\n\tctx.bold = $.bold.bind(ctx);\n\tctx.dim = $.dim.bind(ctx);\n\tctx.italic = $.italic.bind(ctx);\n\tctx.underline = $.underline.bind(ctx);\n\tctx.inverse = $.inverse.bind(ctx);\n\tctx.hidden = $.hidden.bind(ctx);\n\tctx.strikethrough = $.strikethrough.bind(ctx);\n\n\tctx.black = $.black.bind(ctx);\n\tctx.red = $.red.bind(ctx);\n\tctx.green = $.green.bind(ctx);\n\tctx.yellow = $.yellow.bind(ctx);\n\tctx.blue = $.blue.bind(ctx);\n\tctx.magenta = $.magenta.bind(ctx);\n\tctx.cyan = $.cyan.bind(ctx);\n\tctx.white = $.white.bind(ctx);\n\tctx.gray = $.gray.bind(ctx);\n\tctx.grey = $.grey.bind(ctx);\n\n\tctx.bgBlack = $.bgBlack.bind(ctx);\n\tctx.bgRed = $.bgRed.bind(ctx);\n\tctx.bgGreen = $.bgGreen.bind(ctx);\n\tctx.bgYellow = $.bgYellow.bind(ctx);\n\tctx.bgBlue = $.bgBlue.bind(ctx);\n\tctx.bgMagenta = $.bgMagenta.bind(ctx);\n\tctx.bgCyan = $.bgCyan.bind(ctx);\n\tctx.bgWhite = $.bgWhite.bind(ctx);\n\n\treturn ctx;\n}\n\nfunction init(open, close) {\n\tlet blk = {\n\t\topen: `\\x1b[${open}m`,\n\t\tclose: `\\x1b[${close}m`,\n\t\trgx: new RegExp(`\\\\x1b\\\\[${close}m`, 'g')\n\t};\n\treturn function (txt) {\n\t\tif (this !== void 0 && this.has !== void 0) {\n\t\t\t!!~this.has.indexOf(open) || (this.has.push(open),this.keys.push(blk));\n\t\t\treturn txt === void 0 ? this : $.enabled ? run(this.keys, txt+'') : txt+'';\n\t\t}\n\t\treturn txt === void 0 ? chain([open], [blk]) : $.enabled ? run([blk], txt+'') : txt+'';\n\t};\n}\n\nexport default $;\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {Pick<Point, 'line'|'column'>} PositionalPoint\n * @typedef {Required<Point>} FullPoint\n * @typedef {NonNullable<Point['offset']>} Offset\n */\n\n/**\n * Get transform functions for the given `document`.\n *\n * @param {string|Uint8Array|VFile} file\n */\nexport function location(file) {\n  var value = String(file)\n  /** @type {Array.<number>} */\n  var indices = []\n  var search = /\\r?\\n|\\r/g\n\n  while (search.test(value)) {\n    indices.push(search.lastIndex)\n  }\n\n  indices.push(value.length + 1)\n\n  return {toPoint, toOffset}\n\n  /**\n   * Get the line and column-based `point` for `offset` in the bound indices.\n   * Returns a point with `undefined` values when given invalid or out of bounds\n   * input.\n   *\n   * @param {Offset} offset\n   * @returns {FullPoint}\n   */\n  function toPoint(offset) {\n    var index = -1\n\n    if (offset > -1 && offset < indices[indices.length - 1]) {\n      while (++index < indices.length) {\n        if (indices[index] > offset) {\n          return {\n            line: index + 1,\n            column: offset - (indices[index - 1] || 0) + 1,\n            offset\n          }\n        }\n      }\n    }\n\n    return {line: undefined, column: undefined, offset: undefined}\n  }\n\n  /**\n   * Get the `offset` for a line and column-based `point` in the bound indices.\n   * Returns `-1` when given invalid or out of bounds input.\n   *\n   * @param {PositionalPoint} point\n   * @returns {Offset}\n   */\n  function toOffset(point) {\n    var line = point && point.line\n    var column = point && point.column\n    /** @type {number} */\n    var offset\n\n    if (\n      typeof line === 'number' &&\n      typeof column === 'number' &&\n      !Number.isNaN(line) &&\n      !Number.isNaN(column) &&\n      line - 1 in indices\n    ) {\n      offset = (indices[line - 2] || 0) + column - 1 || 0\n    }\n\n    return offset > -1 && offset < indices[indices.length - 1] ? offset : -1\n  }\n}\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile-message').VFileMessage} VFileMessage\n */\n\nvar severities = {true: 2, false: 1, null: 0, undefined: 0}\n\n/**\n * @template {VFile} F\n * @param {F} file\n * @returns {F}\n */\nexport function sort(file) {\n  file.messages.sort(comparator)\n  return file\n}\n\n/**\n * @param {VFileMessage} a\n * @param {VFileMessage} b\n * @returns {number}\n */\nfunction comparator(a, b) {\n  return (\n    check(a, b, 'line') ||\n    check(a, b, 'column') ||\n    severities[b.fatal] - severities[a.fatal] ||\n    compare(a, b, 'source') ||\n    compare(a, b, 'ruleId') ||\n    compare(a, b, 'reason') ||\n    0\n  )\n}\n\n/**\n * @param {VFileMessage} a\n * @param {VFileMessage} b\n * @param {string} property\n * @returns {number}\n */\nfunction check(a, b, property) {\n  return (a[property] || 0) - (b[property] || 0)\n}\n\n/**\n * @param {VFileMessage} a\n * @param {VFileMessage} b\n * @param {string} property\n * @returns {number}\n */\nfunction compare(a, b, property) {\n  return String(a[property] || '').localeCompare(b[property] || '')\n}\n","export var weasels = [\n  'a lot',\n  'about',\n  'acts',\n  'again',\n  'all',\n  'almost',\n  'already',\n  'also',\n  'anyway',\n  'appeared',\n  'appears',\n  'are a number',\n  'arguably',\n  'back',\n  'be able to',\n  'began',\n  'believed',\n  'better',\n  'bit',\n  'clearly',\n  'close',\n  'combats',\n  'completely',\n  'considered',\n  'could',\n  'decided',\n  'down',\n  'effective',\n  'efficient',\n  'enough',\n  'even',\n  'ever',\n  'exceedingly',\n  'excellent',\n  'expert',\n  'experts',\n  'extremely',\n  'fairly',\n  'far',\n  'felt',\n  'few',\n  'gains',\n  'heard',\n  'helps',\n  'huge',\n  'improved',\n  'interestingly',\n  'is a number',\n  'is like',\n  'just',\n  'knew',\n  'largely',\n  'like',\n  'linked to',\n  'literally',\n  'looked',\n  'looks',\n  'lots',\n  'many',\n  'might',\n  'most',\n  'mostly',\n  'not rocket science',\n  'noticed',\n  'often',\n  'only',\n  'outside the box',\n  'over',\n  'own',\n  'pretty',\n  'probably',\n  'quite',\n  'rather',\n  'real',\n  'realised',\n  'realized',\n  'really',\n  'recognised',\n  'recognized',\n  'relatively',\n  'remarkably',\n  'reportedly',\n  'saw',\n  'seemed',\n  'seems',\n  'several',\n  'significantly',\n  'smelled',\n  'so',\n  'some',\n  'somehow',\n  'sort',\n  'started',\n  'still',\n  'substantially',\n  'supports',\n  'supposed',\n  'surprisingly',\n  'that',\n  'then',\n  'thought',\n  'tiny',\n  'touched',\n  'understood',\n  'up',\n  'useful',\n  'various',\n  'vast',\n  'very',\n  'virtually',\n  'wanted',\n  'watched',\n  'well',\n  'wished',\n  'wondered',\n  'works'\n]\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './components/sidebar';\nimport './subscribers';\n"],"names":["__","PluginSidebar","PanelBody","PanelRow","ToggleControl","registerPlugin","useSelect","select","dispatch","PROBLEM_TYPES_TO_LABEL","BLOCK_TYPE_CONTENT_ATTRIBUTE","AccessPanel","readingTime","score","polarity","getReadability","problems","currentProblems","getProblems","adverb","filter","type","weasel","hedge","filler","profanity","equality","cliche","passive","readability","includes","simpler","typesToShow","SHOWN_ANNOTATION_TYPES","getUserSettings","margin","Math","round","Object","keys","map","label","help","length","checked","updateUserSettings","source","forEach","getProblemsByType","blockId","blockName","index","offset","__experimentalAddAnnotation","blockClientId","richTextIdentifier","range","start","end","__experimentalRemoveAnnotationsBySource","render","ALLOWED_BLOCKS","PROBLEM_TYPES","number","hedges","exceptions","list","value","replace","weasels","words","adverbs","text","expression","RegExp","join","matches","matchAll","match","Boolean","level","message","phrases","normalizeText","string","trim","ignore","test","cliches","replacements","fillers","action","flow","sensitivity","stripTags","stripAstrals","stripHTMComments","stripSpaces","stripHTMLEntities","preserveWhiteSpace","content","word","replacement","find","split","toLocaleLowerCase","readingScore","tokenize","paragraphs","line","sentences","sentence","reduce","accumulator","currentValue","currentIndex","response","typeMap","messages","actual","position","fatal","count","characterCounter","automatedReadability","push","wordCount","characterCount","alphaNumericCharacters","letters","character","polarityScore","minutes","wordsPerMinute","characters","addProblem","problem","addProblems","removeProblem","name","updateReadability","stats","settings","createReduxStore","register","reducer","selectors","actions","STORE_NAME","store","combineReducers","btoa","window","DEFAULT_USER_SETTINGS","showProblems","state","id","p","user","getProblem","getBlockProblems","subscribe","debounce","check","_content","isUpdatingProblems","queue","getProblemsFromBlock","block","clientId","isAllowed","attribute","attributes","blocks","allowedBlocks","flatMap","addAnnotations","blockProblems","annotationsInBlock","__experimentalGetAnnotations","annotation","__experimentalRemoveAnnotation","scheduleBlockProblemsUpdate","shift","scheduleReadingScoreUpdate","getEditedPostAttribute","getBlocks","selectedBlock","getSelectedBlock","Tokenizer","tokenizer","setEntry","getSentences","getTokens","error","stripHTMLComments","replaceAll"],"sourceRoot":""}